
ExaminationsprojektDA264aDUE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000041dc  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000841dc  000841dc  000141dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000af8  20070000  000841e4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000001b8  20070af8  00084cdc  00020af8  2**2
                  ALLOC
  4 .stack        00002000  20070cb0  00084e94  00020af8  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020af8  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b21  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001b2f7  00000000  00000000  00020b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003eb1  00000000  00000000  0003be71  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005144  00000000  00000000  0003fd22  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b48  00000000  00000000  00044e66  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a58  00000000  00000000  000459ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001b8dd  00000000  00000000  00046406  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00013676  00000000  00000000  00061ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000659a0  00000000  00000000  00075359  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002584  00000000  00000000  000dacfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	b0 2c 07 20 d5 0d 08 00 d1 0d 08 00 d1 0d 08 00     .,. ............
   80010:	d1 0d 08 00 d1 0d 08 00 d1 0d 08 00 00 00 00 00     ................
	...
   8002c:	d1 0d 08 00 d1 0d 08 00 00 00 00 00 d1 0d 08 00     ................
   8003c:	d1 0d 08 00 d1 0d 08 00 d1 0d 08 00 d1 0d 08 00     ................
   8004c:	d1 0d 08 00 d1 0d 08 00 d1 0d 08 00 d1 0d 08 00     ................
   8005c:	d1 0d 08 00 d1 0d 08 00 d1 0d 08 00 00 00 00 00     ................
   8006c:	45 0c 08 00 59 0c 08 00 6d 0c 08 00 81 0c 08 00     E...Y...m.......
	...
   80084:	71 03 08 00 d1 0d 08 00 d1 0d 08 00 d1 0d 08 00     q...............
   80094:	d1 0d 08 00 d1 0d 08 00 d1 0d 08 00 d1 0d 08 00     ................
   800a4:	00 00 00 00 d1 0d 08 00 d1 0d 08 00 d1 0d 08 00     ................
   800b4:	d1 0d 08 00 d1 0d 08 00 d1 0d 08 00 d1 0d 08 00     ................
   800c4:	d1 0d 08 00 d1 0d 08 00 d1 0d 08 00 d1 0d 08 00     ................
   800d4:	d1 0d 08 00 d1 0d 08 00 d1 0d 08 00 d1 0d 08 00     ................
   800e4:	d1 0d 08 00 d1 0d 08 00 d1 0d 08 00 d1 0d 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070af8 	.word	0x20070af8
   80110:	00000000 	.word	0x00000000
   80114:	000841e4 	.word	0x000841e4

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	000841e4 	.word	0x000841e4
   80154:	20070afc 	.word	0x20070afc
   80158:	000841e4 	.word	0x000841e4
   8015c:	00000000 	.word	0x00000000

00080160 <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   80160:	2a00      	cmp	r2, #0
   80162:	d051      	beq.n	80208 <usart_serial_read_packet+0xa8>
{
   80164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80168:	b083      	sub	sp, #12
   8016a:	4605      	mov	r5, r0
   8016c:	460c      	mov	r4, r1
   8016e:	4692      	mov	sl, r2
   80170:	448a      	add	sl, r1

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80172:	4f26      	ldr	r7, [pc, #152]	; (8020c <usart_serial_read_packet+0xac>)
		while (uart_read((Uart*)p_usart, data));
   80174:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80220 <usart_serial_read_packet+0xc0>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80178:	4e25      	ldr	r6, [pc, #148]	; (80210 <usart_serial_read_packet+0xb0>)
   8017a:	e01d      	b.n	801b8 <usart_serial_read_packet+0x58>
		while (uart_read((Uart*)p_usart, data));
   8017c:	4621      	mov	r1, r4
   8017e:	4638      	mov	r0, r7
   80180:	47c8      	blx	r9
   80182:	2800      	cmp	r0, #0
   80184:	d1fa      	bne.n	8017c <usart_serial_read_packet+0x1c>
   80186:	e021      	b.n	801cc <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   80188:	469b      	mov	fp, r3
   8018a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80224 <usart_serial_read_packet+0xc4>
   8018e:	a901      	add	r1, sp, #4
   80190:	4658      	mov	r0, fp
   80192:	47c0      	blx	r8
   80194:	2800      	cmp	r0, #0
   80196:	d1fa      	bne.n	8018e <usart_serial_read_packet+0x2e>
		*data = (uint8_t)(val & 0xFF);
   80198:	9b01      	ldr	r3, [sp, #4]
   8019a:	7023      	strb	r3, [r4, #0]
   8019c:	e019      	b.n	801d2 <usart_serial_read_packet+0x72>
		while (usart_read(p_usart, &val));
   8019e:	469b      	mov	fp, r3
   801a0:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80224 <usart_serial_read_packet+0xc4>
   801a4:	a901      	add	r1, sp, #4
   801a6:	4658      	mov	r0, fp
   801a8:	47c0      	blx	r8
   801aa:	2800      	cmp	r0, #0
   801ac:	d1fa      	bne.n	801a4 <usart_serial_read_packet+0x44>
		*data = (uint8_t)(val & 0xFF);
   801ae:	9b01      	ldr	r3, [sp, #4]
   801b0:	7023      	strb	r3, [r4, #0]
		usart_serial_getchar(usart, data);
		len--;
		data++;
   801b2:	3401      	adds	r4, #1
	while (len) {
   801b4:	4554      	cmp	r4, sl
   801b6:	d023      	beq.n	80200 <usart_serial_read_packet+0xa0>
	uint32_t val = 0;
   801b8:	2300      	movs	r3, #0
   801ba:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   801bc:	42bd      	cmp	r5, r7
   801be:	d0dd      	beq.n	8017c <usart_serial_read_packet+0x1c>
	if (USART0 == p_usart) {
   801c0:	4b14      	ldr	r3, [pc, #80]	; (80214 <usart_serial_read_packet+0xb4>)
   801c2:	429d      	cmp	r5, r3
   801c4:	d0e0      	beq.n	80188 <usart_serial_read_packet+0x28>
	if (USART1 == p_usart) {
   801c6:	4b14      	ldr	r3, [pc, #80]	; (80218 <usart_serial_read_packet+0xb8>)
   801c8:	429d      	cmp	r5, r3
   801ca:	d0e8      	beq.n	8019e <usart_serial_read_packet+0x3e>
	if (USART2 == p_usart) {
   801cc:	4b13      	ldr	r3, [pc, #76]	; (8021c <usart_serial_read_packet+0xbc>)
   801ce:	429d      	cmp	r5, r3
   801d0:	d00b      	beq.n	801ea <usart_serial_read_packet+0x8a>
	if (USART3 == p_usart) {
   801d2:	42b5      	cmp	r5, r6
   801d4:	d1ed      	bne.n	801b2 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   801d6:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80224 <usart_serial_read_packet+0xc4>
   801da:	a901      	add	r1, sp, #4
   801dc:	4630      	mov	r0, r6
   801de:	47c0      	blx	r8
   801e0:	2800      	cmp	r0, #0
   801e2:	d1fa      	bne.n	801da <usart_serial_read_packet+0x7a>
		*data = (uint8_t)(val & 0xFF);
   801e4:	9b01      	ldr	r3, [sp, #4]
   801e6:	7023      	strb	r3, [r4, #0]
   801e8:	e7e3      	b.n	801b2 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   801ea:	469b      	mov	fp, r3
   801ec:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80224 <usart_serial_read_packet+0xc4>
   801f0:	a901      	add	r1, sp, #4
   801f2:	4658      	mov	r0, fp
   801f4:	47c0      	blx	r8
   801f6:	2800      	cmp	r0, #0
   801f8:	d1fa      	bne.n	801f0 <usart_serial_read_packet+0x90>
		*data = (uint8_t)(val & 0xFF);
   801fa:	9b01      	ldr	r3, [sp, #4]
   801fc:	7023      	strb	r3, [r4, #0]
   801fe:	e7d8      	b.n	801b2 <usart_serial_read_packet+0x52>
	}
	return STATUS_OK;
}
   80200:	2000      	movs	r0, #0
   80202:	b003      	add	sp, #12
   80204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80208:	2000      	movs	r0, #0
   8020a:	4770      	bx	lr
   8020c:	400e0800 	.word	0x400e0800
   80210:	400a4000 	.word	0x400a4000
   80214:	40098000 	.word	0x40098000
   80218:	4009c000 	.word	0x4009c000
   8021c:	400a0000 	.word	0x400a0000
   80220:	00080331 	.word	0x00080331
   80224:	00080357 	.word	0x00080357

00080228 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   8022c:	b980      	cbnz	r0, 80250 <_read+0x28>
   8022e:	460c      	mov	r4, r1
   80230:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   80232:	2a00      	cmp	r2, #0
   80234:	dd0f      	ble.n	80256 <_read+0x2e>
   80236:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80238:	4e08      	ldr	r6, [pc, #32]	; (8025c <_read+0x34>)
   8023a:	4d09      	ldr	r5, [pc, #36]	; (80260 <_read+0x38>)
   8023c:	6830      	ldr	r0, [r6, #0]
   8023e:	4621      	mov	r1, r4
   80240:	682b      	ldr	r3, [r5, #0]
   80242:	4798      	blx	r3
		ptr++;
   80244:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   80246:	42bc      	cmp	r4, r7
   80248:	d1f8      	bne.n	8023c <_read+0x14>
		nChars++;
	}
	return nChars;
}
   8024a:	4640      	mov	r0, r8
   8024c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80250:	f04f 38ff 	mov.w	r8, #4294967295
   80254:	e7f9      	b.n	8024a <_read+0x22>
	for (; len > 0; --len) {
   80256:	4680      	mov	r8, r0
   80258:	e7f7      	b.n	8024a <_read+0x22>
   8025a:	bf00      	nop
   8025c:	20070c64 	.word	0x20070c64
   80260:	20070c5c 	.word	0x20070c5c

00080264 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80264:	3801      	subs	r0, #1
   80266:	2802      	cmp	r0, #2
   80268:	d815      	bhi.n	80296 <_write+0x32>
{
   8026a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8026e:	460e      	mov	r6, r1
   80270:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   80272:	b19a      	cbz	r2, 8029c <_write+0x38>
   80274:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80276:	f8df 8038 	ldr.w	r8, [pc, #56]	; 802b0 <_write+0x4c>
   8027a:	4f0c      	ldr	r7, [pc, #48]	; (802ac <_write+0x48>)
   8027c:	f8d8 0000 	ldr.w	r0, [r8]
   80280:	f815 1b01 	ldrb.w	r1, [r5], #1
   80284:	683b      	ldr	r3, [r7, #0]
   80286:	4798      	blx	r3
   80288:	2800      	cmp	r0, #0
   8028a:	db0a      	blt.n	802a2 <_write+0x3e>
   8028c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   8028e:	3c01      	subs	r4, #1
   80290:	d1f4      	bne.n	8027c <_write+0x18>
   80292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80296:	f04f 30ff 	mov.w	r0, #4294967295
   8029a:	4770      	bx	lr
	for (; len != 0; --len) {
   8029c:	4610      	mov	r0, r2
   8029e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   802a2:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   802a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   802aa:	bf00      	nop
   802ac:	20070c60 	.word	0x20070c60
   802b0:	20070c64 	.word	0x20070c64

000802b4 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   802b4:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   802b6:	0189      	lsls	r1, r1, #6
   802b8:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   802ba:	2402      	movs	r4, #2
   802bc:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   802be:	f04f 31ff 	mov.w	r1, #4294967295
   802c2:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   802c4:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   802c6:	605a      	str	r2, [r3, #4]
}
   802c8:	bc10      	pop	{r4}
   802ca:	4770      	bx	lr

000802cc <tc_set_block_mode>:
		uint32_t ul_blockmode)
{
	/* Validate inputs. */
	Assert(p_tc);
	
	p_tc->TC_BMR = ul_blockmode;
   802cc:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   802d0:	4770      	bx	lr

000802d2 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   802d2:	0189      	lsls	r1, r1, #6
   802d4:	2305      	movs	r3, #5
   802d6:	5043      	str	r3, [r0, r1]
   802d8:	4770      	bx	lr

000802da <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   802da:	0189      	lsls	r1, r1, #6
   802dc:	2302      	movs	r3, #2
   802de:	5043      	str	r3, [r0, r1]
   802e0:	4770      	bx	lr

000802e2 <tc_read_cv>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
   802e2:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   802e6:	6908      	ldr	r0, [r1, #16]
}
   802e8:	4770      	bx	lr

000802ea <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   802ea:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   802ec:	23ac      	movs	r3, #172	; 0xac
   802ee:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   802f0:	680b      	ldr	r3, [r1, #0]
   802f2:	684a      	ldr	r2, [r1, #4]
   802f4:	fbb3 f3f2 	udiv	r3, r3, r2
   802f8:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   802fa:	1e5c      	subs	r4, r3, #1
   802fc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80300:	4294      	cmp	r4, r2
   80302:	d80b      	bhi.n	8031c <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   80304:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80306:	688b      	ldr	r3, [r1, #8]
   80308:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8030a:	f240 2302 	movw	r3, #514	; 0x202
   8030e:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80312:	2350      	movs	r3, #80	; 0x50
   80314:	6003      	str	r3, [r0, #0]

	return 0;
   80316:	2000      	movs	r0, #0
}
   80318:	bc10      	pop	{r4}
   8031a:	4770      	bx	lr
		return 1;
   8031c:	2001      	movs	r0, #1
   8031e:	e7fb      	b.n	80318 <uart_init+0x2e>

00080320 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80320:	6943      	ldr	r3, [r0, #20]
   80322:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80326:	bf1a      	itte	ne
   80328:	61c1      	strne	r1, [r0, #28]
	return 0;
   8032a:	2000      	movne	r0, #0
		return 1;
   8032c:	2001      	moveq	r0, #1
}
   8032e:	4770      	bx	lr

00080330 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80330:	6943      	ldr	r3, [r0, #20]
   80332:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80336:	bf1d      	ittte	ne
   80338:	6983      	ldrne	r3, [r0, #24]
   8033a:	700b      	strbne	r3, [r1, #0]
	return 0;
   8033c:	2000      	movne	r0, #0
		return 1;
   8033e:	2001      	moveq	r0, #1
}
   80340:	4770      	bx	lr

00080342 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80342:	6943      	ldr	r3, [r0, #20]
   80344:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80348:	bf1d      	ittte	ne
   8034a:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   8034e:	61c1      	strne	r1, [r0, #28]
	return 0;
   80350:	2000      	movne	r0, #0
		return 1;
   80352:	2001      	moveq	r0, #1
}
   80354:	4770      	bx	lr

00080356 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80356:	6943      	ldr	r3, [r0, #20]
   80358:	f013 0f01 	tst.w	r3, #1
   8035c:	d005      	beq.n	8036a <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   8035e:	6983      	ldr	r3, [r0, #24]
   80360:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80364:	600b      	str	r3, [r1, #0]

	return 0;
   80366:	2000      	movs	r0, #0
   80368:	4770      	bx	lr
		return 1;
   8036a:	2001      	movs	r0, #1
}
   8036c:	4770      	bx	lr
	...

00080370 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   80370:	b500      	push	{lr}
   80372:	b083      	sub	sp, #12
#if SAMD || SAMR21 || SAML21 || SAMR30
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
   80374:	2201      	movs	r2, #1
   80376:	f10d 0107 	add.w	r1, sp, #7
   8037a:	4810      	ldr	r0, [pc, #64]	; (803bc <USART0_Handler+0x4c>)
   8037c:	4b10      	ldr	r3, [pc, #64]	; (803c0 <USART0_Handler+0x50>)
   8037e:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   80380:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80382:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   80386:	2200      	movs	r2, #0
   80388:	4b0e      	ldr	r3, [pc, #56]	; (803c4 <USART0_Handler+0x54>)
   8038a:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   8038c:	4b0e      	ldr	r3, [pc, #56]	; (803c8 <USART0_Handler+0x58>)
   8038e:	781b      	ldrb	r3, [r3, #0]
   80390:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80394:	4a0d      	ldr	r2, [pc, #52]	; (803cc <USART0_Handler+0x5c>)
   80396:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   80398:	2b9b      	cmp	r3, #155	; 0x9b
   8039a:	d00b      	beq.n	803b4 <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
   8039c:	3301      	adds	r3, #1
   8039e:	4a0a      	ldr	r2, [pc, #40]	; (803c8 <USART0_Handler+0x58>)
   803a0:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   803a2:	2201      	movs	r2, #1
   803a4:	4b07      	ldr	r3, [pc, #28]	; (803c4 <USART0_Handler+0x54>)
   803a6:	701a      	strb	r2, [r3, #0]
   803a8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   803ac:	b662      	cpsie	i
}
   803ae:	b003      	add	sp, #12
   803b0:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
   803b4:	2200      	movs	r2, #0
   803b6:	4b04      	ldr	r3, [pc, #16]	; (803c8 <USART0_Handler+0x58>)
   803b8:	701a      	strb	r2, [r3, #0]
   803ba:	e7f2      	b.n	803a2 <USART0_Handler+0x32>
   803bc:	40098000 	.word	0x40098000
   803c0:	00080161 	.word	0x00080161
   803c4:	2007012c 	.word	0x2007012c
   803c8:	20070bb0 	.word	0x20070bb0
   803cc:	20070b14 	.word	0x20070b14

000803d0 <usart_serial_getchar>:
{
   803d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   803d2:	b083      	sub	sp, #12
   803d4:	4604      	mov	r4, r0
   803d6:	460d      	mov	r5, r1
	uint32_t val = 0;
   803d8:	2300      	movs	r3, #0
   803da:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   803dc:	4b20      	ldr	r3, [pc, #128]	; (80460 <usart_serial_getchar+0x90>)
   803de:	4298      	cmp	r0, r3
   803e0:	d00d      	beq.n	803fe <usart_serial_getchar+0x2e>
	if (USART0 == p_usart) {
   803e2:	4b20      	ldr	r3, [pc, #128]	; (80464 <usart_serial_getchar+0x94>)
   803e4:	4298      	cmp	r0, r3
   803e6:	d012      	beq.n	8040e <usart_serial_getchar+0x3e>
	if (USART1 == p_usart) {
   803e8:	4b1f      	ldr	r3, [pc, #124]	; (80468 <usart_serial_getchar+0x98>)
   803ea:	4298      	cmp	r0, r3
   803ec:	d019      	beq.n	80422 <usart_serial_getchar+0x52>
	if (USART2 == p_usart) {
   803ee:	4b1f      	ldr	r3, [pc, #124]	; (8046c <usart_serial_getchar+0x9c>)
   803f0:	429c      	cmp	r4, r3
   803f2:	d020      	beq.n	80436 <usart_serial_getchar+0x66>
	if (USART3 == p_usart) {
   803f4:	4b1e      	ldr	r3, [pc, #120]	; (80470 <usart_serial_getchar+0xa0>)
   803f6:	429c      	cmp	r4, r3
   803f8:	d027      	beq.n	8044a <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   803fa:	b003      	add	sp, #12
   803fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   803fe:	461f      	mov	r7, r3
   80400:	4e1c      	ldr	r6, [pc, #112]	; (80474 <usart_serial_getchar+0xa4>)
   80402:	4629      	mov	r1, r5
   80404:	4638      	mov	r0, r7
   80406:	47b0      	blx	r6
   80408:	2800      	cmp	r0, #0
   8040a:	d1fa      	bne.n	80402 <usart_serial_getchar+0x32>
   8040c:	e7ef      	b.n	803ee <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   8040e:	461f      	mov	r7, r3
   80410:	4e19      	ldr	r6, [pc, #100]	; (80478 <usart_serial_getchar+0xa8>)
   80412:	a901      	add	r1, sp, #4
   80414:	4638      	mov	r0, r7
   80416:	47b0      	blx	r6
   80418:	2800      	cmp	r0, #0
   8041a:	d1fa      	bne.n	80412 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   8041c:	9b01      	ldr	r3, [sp, #4]
   8041e:	702b      	strb	r3, [r5, #0]
   80420:	e7e8      	b.n	803f4 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   80422:	461e      	mov	r6, r3
   80424:	4c14      	ldr	r4, [pc, #80]	; (80478 <usart_serial_getchar+0xa8>)
   80426:	a901      	add	r1, sp, #4
   80428:	4630      	mov	r0, r6
   8042a:	47a0      	blx	r4
   8042c:	2800      	cmp	r0, #0
   8042e:	d1fa      	bne.n	80426 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   80430:	9b01      	ldr	r3, [sp, #4]
   80432:	702b      	strb	r3, [r5, #0]
   80434:	e7e1      	b.n	803fa <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   80436:	461e      	mov	r6, r3
   80438:	4c0f      	ldr	r4, [pc, #60]	; (80478 <usart_serial_getchar+0xa8>)
   8043a:	a901      	add	r1, sp, #4
   8043c:	4630      	mov	r0, r6
   8043e:	47a0      	blx	r4
   80440:	2800      	cmp	r0, #0
   80442:	d1fa      	bne.n	8043a <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   80444:	9b01      	ldr	r3, [sp, #4]
   80446:	702b      	strb	r3, [r5, #0]
   80448:	e7d7      	b.n	803fa <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   8044a:	461e      	mov	r6, r3
   8044c:	4c0a      	ldr	r4, [pc, #40]	; (80478 <usart_serial_getchar+0xa8>)
   8044e:	a901      	add	r1, sp, #4
   80450:	4630      	mov	r0, r6
   80452:	47a0      	blx	r4
   80454:	2800      	cmp	r0, #0
   80456:	d1fa      	bne.n	8044e <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   80458:	9b01      	ldr	r3, [sp, #4]
   8045a:	702b      	strb	r3, [r5, #0]
}
   8045c:	e7cd      	b.n	803fa <usart_serial_getchar+0x2a>
   8045e:	bf00      	nop
   80460:	400e0800 	.word	0x400e0800
   80464:	40098000 	.word	0x40098000
   80468:	4009c000 	.word	0x4009c000
   8046c:	400a0000 	.word	0x400a0000
   80470:	400a4000 	.word	0x400a4000
   80474:	00080331 	.word	0x00080331
   80478:	00080357 	.word	0x00080357

0008047c <usart_serial_putchar>:
{
   8047c:	b570      	push	{r4, r5, r6, lr}
   8047e:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   80480:	4b1e      	ldr	r3, [pc, #120]	; (804fc <usart_serial_putchar+0x80>)
   80482:	4298      	cmp	r0, r3
   80484:	d00d      	beq.n	804a2 <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   80486:	4b1e      	ldr	r3, [pc, #120]	; (80500 <usart_serial_putchar+0x84>)
   80488:	4298      	cmp	r0, r3
   8048a:	d013      	beq.n	804b4 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   8048c:	4b1d      	ldr	r3, [pc, #116]	; (80504 <usart_serial_putchar+0x88>)
   8048e:	4298      	cmp	r0, r3
   80490:	d019      	beq.n	804c6 <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   80492:	4b1d      	ldr	r3, [pc, #116]	; (80508 <usart_serial_putchar+0x8c>)
   80494:	4298      	cmp	r0, r3
   80496:	d01f      	beq.n	804d8 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   80498:	4b1c      	ldr	r3, [pc, #112]	; (8050c <usart_serial_putchar+0x90>)
   8049a:	4298      	cmp	r0, r3
   8049c:	d025      	beq.n	804ea <usart_serial_putchar+0x6e>
	return 0;
   8049e:	2000      	movs	r0, #0
}
   804a0:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   804a2:	461e      	mov	r6, r3
   804a4:	4d1a      	ldr	r5, [pc, #104]	; (80510 <usart_serial_putchar+0x94>)
   804a6:	4621      	mov	r1, r4
   804a8:	4630      	mov	r0, r6
   804aa:	47a8      	blx	r5
   804ac:	2800      	cmp	r0, #0
   804ae:	d1fa      	bne.n	804a6 <usart_serial_putchar+0x2a>
		return 1;
   804b0:	2001      	movs	r0, #1
   804b2:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   804b4:	461e      	mov	r6, r3
   804b6:	4d17      	ldr	r5, [pc, #92]	; (80514 <usart_serial_putchar+0x98>)
   804b8:	4621      	mov	r1, r4
   804ba:	4630      	mov	r0, r6
   804bc:	47a8      	blx	r5
   804be:	2800      	cmp	r0, #0
   804c0:	d1fa      	bne.n	804b8 <usart_serial_putchar+0x3c>
		return 1;
   804c2:	2001      	movs	r0, #1
   804c4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   804c6:	461e      	mov	r6, r3
   804c8:	4d12      	ldr	r5, [pc, #72]	; (80514 <usart_serial_putchar+0x98>)
   804ca:	4621      	mov	r1, r4
   804cc:	4630      	mov	r0, r6
   804ce:	47a8      	blx	r5
   804d0:	2800      	cmp	r0, #0
   804d2:	d1fa      	bne.n	804ca <usart_serial_putchar+0x4e>
		return 1;
   804d4:	2001      	movs	r0, #1
   804d6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   804d8:	461e      	mov	r6, r3
   804da:	4d0e      	ldr	r5, [pc, #56]	; (80514 <usart_serial_putchar+0x98>)
   804dc:	4621      	mov	r1, r4
   804de:	4630      	mov	r0, r6
   804e0:	47a8      	blx	r5
   804e2:	2800      	cmp	r0, #0
   804e4:	d1fa      	bne.n	804dc <usart_serial_putchar+0x60>
		return 1;
   804e6:	2001      	movs	r0, #1
   804e8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   804ea:	461e      	mov	r6, r3
   804ec:	4d09      	ldr	r5, [pc, #36]	; (80514 <usart_serial_putchar+0x98>)
   804ee:	4621      	mov	r1, r4
   804f0:	4630      	mov	r0, r6
   804f2:	47a8      	blx	r5
   804f4:	2800      	cmp	r0, #0
   804f6:	d1fa      	bne.n	804ee <usart_serial_putchar+0x72>
		return 1;
   804f8:	2001      	movs	r0, #1
   804fa:	bd70      	pop	{r4, r5, r6, pc}
   804fc:	400e0800 	.word	0x400e0800
   80500:	40098000 	.word	0x40098000
   80504:	4009c000 	.word	0x4009c000
   80508:	400a0000 	.word	0x400a0000
   8050c:	400a4000 	.word	0x400a4000
   80510:	00080321 	.word	0x00080321
   80514:	00080343 	.word	0x00080343

00080518 <configureConsole>:
#include "consoleFunctions.h"

void configureConsole(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
/* Note that  the baudrate, parity and other parameters must be set in conf/conf_uart_serial.h */
{
   80518:	b530      	push	{r4, r5, lr}
   8051a:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8051c:	2008      	movs	r0, #8
   8051e:	4d15      	ldr	r5, [pc, #84]	; (80574 <configureConsole+0x5c>)
   80520:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80522:	4c15      	ldr	r4, [pc, #84]	; (80578 <configureConsole+0x60>)
   80524:	4b15      	ldr	r3, [pc, #84]	; (8057c <configureConsole+0x64>)
   80526:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80528:	4a15      	ldr	r2, [pc, #84]	; (80580 <configureConsole+0x68>)
   8052a:	4b16      	ldr	r3, [pc, #88]	; (80584 <configureConsole+0x6c>)
   8052c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   8052e:	4a16      	ldr	r2, [pc, #88]	; (80588 <configureConsole+0x70>)
   80530:	4b16      	ldr	r3, [pc, #88]	; (8058c <configureConsole+0x74>)
   80532:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80534:	4b16      	ldr	r3, [pc, #88]	; (80590 <configureConsole+0x78>)
   80536:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80538:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   8053c:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   8053e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80542:	9303      	str	r3, [sp, #12]
   80544:	2008      	movs	r0, #8
   80546:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   80548:	a901      	add	r1, sp, #4
   8054a:	4620      	mov	r0, r4
   8054c:	4b11      	ldr	r3, [pc, #68]	; (80594 <configureConsole+0x7c>)
   8054e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80550:	4d11      	ldr	r5, [pc, #68]	; (80598 <configureConsole+0x80>)
   80552:	682b      	ldr	r3, [r5, #0]
   80554:	2100      	movs	r1, #0
   80556:	6898      	ldr	r0, [r3, #8]
   80558:	4c10      	ldr	r4, [pc, #64]	; (8059c <configureConsole+0x84>)
   8055a:	47a0      	blx	r4
	setbuf(stdin, NULL);
   8055c:	682b      	ldr	r3, [r5, #0]
   8055e:	2100      	movs	r1, #0
   80560:	6858      	ldr	r0, [r3, #4]
   80562:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   80564:	480e      	ldr	r0, [pc, #56]	; (805a0 <configureConsole+0x88>)
   80566:	4c0f      	ldr	r4, [pc, #60]	; (805a4 <configureConsole+0x8c>)
   80568:	47a0      	blx	r4
	printf("=============\n");
   8056a:	480f      	ldr	r0, [pc, #60]	; (805a8 <configureConsole+0x90>)
   8056c:	47a0      	blx	r4
   8056e:	b005      	add	sp, #20
   80570:	bd30      	pop	{r4, r5, pc}
   80572:	bf00      	nop
   80574:	00080d7d 	.word	0x00080d7d
   80578:	400e0800 	.word	0x400e0800
   8057c:	20070c64 	.word	0x20070c64
   80580:	0008047d 	.word	0x0008047d
   80584:	20070c60 	.word	0x20070c60
   80588:	000803d1 	.word	0x000803d1
   8058c:	20070c5c 	.word	0x20070c5c
   80590:	0501bd00 	.word	0x0501bd00
   80594:	000802eb 	.word	0x000802eb
   80598:	20070148 	.word	0x20070148
   8059c:	0008120d 	.word	0x0008120d
   805a0:	00083ff8 	.word	0x00083ff8
   805a4:	00081115 	.word	0x00081115
   805a8:	00084008 	.word	0x00084008

000805ac <delayInit>:

#include "asf.h"
#include "DelayFunctions.h"

int delayInit(void)		/* Initializes the timer used for delays */
{
   805ac:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC0);	/* power on the peripheral clock for timers */
   805ae:	201b      	movs	r0, #27
   805b0:	4b08      	ldr	r3, [pc, #32]	; (805d4 <delayInit+0x28>)
   805b2:	4798      	blx	r3
	tc_init(TC0,0,0);				/* TC0, channel 0, TCLK1 och capturemode */
   805b4:	4c08      	ldr	r4, [pc, #32]	; (805d8 <delayInit+0x2c>)
   805b6:	2200      	movs	r2, #0
   805b8:	4611      	mov	r1, r2
   805ba:	4620      	mov	r0, r4
   805bc:	4b07      	ldr	r3, [pc, #28]	; (805dc <delayInit+0x30>)
   805be:	4798      	blx	r3
	tc_set_block_mode(TC0,0);
   805c0:	2100      	movs	r1, #0
   805c2:	4620      	mov	r0, r4
   805c4:	4b06      	ldr	r3, [pc, #24]	; (805e0 <delayInit+0x34>)
   805c6:	4798      	blx	r3
	tc_stop(TC0,0);					/* making sure the timer does not run  */
   805c8:	2100      	movs	r1, #0
   805ca:	4620      	mov	r0, r4
   805cc:	4b05      	ldr	r3, [pc, #20]	; (805e4 <delayInit+0x38>)
   805ce:	4798      	blx	r3
	return 0;						/* evertyhing is ok, typical response */
}
   805d0:	2000      	movs	r0, #0
   805d2:	bd10      	pop	{r4, pc}
   805d4:	00080d7d 	.word	0x00080d7d
   805d8:	40080000 	.word	0x40080000
   805dc:	000802b5 	.word	0x000802b5
   805e0:	000802cd 	.word	0x000802cd
   805e4:	000802db 	.word	0x000802db

000805e8 <delayMicroseconds>:


void delayMicroseconds(uint32_t us)		/* A simple implementation for a delay in us (not calibrated) */
{
   805e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   805ea:	4605      	mov	r5, r0
	tc_start(TC0,0);
   805ec:	2100      	movs	r1, #0
   805ee:	4809      	ldr	r0, [pc, #36]	; (80614 <delayMicroseconds+0x2c>)
   805f0:	4b09      	ldr	r3, [pc, #36]	; (80618 <delayMicroseconds+0x30>)
   805f2:	4798      	blx	r3
	while (tc_read_cv(TC0,0) < us*42);
   805f4:	242a      	movs	r4, #42	; 0x2a
   805f6:	fb04 f405 	mul.w	r4, r4, r5
   805fa:	4f06      	ldr	r7, [pc, #24]	; (80614 <delayMicroseconds+0x2c>)
   805fc:	2600      	movs	r6, #0
   805fe:	4d07      	ldr	r5, [pc, #28]	; (8061c <delayMicroseconds+0x34>)
   80600:	4631      	mov	r1, r6
   80602:	4638      	mov	r0, r7
   80604:	47a8      	blx	r5
   80606:	42a0      	cmp	r0, r4
   80608:	d3fa      	bcc.n	80600 <delayMicroseconds+0x18>
	tc_stop(TC0,0);
   8060a:	2100      	movs	r1, #0
   8060c:	4801      	ldr	r0, [pc, #4]	; (80614 <delayMicroseconds+0x2c>)
   8060e:	4b04      	ldr	r3, [pc, #16]	; (80620 <delayMicroseconds+0x38>)
   80610:	4798      	blx	r3
   80612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80614:	40080000 	.word	0x40080000
   80618:	000802d3 	.word	0x000802d3
   8061c:	000802e3 	.word	0x000802e3
   80620:	000802db 	.word	0x000802db

00080624 <lcdWrite4DigitNumber>:
#include "DelayFunctions.h"


/*Writes a four digit number*/
int lcdWrite4DigitNumber(int number)
{
   80624:	b5f0      	push	{r4, r5, r6, r7, lr}
   80626:	b083      	sub	sp, #12
	/* Write code here */
	char buffer[5];				//Four digits + '\0'.
	itoa(number,buffer,10);		//Converts the int value to a char array.
   80628:	220a      	movs	r2, #10
   8062a:	4669      	mov	r1, sp
   8062c:	4b0a      	ldr	r3, [pc, #40]	; (80658 <lcdWrite4DigitNumber+0x34>)
   8062e:	4798      	blx	r3
	char *p=buffer;
	while(*p!='\0'){
   80630:	f89d 3000 	ldrb.w	r3, [sp]
   80634:	b16b      	cbz	r3, 80652 <lcdWrite4DigitNumber+0x2e>
   80636:	466c      	mov	r4, sp
		delayMicroseconds(1000);
   80638:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   8063c:	4e07      	ldr	r6, [pc, #28]	; (8065c <lcdWrite4DigitNumber+0x38>)
		lcdWrite(*p, 1);
   8063e:	4d08      	ldr	r5, [pc, #32]	; (80660 <lcdWrite4DigitNumber+0x3c>)
		delayMicroseconds(1000);
   80640:	4638      	mov	r0, r7
   80642:	47b0      	blx	r6
		lcdWrite(*p, 1);
   80644:	2101      	movs	r1, #1
   80646:	7820      	ldrb	r0, [r4, #0]
   80648:	47a8      	blx	r5
	while(*p!='\0'){
   8064a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   8064e:	2b00      	cmp	r3, #0
   80650:	d1f6      	bne.n	80640 <lcdWrite4DigitNumber+0x1c>
		p++;
	}
	
	return 0;	/* Assuming everything went ok */
}
   80652:	2000      	movs	r0, #0
   80654:	b003      	add	sp, #12
   80656:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80658:	0008116d 	.word	0x0008116d
   8065c:	000805e9 	.word	0x000805e9
   80660:	00080665 	.word	0x00080665

00080664 <lcdWrite>:
/*
 *	writes the byte (8 bits) to the LCD display as two consecutive 4 bits 
 *	type = 0 controls the display
 *	type = 1 writes the content of the byte (usually interpreted as ASCII-code) to the display
 */
{
   80664:	b5f0      	push	{r4, r5, r6, r7, lr}
   80666:	b085      	sub	sp, #20
   80668:	4605      	mov	r5, r0
   8066a:	460c      	mov	r4, r1
	/* In it's infinite wisdom the shield has the data pins in mirrored order compared to the Due board */
	uint8_t mirror_pin[16]={0b0000,0b1000,0b0100,0b1100,0b0010,0b1010,0b0110,0b1110,0b0001,0b1001,0b0101,0b1101,0b0011,0b1011,0b0111,0b1111};
   8066c:	4b1f      	ldr	r3, [pc, #124]	; (806ec <lcdWrite+0x88>)
   8066e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   80670:	ae04      	add	r6, sp, #16
   80672:	e906 000f 	stmdb	r6, {r0, r1, r2, r3}

	byte_orig = byte;

	/* write the first 4 bits to the shield. */
	byte = byte>>4;
	byte = mirror_pin[byte];
   80676:	eb06 1315 	add.w	r3, r6, r5, lsr #4
	byte32 = (uint32_t)byte << 23;
   8067a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   8067e:	05db      	lsls	r3, r3, #23
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
   80680:	2c00      	cmp	r4, #0
   80682:	d12d      	bne.n	806e0 <lcdWrite+0x7c>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80684:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   80688:	4a19      	ldr	r2, [pc, #100]	; (806f0 <lcdWrite+0x8c>)
   8068a:	6351      	str	r1, [r2, #52]	; 0x34
__always_inline static void arch_ioport_set_port_level(ioport_port_t port,
		ioport_port_mask_t mask, ioport_port_mask_t level)
{
	Pio *base = arch_ioport_port_to_base(port);

	base->PIO_SODR = mask & level;
   8068c:	f003 62f0 	and.w	r2, r3, #125829120	; 0x7800000
   80690:	4c17      	ldr	r4, [pc, #92]	; (806f0 <lcdWrite+0x8c>)
   80692:	6322      	str	r2, [r4, #48]	; 0x30
	base->PIO_CODR = mask & ~level;
   80694:	43db      	mvns	r3, r3
   80696:	f003 63f0 	and.w	r3, r3, #125829120	; 0x7800000
   8069a:	6363      	str	r3, [r4, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8069c:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
   806a0:	6327      	str	r7, [r4, #48]	; 0x30
	mirrored_output = byte<<4;
	
	ioport_set_pin_level(LCD_RS, type); 
	ioport_set_port_level(IOPORT_PIOC, LCD_mask_D4_D7, byte32);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delayMicroseconds(10);
   806a2:	200a      	movs	r0, #10
   806a4:	4e13      	ldr	r6, [pc, #76]	; (806f4 <lcdWrite+0x90>)
   806a6:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   806a8:	6367      	str	r7, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	
	delayMicroseconds(1000);
   806aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   806ae:	47b0      	blx	r6
	
	/* write the second 4 bits to the shield. */
	byte = byte_orig;
	byte = byte & 0x0f;
	byte = mirror_pin[byte];
   806b0:	f005 050f 	and.w	r5, r5, #15
   806b4:	ab04      	add	r3, sp, #16
   806b6:	441d      	add	r5, r3
	byte32 = (uint32_t)byte<<23;
   806b8:	f815 3c10 	ldrb.w	r3, [r5, #-16]
   806bc:	05db      	lsls	r3, r3, #23
	base->PIO_SODR = mask & level;
   806be:	f003 62f0 	and.w	r2, r3, #125829120	; 0x7800000
   806c2:	6322      	str	r2, [r4, #48]	; 0x30
	base->PIO_CODR = mask & ~level;
   806c4:	43db      	mvns	r3, r3
   806c6:	f003 63f0 	and.w	r3, r3, #125829120	; 0x7800000
   806ca:	6363      	str	r3, [r4, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   806cc:	6327      	str	r7, [r4, #48]	; 0x30
	mirrored_output = mirrored_output + byte;

	ioport_set_port_level(IOPORT_PIOC, LCD_mask_D4_D7, byte32);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delayMicroseconds(10);
   806ce:	200a      	movs	r0, #10
   806d0:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   806d2:	6367      	str	r7, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	delayMicroseconds(1000);
   806d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   806d8:	47b0      	blx	r6
	
	return 0;
}
   806da:	2000      	movs	r0, #0
   806dc:	b005      	add	sp, #20
   806de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   806e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   806e4:	4a02      	ldr	r2, [pc, #8]	; (806f0 <lcdWrite+0x8c>)
   806e6:	6311      	str	r1, [r2, #48]	; 0x30
   806e8:	e7d0      	b.n	8068c <lcdWrite+0x28>
   806ea:	bf00      	nop
   806ec:	00084018 	.word	0x00084018
   806f0:	400e1200 	.word	0x400e1200
   806f4:	000805e9 	.word	0x000805e9

000806f8 <lcdInit>:
{
   806f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   806fc:	4c35      	ldr	r4, [pc, #212]	; (807d4 <lcdInit+0xdc>)
   806fe:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
   80702:	6127      	str	r7, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80704:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80708:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
   8070c:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8070e:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_OER = mask;
   80712:	f04f 63f0 	mov.w	r3, #125829120	; 0x7800000
   80716:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = mask;
   80718:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8071c:	6365      	str	r5, [r4, #52]	; 0x34
	delayMicroseconds(30000);		/* wait > 15 ms */
   8071e:	f247 5030 	movw	r0, #30000	; 0x7530
   80722:	4e2d      	ldr	r6, [pc, #180]	; (807d8 <lcdInit+0xe0>)
   80724:	47b0      	blx	r6
   80726:	6367      	str	r7, [r4, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80728:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
   8072c:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   80730:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
   80734:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80738:	f04f 7880 	mov.w	r8, #16777216	; 0x1000000
   8073c:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   80740:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
   80744:	6367      	str	r7, [r4, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80746:	6325      	str	r5, [r4, #48]	; 0x30
	delayMicroseconds(10);		/* wait 1 us */
   80748:	200a      	movs	r0, #10
   8074a:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8074c:	6365      	str	r5, [r4, #52]	; 0x34
	delayMicroseconds(41000);	/* wait for more than 4,1 ms */
   8074e:	f24a 0028 	movw	r0, #41000	; 0xa028
   80752:	47b0      	blx	r6
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80754:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   80758:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8075c:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   80760:	6367      	str	r7, [r4, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80762:	6325      	str	r5, [r4, #48]	; 0x30
	delayMicroseconds(10);	/* delay 1 us */
   80764:	200a      	movs	r0, #10
   80766:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80768:	6365      	str	r5, [r4, #52]	; 0x34
	delayMicroseconds(1000);	/* wait 100 us */
   8076a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   8076e:	47b0      	blx	r6
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80770:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   80774:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80778:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   8077c:	6367      	str	r7, [r4, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8077e:	6325      	str	r5, [r4, #48]	; 0x30
	delayMicroseconds(10);	/* wait 1 us */
   80780:	200a      	movs	r0, #10
   80782:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80784:	6365      	str	r5, [r4, #52]	; 0x34
	delayMicroseconds(1000);	/* wait 100 us */
   80786:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   8078a:	47b0      	blx	r6
   8078c:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80790:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80794:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   80798:	6367      	str	r7, [r4, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8079a:	6325      	str	r5, [r4, #48]	; 0x30
	delayMicroseconds(10);
   8079c:	200a      	movs	r0, #10
   8079e:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   807a0:	6365      	str	r5, [r4, #52]	; 0x34
	delayMicroseconds(1000);
   807a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   807a6:	47b0      	blx	r6
	lcdWrite(0b00101000, LOW);		/* Two rows, small font */
   807a8:	2100      	movs	r1, #0
   807aa:	2028      	movs	r0, #40	; 0x28
   807ac:	4c0b      	ldr	r4, [pc, #44]	; (807dc <lcdInit+0xe4>)
   807ae:	47a0      	blx	r4
	lcdWrite(0b00001000, LOW);		/* Display off */
   807b0:	2100      	movs	r1, #0
   807b2:	2008      	movs	r0, #8
   807b4:	47a0      	blx	r4
	lcdWrite(0b00000001, LOW);		/* Display clear */
   807b6:	2100      	movs	r1, #0
   807b8:	2001      	movs	r0, #1
   807ba:	47a0      	blx	r4
	delayMicroseconds(30000);
   807bc:	f247 5030 	movw	r0, #30000	; 0x7530
   807c0:	47b0      	blx	r6
	lcdWrite(0b00000110, LOW);		/* Entry mode set: move cursor right, no display shift */
   807c2:	2100      	movs	r1, #0
   807c4:	2006      	movs	r0, #6
   807c6:	47a0      	blx	r4
	lcdWrite(0b00001111 ,LOW);		/* Display on, cursor on, blinking on */
   807c8:	2100      	movs	r1, #0
   807ca:	200f      	movs	r0, #15
   807cc:	47a0      	blx	r4
}
   807ce:	2000      	movs	r0, #0
   807d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   807d4:	400e1200 	.word	0x400e1200
   807d8:	000805e9 	.word	0x000805e9
   807dc:	00080665 	.word	0x00080665

000807e0 <lcdClearDisplay>:

/*Clears the display*/
int lcdClearDisplay(void)
{
   807e0:	b508      	push	{r3, lr}
	lcdWrite(0x01,0);			//0x01, instruction for clearing the display
   807e2:	2100      	movs	r1, #0
   807e4:	2001      	movs	r0, #1
   807e6:	4b04      	ldr	r3, [pc, #16]	; (807f8 <lcdClearDisplay+0x18>)
   807e8:	4798      	blx	r3
	delayMicroseconds(1000);
   807ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   807ee:	4b03      	ldr	r3, [pc, #12]	; (807fc <lcdClearDisplay+0x1c>)
   807f0:	4798      	blx	r3
	return 0;
}
   807f2:	2000      	movs	r0, #0
   807f4:	bd08      	pop	{r3, pc}
   807f6:	bf00      	nop
   807f8:	00080665 	.word	0x00080665
   807fc:	000805e9 	.word	0x000805e9

00080800 <createHammingCode>:
#include <stdio.h>


int dataTosend[8];

uint8_t createHammingCode(uint8_t data[]){
   80800:	b430      	push	{r4, r5}
	uint8_t returnByte = 0;
	int p1=0;
	int p2=0;
	int p3=0;

	dataTosend[2]=data[0];
   80802:	7803      	ldrb	r3, [r0, #0]
   80804:	491b      	ldr	r1, [pc, #108]	; (80874 <createHammingCode+0x74>)
   80806:	608b      	str	r3, [r1, #8]
	dataTosend[4]=data[1];
   80808:	7844      	ldrb	r4, [r0, #1]
   8080a:	610c      	str	r4, [r1, #16]
	dataTosend[5]=data[2];
   8080c:	7882      	ldrb	r2, [r0, #2]
   8080e:	614a      	str	r2, [r1, #20]
	dataTosend[6]=data[3];
   80810:	78c0      	ldrb	r0, [r0, #3]
   80812:	6188      	str	r0, [r1, #24]
	dataTosend[7]=0;									// Last bit is useless for us, put it to zero.
   80814:	2500      	movs	r5, #0
   80816:	61cd      	str	r5, [r1, #28]
	p1=dataTosend[2] + dataTosend[4] + dataTosend[6];
	p2=dataTosend[2] + dataTosend[5] + dataTosend[6];
   80818:	1899      	adds	r1, r3, r2
   8081a:	4401      	add	r1, r0
	p3=dataTosend[4] + dataTosend[5] + dataTosend[6];
   8081c:	4422      	add	r2, r4
   8081e:	4402      	add	r2, r0
	p1=dataTosend[2] + dataTosend[4] + dataTosend[6];
   80820:	4423      	add	r3, r4
   80822:	4403      	add	r3, r0
	

	if(p1%2==0){
   80824:	f013 0f01 	tst.w	r3, #1
		dataTosend[0]=0;
   80828:	bf0c      	ite	eq
   8082a:	4628      	moveq	r0, r5
		}else{
		dataTosend[0]=1;
   8082c:	2001      	movne	r0, #1
   8082e:	4b11      	ldr	r3, [pc, #68]	; (80874 <createHammingCode+0x74>)
   80830:	6018      	str	r0, [r3, #0]
	}

	if(p2%2==0){
   80832:	f011 0f01 	tst.w	r1, #1
		dataTosend[1]=0;
   80836:	bf0c      	ite	eq
   80838:	2100      	moveq	r1, #0
	}
	else{
		dataTosend[1]=1;
   8083a:	2101      	movne	r1, #1
   8083c:	4b0d      	ldr	r3, [pc, #52]	; (80874 <createHammingCode+0x74>)
   8083e:	6059      	str	r1, [r3, #4]
	}

	if(p3%2==0){
   80840:	f012 0f01 	tst.w	r2, #1
		dataTosend[3]=0;
   80844:	bf0c      	ite	eq
   80846:	2200      	moveq	r2, #0
	}
	else{
		dataTosend[3]=1;
   80848:	2201      	movne	r2, #1
   8084a:	4b0a      	ldr	r3, [pc, #40]	; (80874 <createHammingCode+0x74>)
   8084c:	60da      	str	r2, [r3, #12]
   8084e:	4a0a      	ldr	r2, [pc, #40]	; (80878 <createHammingCode+0x78>)
	}

	for(int i=0; i<8;i++){
   80850:	2300      	movs	r3, #0
	uint8_t returnByte = 0;
   80852:	4618      	mov	r0, r3
		
		if(dataTosend[i]==1){
			returnByte|=(1u<<i);
   80854:	2401      	movs	r4, #1
   80856:	e002      	b.n	8085e <createHammingCode+0x5e>
	for(int i=0; i<8;i++){
   80858:	3301      	adds	r3, #1
   8085a:	2b08      	cmp	r3, #8
   8085c:	d008      	beq.n	80870 <createHammingCode+0x70>
		if(dataTosend[i]==1){
   8085e:	f852 1f04 	ldr.w	r1, [r2, #4]!
   80862:	2901      	cmp	r1, #1
   80864:	d1f8      	bne.n	80858 <createHammingCode+0x58>
			returnByte|=(1u<<i);
   80866:	fa04 f103 	lsl.w	r1, r4, r3
   8086a:	4308      	orrs	r0, r1
   8086c:	b2c0      	uxtb	r0, r0
   8086e:	e7f3      	b.n	80858 <createHammingCode+0x58>
		}
	}
/*	printf("Returnbyte: %x",returnByte);*/
	return returnByte;
}
   80870:	bc30      	pop	{r4, r5}
   80872:	4770      	bx	lr
   80874:	20070c68 	.word	0x20070c68
   80878:	20070c64 	.word	0x20070c64

0008087c <usart0_init>:
uint32_t *const ptr_USART0_MR = (uint32_t *) (USART0_BASE_ADDRESS + 0x0004U);	//Mode register
uint32_t *const ptr_USART0_SR = (uint32_t *) (USART0_BASE_ADDRESS + 0x0014U);	//Status register
uint32_t *const ptr_USART0_THR = (uint32_t *) (USART0_BASE_ADDRESS + 0x001CU);	//Transmit holding register
uint32_t *const ptr_USART0_BRGR = (uint32_t *) (USART0_BASE_ADDRESS + 0x0020U);	//Baud-rate generator

void usart0_init(void){
   8087c:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(ID_USART0);
   8087e:	2011      	movs	r0, #17
   80880:	4b10      	ldr	r3, [pc, #64]	; (808c4 <usart0_init+0x48>)
   80882:	4798      	blx	r3
	*ptr_USART0_CR |= (1u<<TXEN0);					//Set TXEN.
   80884:	4a10      	ldr	r2, [pc, #64]	; (808c8 <usart0_init+0x4c>)
   80886:	6813      	ldr	r3, [r2, #0]
   80888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8088c:	6013      	str	r3, [r2, #0]
	*ptr_USART0_MR |= (1<<CHRL1) | (1<<CHRL0);
	*ptr_USART0_MR &= ~((1<<5) | (1<<4));
   8088e:	3204      	adds	r2, #4
   80890:	6813      	ldr	r3, [r2, #0]
   80892:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   80896:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   8089a:	6013      	str	r3, [r2, #0]
	PIOA->PIO_PDR |= (PIO_PA10) | (PIO_PA11);
   8089c:	f502 2291 	add.w	r2, r2, #296960	; 0x48800
   808a0:	f202 52fc 	addw	r2, r2, #1532	; 0x5fc
   808a4:	6853      	ldr	r3, [r2, #4]
   808a6:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
   808aa:	6053      	str	r3, [r2, #4]
	*ptr_USART0_BRGR |= (0b1000100010111<<0);			//Set baudrate(9600). CD==0b1000100011==546
   808ac:	f5a2 2291 	sub.w	r2, r2, #296960	; 0x48800
   808b0:	f5a2 62bc 	sub.w	r2, r2, #1504	; 0x5e0
   808b4:	6813      	ldr	r3, [r2, #0]
   808b6:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
   808ba:	f043 0317 	orr.w	r3, r3, #23
   808be:	6013      	str	r3, [r2, #0]
   808c0:	bd08      	pop	{r3, pc}
   808c2:	bf00      	nop
   808c4:	00080d7d 	.word	0x00080d7d
   808c8:	40098000 	.word	0x40098000

000808cc <usart0_transmit>:
}

void usart0_transmit(unsigned char data){
	while(!(*ptr_USART0_SR & (1u<<1)));
   808cc:	4b06      	ldr	r3, [pc, #24]	; (808e8 <usart0_transmit+0x1c>)
   808ce:	681b      	ldr	r3, [r3, #0]
   808d0:	f003 0202 	and.w	r2, r3, #2
   808d4:	2a00      	cmp	r2, #0
   808d6:	d0fd      	beq.n	808d4 <usart0_transmit+0x8>
	while(!(*ptr_USART0_SR & (1u<<9)));	
   808d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
   808dc:	2b00      	cmp	r3, #0
   808de:	d0fd      	beq.n	808dc <usart0_transmit+0x10>
	
	
			
	*ptr_USART0_THR = data;
   808e0:	4b02      	ldr	r3, [pc, #8]	; (808ec <usart0_transmit+0x20>)
   808e2:	6018      	str	r0, [r3, #0]
   808e4:	4770      	bx	lr
   808e6:	bf00      	nop
   808e8:	40098014 	.word	0x40098014
   808ec:	4009801c 	.word	0x4009801c

000808f0 <usart0_send_Packet>:
}

void usart0_send_Packet(uint8_t addr, unsigned char cmd)
{
   808f0:	b570      	push	{r4, r5, r6, lr}
   808f2:	460e      	mov	r6, r1
// 	usart0_transmit(SYNC);//send synchro byte
// 	delayMicroseconds(10000); 
	usart0_transmit(addr);//send receiver address
   808f4:	4d05      	ldr	r5, [pc, #20]	; (8090c <usart0_send_Packet+0x1c>)
   808f6:	47a8      	blx	r5
	delayMicroseconds(10000);
   808f8:	f242 7010 	movw	r0, #10000	; 0x2710
   808fc:	4c04      	ldr	r4, [pc, #16]	; (80910 <usart0_send_Packet+0x20>)
   808fe:	47a0      	blx	r4
 	usart0_transmit(cmd);//send command
   80900:	4630      	mov	r0, r6
   80902:	47a8      	blx	r5
 	delayMicroseconds(10000);
   80904:	f242 7010 	movw	r0, #10000	; 0x2710
   80908:	47a0      	blx	r4
   8090a:	bd70      	pop	{r4, r5, r6, pc}
   8090c:	000808cd 	.word	0x000808cd
   80910:	000805e9 	.word	0x000805e9

00080914 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80914:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80916:	480e      	ldr	r0, [pc, #56]	; (80950 <sysclk_init+0x3c>)
   80918:	4b0e      	ldr	r3, [pc, #56]	; (80954 <sysclk_init+0x40>)
   8091a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   8091c:	213e      	movs	r1, #62	; 0x3e
   8091e:	2000      	movs	r0, #0
   80920:	4b0d      	ldr	r3, [pc, #52]	; (80958 <sysclk_init+0x44>)
   80922:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80924:	4c0d      	ldr	r4, [pc, #52]	; (8095c <sysclk_init+0x48>)
   80926:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80928:	2800      	cmp	r0, #0
   8092a:	d0fc      	beq.n	80926 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   8092c:	4b0c      	ldr	r3, [pc, #48]	; (80960 <sysclk_init+0x4c>)
   8092e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80930:	4a0c      	ldr	r2, [pc, #48]	; (80964 <sysclk_init+0x50>)
   80932:	4b0d      	ldr	r3, [pc, #52]	; (80968 <sysclk_init+0x54>)
   80934:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80936:	4c0d      	ldr	r4, [pc, #52]	; (8096c <sysclk_init+0x58>)
   80938:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8093a:	2800      	cmp	r0, #0
   8093c:	d0fc      	beq.n	80938 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8093e:	2010      	movs	r0, #16
   80940:	4b0b      	ldr	r3, [pc, #44]	; (80970 <sysclk_init+0x5c>)
   80942:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80944:	4b0b      	ldr	r3, [pc, #44]	; (80974 <sysclk_init+0x60>)
   80946:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80948:	4801      	ldr	r0, [pc, #4]	; (80950 <sysclk_init+0x3c>)
   8094a:	4b02      	ldr	r3, [pc, #8]	; (80954 <sysclk_init+0x40>)
   8094c:	4798      	blx	r3
   8094e:	bd10      	pop	{r4, pc}
   80950:	0501bd00 	.word	0x0501bd00
   80954:	200700a5 	.word	0x200700a5
   80958:	00080cf9 	.word	0x00080cf9
   8095c:	00080d4d 	.word	0x00080d4d
   80960:	00080d5d 	.word	0x00080d5d
   80964:	200d3f01 	.word	0x200d3f01
   80968:	400e0600 	.word	0x400e0600
   8096c:	00080d6d 	.word	0x00080d6d
   80970:	00080c95 	.word	0x00080c95
   80974:	00080e6d 	.word	0x00080e6d

00080978 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80978:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8097a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8097e:	4b12      	ldr	r3, [pc, #72]	; (809c8 <board_init+0x50>)
   80980:	605a      	str	r2, [r3, #4]
   80982:	200b      	movs	r0, #11
   80984:	4c11      	ldr	r4, [pc, #68]	; (809cc <board_init+0x54>)
   80986:	47a0      	blx	r4
   80988:	200c      	movs	r0, #12
   8098a:	47a0      	blx	r4
   8098c:	200d      	movs	r0, #13
   8098e:	47a0      	blx	r4
   80990:	200e      	movs	r0, #14
   80992:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80994:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80998:	203b      	movs	r0, #59	; 0x3b
   8099a:	4c0d      	ldr	r4, [pc, #52]	; (809d0 <board_init+0x58>)
   8099c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8099e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   809a2:	2055      	movs	r0, #85	; 0x55
   809a4:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   809a6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   809aa:	2056      	movs	r0, #86	; 0x56
   809ac:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   809ae:	4909      	ldr	r1, [pc, #36]	; (809d4 <board_init+0x5c>)
   809b0:	2068      	movs	r0, #104	; 0x68
   809b2:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   809b4:	4908      	ldr	r1, [pc, #32]	; (809d8 <board_init+0x60>)
   809b6:	205c      	movs	r0, #92	; 0x5c
   809b8:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   809ba:	4a08      	ldr	r2, [pc, #32]	; (809dc <board_init+0x64>)
   809bc:	f44f 7140 	mov.w	r1, #768	; 0x300
   809c0:	4807      	ldr	r0, [pc, #28]	; (809e0 <board_init+0x68>)
   809c2:	4b08      	ldr	r3, [pc, #32]	; (809e4 <board_init+0x6c>)
   809c4:	4798      	blx	r3
   809c6:	bd10      	pop	{r4, pc}
   809c8:	400e1a50 	.word	0x400e1a50
   809cc:	00080d7d 	.word	0x00080d7d
   809d0:	00080a89 	.word	0x00080a89
   809d4:	28000079 	.word	0x28000079
   809d8:	28000001 	.word	0x28000001
   809dc:	08000001 	.word	0x08000001
   809e0:	400e0e00 	.word	0x400e0e00
   809e4:	00080b59 	.word	0x00080b59

000809e8 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   809e8:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   809ea:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   809ee:	d016      	beq.n	80a1e <pio_set_peripheral+0x36>
   809f0:	d80b      	bhi.n	80a0a <pio_set_peripheral+0x22>
   809f2:	b149      	cbz	r1, 80a08 <pio_set_peripheral+0x20>
   809f4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   809f8:	d105      	bne.n	80a06 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   809fa:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   809fc:	6f01      	ldr	r1, [r0, #112]	; 0x70
   809fe:	400b      	ands	r3, r1
   80a00:	ea23 0302 	bic.w	r3, r3, r2
   80a04:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80a06:	6042      	str	r2, [r0, #4]
   80a08:	4770      	bx	lr
	switch (ul_type) {
   80a0a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80a0e:	d0fb      	beq.n	80a08 <pio_set_peripheral+0x20>
   80a10:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80a14:	d0f8      	beq.n	80a08 <pio_set_peripheral+0x20>
   80a16:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80a1a:	d1f4      	bne.n	80a06 <pio_set_peripheral+0x1e>
   80a1c:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   80a1e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80a20:	4313      	orrs	r3, r2
   80a22:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80a24:	e7ef      	b.n	80a06 <pio_set_peripheral+0x1e>

00080a26 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80a26:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80a28:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80a2c:	bf14      	ite	ne
   80a2e:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80a30:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80a32:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80a36:	bf14      	ite	ne
   80a38:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   80a3a:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   80a3c:	f012 0f02 	tst.w	r2, #2
   80a40:	d107      	bne.n	80a52 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   80a42:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80a46:	bf18      	it	ne
   80a48:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   80a4c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80a4e:	6001      	str	r1, [r0, #0]
   80a50:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   80a52:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80a56:	e7f9      	b.n	80a4c <pio_set_input+0x26>

00080a58 <pio_set_output>:
{
   80a58:	b410      	push	{r4}
   80a5a:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   80a5c:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80a5e:	b944      	cbnz	r4, 80a72 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   80a60:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   80a62:	b143      	cbz	r3, 80a76 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   80a64:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   80a66:	b942      	cbnz	r2, 80a7a <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   80a68:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   80a6a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80a6c:	6001      	str	r1, [r0, #0]
}
   80a6e:	bc10      	pop	{r4}
   80a70:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   80a72:	6641      	str	r1, [r0, #100]	; 0x64
   80a74:	e7f5      	b.n	80a62 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   80a76:	6541      	str	r1, [r0, #84]	; 0x54
   80a78:	e7f5      	b.n	80a66 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   80a7a:	6301      	str	r1, [r0, #48]	; 0x30
   80a7c:	e7f5      	b.n	80a6a <pio_set_output+0x12>

00080a7e <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80a7e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80a80:	4770      	bx	lr

00080a82 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80a82:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80a84:	4770      	bx	lr
	...

00080a88 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80a88:	b570      	push	{r4, r5, r6, lr}
   80a8a:	b082      	sub	sp, #8
   80a8c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80a8e:	0943      	lsrs	r3, r0, #5
   80a90:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80a94:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80a98:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   80a9a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80a9e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80aa2:	d031      	beq.n	80b08 <pio_configure_pin+0x80>
   80aa4:	d816      	bhi.n	80ad4 <pio_configure_pin+0x4c>
   80aa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80aaa:	d01b      	beq.n	80ae4 <pio_configure_pin+0x5c>
   80aac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80ab0:	d116      	bne.n	80ae0 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80ab2:	f000 001f 	and.w	r0, r0, #31
   80ab6:	2601      	movs	r6, #1
   80ab8:	4086      	lsls	r6, r0
   80aba:	4632      	mov	r2, r6
   80abc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80ac0:	4620      	mov	r0, r4
   80ac2:	4b22      	ldr	r3, [pc, #136]	; (80b4c <pio_configure_pin+0xc4>)
   80ac4:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80ac6:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80aca:	bf14      	ite	ne
   80acc:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80ace:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80ad0:	2001      	movs	r0, #1
   80ad2:	e017      	b.n	80b04 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   80ad4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80ad8:	d021      	beq.n	80b1e <pio_configure_pin+0x96>
   80ada:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80ade:	d01e      	beq.n	80b1e <pio_configure_pin+0x96>
		return 0;
   80ae0:	2000      	movs	r0, #0
   80ae2:	e00f      	b.n	80b04 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80ae4:	f000 001f 	and.w	r0, r0, #31
   80ae8:	2601      	movs	r6, #1
   80aea:	4086      	lsls	r6, r0
   80aec:	4632      	mov	r2, r6
   80aee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80af2:	4620      	mov	r0, r4
   80af4:	4b15      	ldr	r3, [pc, #84]	; (80b4c <pio_configure_pin+0xc4>)
   80af6:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80af8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80afc:	bf14      	ite	ne
   80afe:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80b00:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80b02:	2001      	movs	r0, #1
}
   80b04:	b002      	add	sp, #8
   80b06:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80b08:	f000 011f 	and.w	r1, r0, #31
   80b0c:	2601      	movs	r6, #1
   80b0e:	462a      	mov	r2, r5
   80b10:	fa06 f101 	lsl.w	r1, r6, r1
   80b14:	4620      	mov	r0, r4
   80b16:	4b0e      	ldr	r3, [pc, #56]	; (80b50 <pio_configure_pin+0xc8>)
   80b18:	4798      	blx	r3
	return 1;
   80b1a:	4630      	mov	r0, r6
		break;
   80b1c:	e7f2      	b.n	80b04 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80b1e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80b22:	f000 011f 	and.w	r1, r0, #31
   80b26:	2601      	movs	r6, #1
   80b28:	ea05 0306 	and.w	r3, r5, r6
   80b2c:	9300      	str	r3, [sp, #0]
   80b2e:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80b32:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80b36:	bf14      	ite	ne
   80b38:	2200      	movne	r2, #0
   80b3a:	2201      	moveq	r2, #1
   80b3c:	fa06 f101 	lsl.w	r1, r6, r1
   80b40:	4620      	mov	r0, r4
   80b42:	4c04      	ldr	r4, [pc, #16]	; (80b54 <pio_configure_pin+0xcc>)
   80b44:	47a0      	blx	r4
	return 1;
   80b46:	4630      	mov	r0, r6
		break;
   80b48:	e7dc      	b.n	80b04 <pio_configure_pin+0x7c>
   80b4a:	bf00      	nop
   80b4c:	000809e9 	.word	0x000809e9
   80b50:	00080a27 	.word	0x00080a27
   80b54:	00080a59 	.word	0x00080a59

00080b58 <pio_configure_pin_group>:
{
   80b58:	b570      	push	{r4, r5, r6, lr}
   80b5a:	b082      	sub	sp, #8
   80b5c:	4605      	mov	r5, r0
   80b5e:	460e      	mov	r6, r1
   80b60:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   80b62:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   80b66:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80b6a:	d027      	beq.n	80bbc <pio_configure_pin_group+0x64>
   80b6c:	d811      	bhi.n	80b92 <pio_configure_pin_group+0x3a>
   80b6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80b72:	d016      	beq.n	80ba2 <pio_configure_pin_group+0x4a>
   80b74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80b78:	d111      	bne.n	80b9e <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80b7a:	460a      	mov	r2, r1
   80b7c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80b80:	4b19      	ldr	r3, [pc, #100]	; (80be8 <pio_configure_pin_group+0x90>)
   80b82:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80b84:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80b88:	bf14      	ite	ne
   80b8a:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80b8c:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80b8e:	2001      	movs	r0, #1
   80b90:	e012      	b.n	80bb8 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   80b92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80b96:	d015      	beq.n	80bc4 <pio_configure_pin_group+0x6c>
   80b98:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80b9c:	d012      	beq.n	80bc4 <pio_configure_pin_group+0x6c>
		return 0;
   80b9e:	2000      	movs	r0, #0
   80ba0:	e00a      	b.n	80bb8 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80ba2:	460a      	mov	r2, r1
   80ba4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80ba8:	4b0f      	ldr	r3, [pc, #60]	; (80be8 <pio_configure_pin_group+0x90>)
   80baa:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80bac:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80bb0:	bf14      	ite	ne
   80bb2:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80bb4:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80bb6:	2001      	movs	r0, #1
}
   80bb8:	b002      	add	sp, #8
   80bba:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   80bbc:	4b0b      	ldr	r3, [pc, #44]	; (80bec <pio_configure_pin_group+0x94>)
   80bbe:	4798      	blx	r3
	return 1;
   80bc0:	2001      	movs	r0, #1
		break;
   80bc2:	e7f9      	b.n	80bb8 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80bc4:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   80bc8:	f004 0301 	and.w	r3, r4, #1
   80bcc:	9300      	str	r3, [sp, #0]
   80bce:	f3c4 0380 	ubfx	r3, r4, #2, #1
   80bd2:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80bd6:	bf14      	ite	ne
   80bd8:	2200      	movne	r2, #0
   80bda:	2201      	moveq	r2, #1
   80bdc:	4631      	mov	r1, r6
   80bde:	4628      	mov	r0, r5
   80be0:	4c03      	ldr	r4, [pc, #12]	; (80bf0 <pio_configure_pin_group+0x98>)
   80be2:	47a0      	blx	r4
	return 1;
   80be4:	2001      	movs	r0, #1
		break;
   80be6:	e7e7      	b.n	80bb8 <pio_configure_pin_group+0x60>
   80be8:	000809e9 	.word	0x000809e9
   80bec:	00080a27 	.word	0x00080a27
   80bf0:	00080a59 	.word	0x00080a59

00080bf4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80bf8:	4604      	mov	r4, r0
   80bfa:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80bfc:	4b0e      	ldr	r3, [pc, #56]	; (80c38 <pio_handler_process+0x44>)
   80bfe:	4798      	blx	r3
   80c00:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80c02:	4620      	mov	r0, r4
   80c04:	4b0d      	ldr	r3, [pc, #52]	; (80c3c <pio_handler_process+0x48>)
   80c06:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80c08:	4005      	ands	r5, r0
   80c0a:	d013      	beq.n	80c34 <pio_handler_process+0x40>
   80c0c:	4c0c      	ldr	r4, [pc, #48]	; (80c40 <pio_handler_process+0x4c>)
   80c0e:	f104 0660 	add.w	r6, r4, #96	; 0x60
   80c12:	e003      	b.n	80c1c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80c14:	42b4      	cmp	r4, r6
   80c16:	d00d      	beq.n	80c34 <pio_handler_process+0x40>
   80c18:	3410      	adds	r4, #16
		while (status != 0) {
   80c1a:	b15d      	cbz	r5, 80c34 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   80c1c:	6820      	ldr	r0, [r4, #0]
   80c1e:	4540      	cmp	r0, r8
   80c20:	d1f8      	bne.n	80c14 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80c22:	6861      	ldr	r1, [r4, #4]
   80c24:	4229      	tst	r1, r5
   80c26:	d0f5      	beq.n	80c14 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80c28:	68e3      	ldr	r3, [r4, #12]
   80c2a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   80c2c:	6863      	ldr	r3, [r4, #4]
   80c2e:	ea25 0503 	bic.w	r5, r5, r3
   80c32:	e7ef      	b.n	80c14 <pio_handler_process+0x20>
   80c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80c38:	00080a7f 	.word	0x00080a7f
   80c3c:	00080a83 	.word	0x00080a83
   80c40:	20070bb4 	.word	0x20070bb4

00080c44 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80c44:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80c46:	210b      	movs	r1, #11
   80c48:	4801      	ldr	r0, [pc, #4]	; (80c50 <PIOA_Handler+0xc>)
   80c4a:	4b02      	ldr	r3, [pc, #8]	; (80c54 <PIOA_Handler+0x10>)
   80c4c:	4798      	blx	r3
   80c4e:	bd08      	pop	{r3, pc}
   80c50:	400e0e00 	.word	0x400e0e00
   80c54:	00080bf5 	.word	0x00080bf5

00080c58 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80c58:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80c5a:	210c      	movs	r1, #12
   80c5c:	4801      	ldr	r0, [pc, #4]	; (80c64 <PIOB_Handler+0xc>)
   80c5e:	4b02      	ldr	r3, [pc, #8]	; (80c68 <PIOB_Handler+0x10>)
   80c60:	4798      	blx	r3
   80c62:	bd08      	pop	{r3, pc}
   80c64:	400e1000 	.word	0x400e1000
   80c68:	00080bf5 	.word	0x00080bf5

00080c6c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80c6c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80c6e:	210d      	movs	r1, #13
   80c70:	4801      	ldr	r0, [pc, #4]	; (80c78 <PIOC_Handler+0xc>)
   80c72:	4b02      	ldr	r3, [pc, #8]	; (80c7c <PIOC_Handler+0x10>)
   80c74:	4798      	blx	r3
   80c76:	bd08      	pop	{r3, pc}
   80c78:	400e1200 	.word	0x400e1200
   80c7c:	00080bf5 	.word	0x00080bf5

00080c80 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80c80:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80c82:	210e      	movs	r1, #14
   80c84:	4801      	ldr	r0, [pc, #4]	; (80c8c <PIOD_Handler+0xc>)
   80c86:	4b02      	ldr	r3, [pc, #8]	; (80c90 <PIOD_Handler+0x10>)
   80c88:	4798      	blx	r3
   80c8a:	bd08      	pop	{r3, pc}
   80c8c:	400e1400 	.word	0x400e1400
   80c90:	00080bf5 	.word	0x00080bf5

00080c94 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80c94:	4a17      	ldr	r2, [pc, #92]	; (80cf4 <pmc_switch_mck_to_pllack+0x60>)
   80c96:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80c9c:	4318      	orrs	r0, r3
   80c9e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80ca0:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80ca2:	f013 0f08 	tst.w	r3, #8
   80ca6:	d10a      	bne.n	80cbe <pmc_switch_mck_to_pllack+0x2a>
   80ca8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80cac:	4911      	ldr	r1, [pc, #68]	; (80cf4 <pmc_switch_mck_to_pllack+0x60>)
   80cae:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80cb0:	f012 0f08 	tst.w	r2, #8
   80cb4:	d103      	bne.n	80cbe <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80cb6:	3b01      	subs	r3, #1
   80cb8:	d1f9      	bne.n	80cae <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   80cba:	2001      	movs	r0, #1
   80cbc:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80cbe:	4a0d      	ldr	r2, [pc, #52]	; (80cf4 <pmc_switch_mck_to_pllack+0x60>)
   80cc0:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80cc2:	f023 0303 	bic.w	r3, r3, #3
   80cc6:	f043 0302 	orr.w	r3, r3, #2
   80cca:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80ccc:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80cce:	f013 0f08 	tst.w	r3, #8
   80cd2:	d10a      	bne.n	80cea <pmc_switch_mck_to_pllack+0x56>
   80cd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80cd8:	4906      	ldr	r1, [pc, #24]	; (80cf4 <pmc_switch_mck_to_pllack+0x60>)
   80cda:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80cdc:	f012 0f08 	tst.w	r2, #8
   80ce0:	d105      	bne.n	80cee <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80ce2:	3b01      	subs	r3, #1
   80ce4:	d1f9      	bne.n	80cda <pmc_switch_mck_to_pllack+0x46>
			return 1;
   80ce6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80ce8:	4770      	bx	lr
	return 0;
   80cea:	2000      	movs	r0, #0
   80cec:	4770      	bx	lr
   80cee:	2000      	movs	r0, #0
   80cf0:	4770      	bx	lr
   80cf2:	bf00      	nop
   80cf4:	400e0600 	.word	0x400e0600

00080cf8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80cf8:	b9c8      	cbnz	r0, 80d2e <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80cfa:	4a11      	ldr	r2, [pc, #68]	; (80d40 <pmc_switch_mainck_to_xtal+0x48>)
   80cfc:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80cfe:	0209      	lsls	r1, r1, #8
   80d00:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80d02:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80d06:	f023 0303 	bic.w	r3, r3, #3
   80d0a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80d0e:	f043 0301 	orr.w	r3, r3, #1
   80d12:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80d14:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80d16:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80d18:	f013 0f01 	tst.w	r3, #1
   80d1c:	d0fb      	beq.n	80d16 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80d1e:	4a08      	ldr	r2, [pc, #32]	; (80d40 <pmc_switch_mainck_to_xtal+0x48>)
   80d20:	6a13      	ldr	r3, [r2, #32]
   80d22:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80d2a:	6213      	str	r3, [r2, #32]
   80d2c:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80d2e:	4904      	ldr	r1, [pc, #16]	; (80d40 <pmc_switch_mainck_to_xtal+0x48>)
   80d30:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80d32:	4a04      	ldr	r2, [pc, #16]	; (80d44 <pmc_switch_mainck_to_xtal+0x4c>)
   80d34:	401a      	ands	r2, r3
   80d36:	4b04      	ldr	r3, [pc, #16]	; (80d48 <pmc_switch_mainck_to_xtal+0x50>)
   80d38:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80d3a:	620b      	str	r3, [r1, #32]
   80d3c:	4770      	bx	lr
   80d3e:	bf00      	nop
   80d40:	400e0600 	.word	0x400e0600
   80d44:	fec8fffc 	.word	0xfec8fffc
   80d48:	01370002 	.word	0x01370002

00080d4c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80d4c:	4b02      	ldr	r3, [pc, #8]	; (80d58 <pmc_osc_is_ready_mainck+0xc>)
   80d4e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80d50:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80d54:	4770      	bx	lr
   80d56:	bf00      	nop
   80d58:	400e0600 	.word	0x400e0600

00080d5c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80d5c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80d60:	4b01      	ldr	r3, [pc, #4]	; (80d68 <pmc_disable_pllack+0xc>)
   80d62:	629a      	str	r2, [r3, #40]	; 0x28
   80d64:	4770      	bx	lr
   80d66:	bf00      	nop
   80d68:	400e0600 	.word	0x400e0600

00080d6c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80d6c:	4b02      	ldr	r3, [pc, #8]	; (80d78 <pmc_is_locked_pllack+0xc>)
   80d6e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80d70:	f000 0002 	and.w	r0, r0, #2
   80d74:	4770      	bx	lr
   80d76:	bf00      	nop
   80d78:	400e0600 	.word	0x400e0600

00080d7c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80d7c:	282c      	cmp	r0, #44	; 0x2c
   80d7e:	d81e      	bhi.n	80dbe <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80d80:	281f      	cmp	r0, #31
   80d82:	d80c      	bhi.n	80d9e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80d84:	4b11      	ldr	r3, [pc, #68]	; (80dcc <pmc_enable_periph_clk+0x50>)
   80d86:	699a      	ldr	r2, [r3, #24]
   80d88:	2301      	movs	r3, #1
   80d8a:	4083      	lsls	r3, r0
   80d8c:	4393      	bics	r3, r2
   80d8e:	d018      	beq.n	80dc2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80d90:	2301      	movs	r3, #1
   80d92:	fa03 f000 	lsl.w	r0, r3, r0
   80d96:	4b0d      	ldr	r3, [pc, #52]	; (80dcc <pmc_enable_periph_clk+0x50>)
   80d98:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80d9a:	2000      	movs	r0, #0
   80d9c:	4770      	bx	lr
		ul_id -= 32;
   80d9e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80da0:	4b0a      	ldr	r3, [pc, #40]	; (80dcc <pmc_enable_periph_clk+0x50>)
   80da2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   80da6:	2301      	movs	r3, #1
   80da8:	4083      	lsls	r3, r0
   80daa:	4393      	bics	r3, r2
   80dac:	d00b      	beq.n	80dc6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80dae:	2301      	movs	r3, #1
   80db0:	fa03 f000 	lsl.w	r0, r3, r0
   80db4:	4b05      	ldr	r3, [pc, #20]	; (80dcc <pmc_enable_periph_clk+0x50>)
   80db6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   80dba:	2000      	movs	r0, #0
   80dbc:	4770      	bx	lr
		return 1;
   80dbe:	2001      	movs	r0, #1
   80dc0:	4770      	bx	lr
	return 0;
   80dc2:	2000      	movs	r0, #0
   80dc4:	4770      	bx	lr
   80dc6:	2000      	movs	r0, #0
}
   80dc8:	4770      	bx	lr
   80dca:	bf00      	nop
   80dcc:	400e0600 	.word	0x400e0600

00080dd0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80dd0:	e7fe      	b.n	80dd0 <Dummy_Handler>
	...

00080dd4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80dd4:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80dd6:	4b1c      	ldr	r3, [pc, #112]	; (80e48 <Reset_Handler+0x74>)
   80dd8:	4a1c      	ldr	r2, [pc, #112]	; (80e4c <Reset_Handler+0x78>)
   80dda:	429a      	cmp	r2, r3
   80ddc:	d010      	beq.n	80e00 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   80dde:	4b1c      	ldr	r3, [pc, #112]	; (80e50 <Reset_Handler+0x7c>)
   80de0:	4a19      	ldr	r2, [pc, #100]	; (80e48 <Reset_Handler+0x74>)
   80de2:	429a      	cmp	r2, r3
   80de4:	d20c      	bcs.n	80e00 <Reset_Handler+0x2c>
   80de6:	3b01      	subs	r3, #1
   80de8:	1a9b      	subs	r3, r3, r2
   80dea:	f023 0303 	bic.w	r3, r3, #3
   80dee:	3304      	adds	r3, #4
   80df0:	4413      	add	r3, r2
   80df2:	4916      	ldr	r1, [pc, #88]	; (80e4c <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   80df4:	f851 0b04 	ldr.w	r0, [r1], #4
   80df8:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   80dfc:	429a      	cmp	r2, r3
   80dfe:	d1f9      	bne.n	80df4 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80e00:	4b14      	ldr	r3, [pc, #80]	; (80e54 <Reset_Handler+0x80>)
   80e02:	4a15      	ldr	r2, [pc, #84]	; (80e58 <Reset_Handler+0x84>)
   80e04:	429a      	cmp	r2, r3
   80e06:	d20a      	bcs.n	80e1e <Reset_Handler+0x4a>
   80e08:	3b01      	subs	r3, #1
   80e0a:	1a9b      	subs	r3, r3, r2
   80e0c:	f023 0303 	bic.w	r3, r3, #3
   80e10:	3304      	adds	r3, #4
   80e12:	4413      	add	r3, r2
		*pDest++ = 0;
   80e14:	2100      	movs	r1, #0
   80e16:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   80e1a:	4293      	cmp	r3, r2
   80e1c:	d1fb      	bne.n	80e16 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80e1e:	4b0f      	ldr	r3, [pc, #60]	; (80e5c <Reset_Handler+0x88>)
   80e20:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80e24:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80e28:	490d      	ldr	r1, [pc, #52]	; (80e60 <Reset_Handler+0x8c>)
   80e2a:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80e2c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80e30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80e34:	d203      	bcs.n	80e3e <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80e36:	688b      	ldr	r3, [r1, #8]
   80e38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80e3c:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80e3e:	4b09      	ldr	r3, [pc, #36]	; (80e64 <Reset_Handler+0x90>)
   80e40:	4798      	blx	r3

	/* Branch to main function */
	main();
   80e42:	4b09      	ldr	r3, [pc, #36]	; (80e68 <Reset_Handler+0x94>)
   80e44:	4798      	blx	r3
   80e46:	e7fe      	b.n	80e46 <Reset_Handler+0x72>
   80e48:	20070000 	.word	0x20070000
   80e4c:	000841e4 	.word	0x000841e4
   80e50:	20070af8 	.word	0x20070af8
   80e54:	20070cb0 	.word	0x20070cb0
   80e58:	20070af8 	.word	0x20070af8
   80e5c:	00080000 	.word	0x00080000
   80e60:	e000ed00 	.word	0xe000ed00
   80e64:	000810c5 	.word	0x000810c5
   80e68:	00080fd5 	.word	0x00080fd5

00080e6c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80e6c:	4b3d      	ldr	r3, [pc, #244]	; (80f64 <SystemCoreClockUpdate+0xf8>)
   80e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80e70:	f003 0303 	and.w	r3, r3, #3
   80e74:	2b03      	cmp	r3, #3
   80e76:	d80e      	bhi.n	80e96 <SystemCoreClockUpdate+0x2a>
   80e78:	e8df f003 	tbb	[pc, r3]
   80e7c:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80e80:	4b39      	ldr	r3, [pc, #228]	; (80f68 <SystemCoreClockUpdate+0xfc>)
   80e82:	695b      	ldr	r3, [r3, #20]
   80e84:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80e88:	bf14      	ite	ne
   80e8a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80e8e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80e92:	4b36      	ldr	r3, [pc, #216]	; (80f6c <SystemCoreClockUpdate+0x100>)
   80e94:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80e96:	4b33      	ldr	r3, [pc, #204]	; (80f64 <SystemCoreClockUpdate+0xf8>)
   80e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80e9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80e9e:	2b70      	cmp	r3, #112	; 0x70
   80ea0:	d057      	beq.n	80f52 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80ea2:	4b30      	ldr	r3, [pc, #192]	; (80f64 <SystemCoreClockUpdate+0xf8>)
   80ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80ea6:	4931      	ldr	r1, [pc, #196]	; (80f6c <SystemCoreClockUpdate+0x100>)
   80ea8:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80eac:	680b      	ldr	r3, [r1, #0]
   80eae:	40d3      	lsrs	r3, r2
   80eb0:	600b      	str	r3, [r1, #0]
   80eb2:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80eb4:	4b2b      	ldr	r3, [pc, #172]	; (80f64 <SystemCoreClockUpdate+0xf8>)
   80eb6:	6a1b      	ldr	r3, [r3, #32]
   80eb8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80ebc:	d003      	beq.n	80ec6 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80ebe:	4a2c      	ldr	r2, [pc, #176]	; (80f70 <SystemCoreClockUpdate+0x104>)
   80ec0:	4b2a      	ldr	r3, [pc, #168]	; (80f6c <SystemCoreClockUpdate+0x100>)
   80ec2:	601a      	str	r2, [r3, #0]
   80ec4:	e7e7      	b.n	80e96 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80ec6:	4a2b      	ldr	r2, [pc, #172]	; (80f74 <SystemCoreClockUpdate+0x108>)
   80ec8:	4b28      	ldr	r3, [pc, #160]	; (80f6c <SystemCoreClockUpdate+0x100>)
   80eca:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80ecc:	4b25      	ldr	r3, [pc, #148]	; (80f64 <SystemCoreClockUpdate+0xf8>)
   80ece:	6a1b      	ldr	r3, [r3, #32]
   80ed0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80ed4:	2b10      	cmp	r3, #16
   80ed6:	d005      	beq.n	80ee4 <SystemCoreClockUpdate+0x78>
   80ed8:	2b20      	cmp	r3, #32
   80eda:	d1dc      	bne.n	80e96 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   80edc:	4a24      	ldr	r2, [pc, #144]	; (80f70 <SystemCoreClockUpdate+0x104>)
   80ede:	4b23      	ldr	r3, [pc, #140]	; (80f6c <SystemCoreClockUpdate+0x100>)
   80ee0:	601a      	str	r2, [r3, #0]
				break;
   80ee2:	e7d8      	b.n	80e96 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   80ee4:	4a24      	ldr	r2, [pc, #144]	; (80f78 <SystemCoreClockUpdate+0x10c>)
   80ee6:	4b21      	ldr	r3, [pc, #132]	; (80f6c <SystemCoreClockUpdate+0x100>)
   80ee8:	601a      	str	r2, [r3, #0]
				break;
   80eea:	e7d4      	b.n	80e96 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80eec:	4b1d      	ldr	r3, [pc, #116]	; (80f64 <SystemCoreClockUpdate+0xf8>)
   80eee:	6a1b      	ldr	r3, [r3, #32]
   80ef0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80ef4:	d00c      	beq.n	80f10 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80ef6:	4a1e      	ldr	r2, [pc, #120]	; (80f70 <SystemCoreClockUpdate+0x104>)
   80ef8:	4b1c      	ldr	r3, [pc, #112]	; (80f6c <SystemCoreClockUpdate+0x100>)
   80efa:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80efc:	4b19      	ldr	r3, [pc, #100]	; (80f64 <SystemCoreClockUpdate+0xf8>)
   80efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80f00:	f003 0303 	and.w	r3, r3, #3
   80f04:	2b02      	cmp	r3, #2
   80f06:	d016      	beq.n	80f36 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80f08:	4a1c      	ldr	r2, [pc, #112]	; (80f7c <SystemCoreClockUpdate+0x110>)
   80f0a:	4b18      	ldr	r3, [pc, #96]	; (80f6c <SystemCoreClockUpdate+0x100>)
   80f0c:	601a      	str	r2, [r3, #0]
   80f0e:	e7c2      	b.n	80e96 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80f10:	4a18      	ldr	r2, [pc, #96]	; (80f74 <SystemCoreClockUpdate+0x108>)
   80f12:	4b16      	ldr	r3, [pc, #88]	; (80f6c <SystemCoreClockUpdate+0x100>)
   80f14:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80f16:	4b13      	ldr	r3, [pc, #76]	; (80f64 <SystemCoreClockUpdate+0xf8>)
   80f18:	6a1b      	ldr	r3, [r3, #32]
   80f1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80f1e:	2b10      	cmp	r3, #16
   80f20:	d005      	beq.n	80f2e <SystemCoreClockUpdate+0xc2>
   80f22:	2b20      	cmp	r3, #32
   80f24:	d1ea      	bne.n	80efc <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   80f26:	4a12      	ldr	r2, [pc, #72]	; (80f70 <SystemCoreClockUpdate+0x104>)
   80f28:	4b10      	ldr	r3, [pc, #64]	; (80f6c <SystemCoreClockUpdate+0x100>)
   80f2a:	601a      	str	r2, [r3, #0]
				break;
   80f2c:	e7e6      	b.n	80efc <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   80f2e:	4a12      	ldr	r2, [pc, #72]	; (80f78 <SystemCoreClockUpdate+0x10c>)
   80f30:	4b0e      	ldr	r3, [pc, #56]	; (80f6c <SystemCoreClockUpdate+0x100>)
   80f32:	601a      	str	r2, [r3, #0]
				break;
   80f34:	e7e2      	b.n	80efc <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80f36:	4a0b      	ldr	r2, [pc, #44]	; (80f64 <SystemCoreClockUpdate+0xf8>)
   80f38:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80f3a:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80f3c:	480b      	ldr	r0, [pc, #44]	; (80f6c <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80f3e:	f3c1 410a 	ubfx	r1, r1, #16, #11
   80f42:	6803      	ldr	r3, [r0, #0]
   80f44:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80f48:	b2d2      	uxtb	r2, r2
   80f4a:	fbb3 f3f2 	udiv	r3, r3, r2
   80f4e:	6003      	str	r3, [r0, #0]
   80f50:	e7a1      	b.n	80e96 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   80f52:	4a06      	ldr	r2, [pc, #24]	; (80f6c <SystemCoreClockUpdate+0x100>)
   80f54:	6813      	ldr	r3, [r2, #0]
   80f56:	490a      	ldr	r1, [pc, #40]	; (80f80 <SystemCoreClockUpdate+0x114>)
   80f58:	fba1 1303 	umull	r1, r3, r1, r3
   80f5c:	085b      	lsrs	r3, r3, #1
   80f5e:	6013      	str	r3, [r2, #0]
   80f60:	4770      	bx	lr
   80f62:	bf00      	nop
   80f64:	400e0600 	.word	0x400e0600
   80f68:	400e1a10 	.word	0x400e1a10
   80f6c:	20070130 	.word	0x20070130
   80f70:	00b71b00 	.word	0x00b71b00
   80f74:	003d0900 	.word	0x003d0900
   80f78:	007a1200 	.word	0x007a1200
   80f7c:	0e4e1c00 	.word	0x0e4e1c00
   80f80:	aaaaaaab 	.word	0xaaaaaaab

00080f84 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80f84:	4b0a      	ldr	r3, [pc, #40]	; (80fb0 <_sbrk+0x2c>)
   80f86:	681b      	ldr	r3, [r3, #0]
   80f88:	b153      	cbz	r3, 80fa0 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   80f8a:	4b09      	ldr	r3, [pc, #36]	; (80fb0 <_sbrk+0x2c>)
   80f8c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80f8e:	181a      	adds	r2, r3, r0
   80f90:	4908      	ldr	r1, [pc, #32]	; (80fb4 <_sbrk+0x30>)
   80f92:	4291      	cmp	r1, r2
   80f94:	db08      	blt.n	80fa8 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   80f96:	4610      	mov	r0, r2
   80f98:	4a05      	ldr	r2, [pc, #20]	; (80fb0 <_sbrk+0x2c>)
   80f9a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80f9c:	4618      	mov	r0, r3
   80f9e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   80fa0:	4a05      	ldr	r2, [pc, #20]	; (80fb8 <_sbrk+0x34>)
   80fa2:	4b03      	ldr	r3, [pc, #12]	; (80fb0 <_sbrk+0x2c>)
   80fa4:	601a      	str	r2, [r3, #0]
   80fa6:	e7f0      	b.n	80f8a <_sbrk+0x6>
		return (caddr_t) -1;	
   80fa8:	f04f 30ff 	mov.w	r0, #4294967295
}
   80fac:	4770      	bx	lr
   80fae:	bf00      	nop
   80fb0:	20070c24 	.word	0x20070c24
   80fb4:	20087ffc 	.word	0x20087ffc
   80fb8:	20072cb0 	.word	0x20072cb0

00080fbc <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80fbc:	f04f 30ff 	mov.w	r0, #4294967295
   80fc0:	4770      	bx	lr

00080fc2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80fc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80fc6:	604b      	str	r3, [r1, #4]

	return 0;
}
   80fc8:	2000      	movs	r0, #0
   80fca:	4770      	bx	lr

00080fcc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80fcc:	2001      	movs	r0, #1
   80fce:	4770      	bx	lr

00080fd0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80fd0:	2000      	movs	r0, #0
   80fd2:	4770      	bx	lr

00080fd4 <main>:
uint8_t test3[] = {0,0,1,0};
uint8_t test4[] = {0,0,0,1};
uint8_t testaddr[] = {1,0,1,0};

int main (void)
{
   80fd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
   80fd8:	4b28      	ldr	r3, [pc, #160]	; (8107c <main+0xa8>)
   80fda:	4798      	blx	r3
	board_init();
   80fdc:	4b28      	ldr	r3, [pc, #160]	; (81080 <main+0xac>)
   80fde:	4798      	blx	r3
	usart0_init();
   80fe0:	4b28      	ldr	r3, [pc, #160]	; (81084 <main+0xb0>)
   80fe2:	4798      	blx	r3
   80fe4:	200b      	movs	r0, #11
   80fe6:	4c28      	ldr	r4, [pc, #160]	; (81088 <main+0xb4>)
   80fe8:	47a0      	blx	r4
   80fea:	200c      	movs	r0, #12
   80fec:	47a0      	blx	r4
   80fee:	200d      	movs	r0, #13
   80ff0:	47a0      	blx	r4
   80ff2:	200e      	movs	r0, #14
   80ff4:	47a0      	blx	r4
	ioport_init();
	delayInit();
   80ff6:	4b25      	ldr	r3, [pc, #148]	; (8108c <main+0xb8>)
   80ff8:	4798      	blx	r3
	lcdInit();
   80ffa:	4b25      	ldr	r3, [pc, #148]	; (81090 <main+0xbc>)
   80ffc:	4798      	blx	r3
	configureConsole();
   80ffe:	4b25      	ldr	r3, [pc, #148]	; (81094 <main+0xc0>)
   81000:	4798      	blx	r3
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   81002:	4b25      	ldr	r3, [pc, #148]	; (81098 <main+0xc4>)
   81004:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   81008:	601a      	str	r2, [r3, #0]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8100a:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8100c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_enable_pin(PIO_PB27_IDX);
	ioport_set_pin_dir(PIO_PB27_IDX, IOPORT_DIR_OUTPUT);

	
	while(1){
		uint8_t hammingMSG1 = createHammingCode(test1);
   81010:	4e22      	ldr	r6, [pc, #136]	; (8109c <main+0xc8>)
		uint8_t hammingMSG4 = createHammingCode(test4);
		uint8_t hammingADDR = createHammingCode(testaddr);
 		usart0_send_Packet(hammingADDR,hammingMSG1);
		delayMicroseconds(1000);
		usart0_send_Packet(hammingADDR,hammingMSG2);
 		delayMicroseconds(10000);
   81012:	f242 7810 	movw	r8, #10000	; 0x2710
		uint8_t hammingMSG1 = createHammingCode(test1);
   81016:	4822      	ldr	r0, [pc, #136]	; (810a0 <main+0xcc>)
   81018:	47b0      	blx	r6
   8101a:	4604      	mov	r4, r0
		uint8_t hammingMSG2 = createHammingCode(test2);
   8101c:	4821      	ldr	r0, [pc, #132]	; (810a4 <main+0xd0>)
   8101e:	47b0      	blx	r6
   81020:	4683      	mov	fp, r0
		uint8_t hammingMSG3 = createHammingCode(test3);
   81022:	4821      	ldr	r0, [pc, #132]	; (810a8 <main+0xd4>)
   81024:	47b0      	blx	r6
   81026:	4682      	mov	sl, r0
		uint8_t hammingMSG4 = createHammingCode(test4);
   81028:	4820      	ldr	r0, [pc, #128]	; (810ac <main+0xd8>)
   8102a:	47b0      	blx	r6
   8102c:	4681      	mov	r9, r0
		uint8_t hammingADDR = createHammingCode(testaddr);
   8102e:	4820      	ldr	r0, [pc, #128]	; (810b0 <main+0xdc>)
   81030:	47b0      	blx	r6
   81032:	4607      	mov	r7, r0
 		usart0_send_Packet(hammingADDR,hammingMSG1);
   81034:	4621      	mov	r1, r4
   81036:	4d1f      	ldr	r5, [pc, #124]	; (810b4 <main+0xe0>)
   81038:	47a8      	blx	r5
		delayMicroseconds(1000);
   8103a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   8103e:	4c1e      	ldr	r4, [pc, #120]	; (810b8 <main+0xe4>)
   81040:	47a0      	blx	r4
		usart0_send_Packet(hammingADDR,hammingMSG2);
   81042:	4659      	mov	r1, fp
   81044:	4638      	mov	r0, r7
   81046:	47a8      	blx	r5
 		delayMicroseconds(10000);
   81048:	4640      	mov	r0, r8
   8104a:	47a0      	blx	r4
		usart0_send_Packet(hammingADDR,hammingMSG3);
   8104c:	4651      	mov	r1, sl
   8104e:	4638      	mov	r0, r7
   81050:	47a8      	blx	r5
		delayMicroseconds(1000);
   81052:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   81056:	47a0      	blx	r4
		lcdClearDisplay();
   81058:	4b18      	ldr	r3, [pc, #96]	; (810bc <main+0xe8>)
   8105a:	4798      	blx	r3
		usart0_send_Packet(hammingADDR,hammingMSG4);
   8105c:	4649      	mov	r1, r9
   8105e:	4638      	mov	r0, r7
   81060:	47a8      	blx	r5
		delayMicroseconds(10000);
   81062:	4640      	mov	r0, r8
   81064:	47a0      	blx	r4
		usart0_send_Packet(hammingADDR,0x20);
   81066:	2120      	movs	r1, #32
   81068:	4638      	mov	r0, r7
   8106a:	47a8      	blx	r5
		delayMicroseconds(10000);
   8106c:	4640      	mov	r0, r8
   8106e:	47a0      	blx	r4
		//lcdWriteAsciiString("")
		lcdWrite4DigitNumber(1248);
   81070:	f44f 609c 	mov.w	r0, #1248	; 0x4e0
   81074:	4b12      	ldr	r3, [pc, #72]	; (810c0 <main+0xec>)
   81076:	4798      	blx	r3
   81078:	e7cd      	b.n	81016 <main+0x42>
   8107a:	bf00      	nop
   8107c:	00080915 	.word	0x00080915
   81080:	00080979 	.word	0x00080979
   81084:	0008087d 	.word	0x0008087d
   81088:	00080d7d 	.word	0x00080d7d
   8108c:	000805ad 	.word	0x000805ad
   81090:	000806f9 	.word	0x000806f9
   81094:	00080519 	.word	0x00080519
   81098:	400e1000 	.word	0x400e1000
   8109c:	00080801 	.word	0x00080801
   810a0:	20070134 	.word	0x20070134
   810a4:	20070138 	.word	0x20070138
   810a8:	2007013c 	.word	0x2007013c
   810ac:	20070140 	.word	0x20070140
   810b0:	20070144 	.word	0x20070144
   810b4:	000808f1 	.word	0x000808f1
   810b8:	000805e9 	.word	0x000805e9
   810bc:	000807e1 	.word	0x000807e1
   810c0:	00080625 	.word	0x00080625

000810c4 <__libc_init_array>:
   810c4:	b570      	push	{r4, r5, r6, lr}
   810c6:	4e0f      	ldr	r6, [pc, #60]	; (81104 <__libc_init_array+0x40>)
   810c8:	4d0f      	ldr	r5, [pc, #60]	; (81108 <__libc_init_array+0x44>)
   810ca:	1b76      	subs	r6, r6, r5
   810cc:	10b6      	asrs	r6, r6, #2
   810ce:	bf18      	it	ne
   810d0:	2400      	movne	r4, #0
   810d2:	d005      	beq.n	810e0 <__libc_init_array+0x1c>
   810d4:	3401      	adds	r4, #1
   810d6:	f855 3b04 	ldr.w	r3, [r5], #4
   810da:	4798      	blx	r3
   810dc:	42a6      	cmp	r6, r4
   810de:	d1f9      	bne.n	810d4 <__libc_init_array+0x10>
   810e0:	4e0a      	ldr	r6, [pc, #40]	; (8110c <__libc_init_array+0x48>)
   810e2:	4d0b      	ldr	r5, [pc, #44]	; (81110 <__libc_init_array+0x4c>)
   810e4:	f003 f868 	bl	841b8 <_init>
   810e8:	1b76      	subs	r6, r6, r5
   810ea:	10b6      	asrs	r6, r6, #2
   810ec:	bf18      	it	ne
   810ee:	2400      	movne	r4, #0
   810f0:	d006      	beq.n	81100 <__libc_init_array+0x3c>
   810f2:	3401      	adds	r4, #1
   810f4:	f855 3b04 	ldr.w	r3, [r5], #4
   810f8:	4798      	blx	r3
   810fa:	42a6      	cmp	r6, r4
   810fc:	d1f9      	bne.n	810f2 <__libc_init_array+0x2e>
   810fe:	bd70      	pop	{r4, r5, r6, pc}
   81100:	bd70      	pop	{r4, r5, r6, pc}
   81102:	bf00      	nop
   81104:	000841c4 	.word	0x000841c4
   81108:	000841c4 	.word	0x000841c4
   8110c:	000841cc 	.word	0x000841cc
   81110:	000841c4 	.word	0x000841c4

00081114 <iprintf>:
   81114:	b40f      	push	{r0, r1, r2, r3}
   81116:	b510      	push	{r4, lr}
   81118:	4b07      	ldr	r3, [pc, #28]	; (81138 <iprintf+0x24>)
   8111a:	b082      	sub	sp, #8
   8111c:	ac04      	add	r4, sp, #16
   8111e:	f854 2b04 	ldr.w	r2, [r4], #4
   81122:	6818      	ldr	r0, [r3, #0]
   81124:	4623      	mov	r3, r4
   81126:	6881      	ldr	r1, [r0, #8]
   81128:	9401      	str	r4, [sp, #4]
   8112a:	f000 f9bf 	bl	814ac <_vfiprintf_r>
   8112e:	b002      	add	sp, #8
   81130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81134:	b004      	add	sp, #16
   81136:	4770      	bx	lr
   81138:	20070148 	.word	0x20070148

0008113c <__itoa>:
   8113c:	1e93      	subs	r3, r2, #2
   8113e:	2b22      	cmp	r3, #34	; 0x22
   81140:	d810      	bhi.n	81164 <__itoa+0x28>
   81142:	2a0a      	cmp	r2, #10
   81144:	b510      	push	{r4, lr}
   81146:	d006      	beq.n	81156 <__itoa+0x1a>
   81148:	2300      	movs	r3, #0
   8114a:	460c      	mov	r4, r1
   8114c:	4419      	add	r1, r3
   8114e:	f000 f92d 	bl	813ac <__utoa>
   81152:	4620      	mov	r0, r4
   81154:	bd10      	pop	{r4, pc}
   81156:	2800      	cmp	r0, #0
   81158:	daf6      	bge.n	81148 <__itoa+0xc>
   8115a:	232d      	movs	r3, #45	; 0x2d
   8115c:	4240      	negs	r0, r0
   8115e:	700b      	strb	r3, [r1, #0]
   81160:	2301      	movs	r3, #1
   81162:	e7f2      	b.n	8114a <__itoa+0xe>
   81164:	2000      	movs	r0, #0
   81166:	7008      	strb	r0, [r1, #0]
   81168:	4770      	bx	lr
   8116a:	bf00      	nop

0008116c <itoa>:
   8116c:	f7ff bfe6 	b.w	8113c <__itoa>

00081170 <memset>:
   81170:	b470      	push	{r4, r5, r6}
   81172:	0786      	lsls	r6, r0, #30
   81174:	d046      	beq.n	81204 <memset+0x94>
   81176:	1e54      	subs	r4, r2, #1
   81178:	2a00      	cmp	r2, #0
   8117a:	d041      	beq.n	81200 <memset+0x90>
   8117c:	b2ca      	uxtb	r2, r1
   8117e:	4603      	mov	r3, r0
   81180:	e002      	b.n	81188 <memset+0x18>
   81182:	f114 34ff 	adds.w	r4, r4, #4294967295
   81186:	d33b      	bcc.n	81200 <memset+0x90>
   81188:	f803 2b01 	strb.w	r2, [r3], #1
   8118c:	079d      	lsls	r5, r3, #30
   8118e:	d1f8      	bne.n	81182 <memset+0x12>
   81190:	2c03      	cmp	r4, #3
   81192:	d92e      	bls.n	811f2 <memset+0x82>
   81194:	b2cd      	uxtb	r5, r1
   81196:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8119a:	2c0f      	cmp	r4, #15
   8119c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   811a0:	d919      	bls.n	811d6 <memset+0x66>
   811a2:	4626      	mov	r6, r4
   811a4:	f103 0210 	add.w	r2, r3, #16
   811a8:	3e10      	subs	r6, #16
   811aa:	2e0f      	cmp	r6, #15
   811ac:	f842 5c10 	str.w	r5, [r2, #-16]
   811b0:	f842 5c0c 	str.w	r5, [r2, #-12]
   811b4:	f842 5c08 	str.w	r5, [r2, #-8]
   811b8:	f842 5c04 	str.w	r5, [r2, #-4]
   811bc:	f102 0210 	add.w	r2, r2, #16
   811c0:	d8f2      	bhi.n	811a8 <memset+0x38>
   811c2:	f1a4 0210 	sub.w	r2, r4, #16
   811c6:	f022 020f 	bic.w	r2, r2, #15
   811ca:	f004 040f 	and.w	r4, r4, #15
   811ce:	3210      	adds	r2, #16
   811d0:	2c03      	cmp	r4, #3
   811d2:	4413      	add	r3, r2
   811d4:	d90d      	bls.n	811f2 <memset+0x82>
   811d6:	461e      	mov	r6, r3
   811d8:	4622      	mov	r2, r4
   811da:	3a04      	subs	r2, #4
   811dc:	2a03      	cmp	r2, #3
   811de:	f846 5b04 	str.w	r5, [r6], #4
   811e2:	d8fa      	bhi.n	811da <memset+0x6a>
   811e4:	1f22      	subs	r2, r4, #4
   811e6:	f022 0203 	bic.w	r2, r2, #3
   811ea:	3204      	adds	r2, #4
   811ec:	4413      	add	r3, r2
   811ee:	f004 0403 	and.w	r4, r4, #3
   811f2:	b12c      	cbz	r4, 81200 <memset+0x90>
   811f4:	b2c9      	uxtb	r1, r1
   811f6:	441c      	add	r4, r3
   811f8:	f803 1b01 	strb.w	r1, [r3], #1
   811fc:	429c      	cmp	r4, r3
   811fe:	d1fb      	bne.n	811f8 <memset+0x88>
   81200:	bc70      	pop	{r4, r5, r6}
   81202:	4770      	bx	lr
   81204:	4614      	mov	r4, r2
   81206:	4603      	mov	r3, r0
   81208:	e7c2      	b.n	81190 <memset+0x20>
   8120a:	bf00      	nop

0008120c <setbuf>:
   8120c:	2900      	cmp	r1, #0
   8120e:	bf0c      	ite	eq
   81210:	2202      	moveq	r2, #2
   81212:	2200      	movne	r2, #0
   81214:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81218:	f000 b800 	b.w	8121c <setvbuf>

0008121c <setvbuf>:
   8121c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81220:	4d61      	ldr	r5, [pc, #388]	; (813a8 <setvbuf+0x18c>)
   81222:	b083      	sub	sp, #12
   81224:	682d      	ldr	r5, [r5, #0]
   81226:	4604      	mov	r4, r0
   81228:	460f      	mov	r7, r1
   8122a:	4690      	mov	r8, r2
   8122c:	461e      	mov	r6, r3
   8122e:	b115      	cbz	r5, 81236 <setvbuf+0x1a>
   81230:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81232:	2b00      	cmp	r3, #0
   81234:	d064      	beq.n	81300 <setvbuf+0xe4>
   81236:	f1b8 0f02 	cmp.w	r8, #2
   8123a:	d006      	beq.n	8124a <setvbuf+0x2e>
   8123c:	f1b8 0f01 	cmp.w	r8, #1
   81240:	f200 809f 	bhi.w	81382 <setvbuf+0x166>
   81244:	2e00      	cmp	r6, #0
   81246:	f2c0 809c 	blt.w	81382 <setvbuf+0x166>
   8124a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8124c:	07d8      	lsls	r0, r3, #31
   8124e:	d534      	bpl.n	812ba <setvbuf+0x9e>
   81250:	4621      	mov	r1, r4
   81252:	4628      	mov	r0, r5
   81254:	f001 f8c2 	bl	823dc <_fflush_r>
   81258:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8125a:	b141      	cbz	r1, 8126e <setvbuf+0x52>
   8125c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81260:	4299      	cmp	r1, r3
   81262:	d002      	beq.n	8126a <setvbuf+0x4e>
   81264:	4628      	mov	r0, r5
   81266:	f001 fa37 	bl	826d8 <_free_r>
   8126a:	2300      	movs	r3, #0
   8126c:	6323      	str	r3, [r4, #48]	; 0x30
   8126e:	2200      	movs	r2, #0
   81270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81274:	61a2      	str	r2, [r4, #24]
   81276:	6062      	str	r2, [r4, #4]
   81278:	061a      	lsls	r2, r3, #24
   8127a:	d43a      	bmi.n	812f2 <setvbuf+0xd6>
   8127c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   81280:	f023 0303 	bic.w	r3, r3, #3
   81284:	f1b8 0f02 	cmp.w	r8, #2
   81288:	81a3      	strh	r3, [r4, #12]
   8128a:	d01d      	beq.n	812c8 <setvbuf+0xac>
   8128c:	ab01      	add	r3, sp, #4
   8128e:	466a      	mov	r2, sp
   81290:	4621      	mov	r1, r4
   81292:	4628      	mov	r0, r5
   81294:	f001 fcbe 	bl	82c14 <__swhatbuf_r>
   81298:	89a3      	ldrh	r3, [r4, #12]
   8129a:	4318      	orrs	r0, r3
   8129c:	81a0      	strh	r0, [r4, #12]
   8129e:	2e00      	cmp	r6, #0
   812a0:	d132      	bne.n	81308 <setvbuf+0xec>
   812a2:	9e00      	ldr	r6, [sp, #0]
   812a4:	4630      	mov	r0, r6
   812a6:	f001 fd2d 	bl	82d04 <malloc>
   812aa:	4607      	mov	r7, r0
   812ac:	2800      	cmp	r0, #0
   812ae:	d06b      	beq.n	81388 <setvbuf+0x16c>
   812b0:	89a3      	ldrh	r3, [r4, #12]
   812b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   812b6:	81a3      	strh	r3, [r4, #12]
   812b8:	e028      	b.n	8130c <setvbuf+0xf0>
   812ba:	89a3      	ldrh	r3, [r4, #12]
   812bc:	0599      	lsls	r1, r3, #22
   812be:	d4c7      	bmi.n	81250 <setvbuf+0x34>
   812c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   812c2:	f001 fca3 	bl	82c0c <__retarget_lock_acquire_recursive>
   812c6:	e7c3      	b.n	81250 <setvbuf+0x34>
   812c8:	2500      	movs	r5, #0
   812ca:	2600      	movs	r6, #0
   812cc:	2001      	movs	r0, #1
   812ce:	6e61      	ldr	r1, [r4, #100]	; 0x64
   812d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
   812d4:	f043 0302 	orr.w	r3, r3, #2
   812d8:	60a6      	str	r6, [r4, #8]
   812da:	07ce      	lsls	r6, r1, #31
   812dc:	81a3      	strh	r3, [r4, #12]
   812de:	6160      	str	r0, [r4, #20]
   812e0:	6022      	str	r2, [r4, #0]
   812e2:	6122      	str	r2, [r4, #16]
   812e4:	d401      	bmi.n	812ea <setvbuf+0xce>
   812e6:	0598      	lsls	r0, r3, #22
   812e8:	d53e      	bpl.n	81368 <setvbuf+0x14c>
   812ea:	4628      	mov	r0, r5
   812ec:	b003      	add	sp, #12
   812ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   812f2:	6921      	ldr	r1, [r4, #16]
   812f4:	4628      	mov	r0, r5
   812f6:	f001 f9ef 	bl	826d8 <_free_r>
   812fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   812fe:	e7bd      	b.n	8127c <setvbuf+0x60>
   81300:	4628      	mov	r0, r5
   81302:	f001 f8c3 	bl	8248c <__sinit>
   81306:	e796      	b.n	81236 <setvbuf+0x1a>
   81308:	2f00      	cmp	r7, #0
   8130a:	d0cb      	beq.n	812a4 <setvbuf+0x88>
   8130c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8130e:	2b00      	cmp	r3, #0
   81310:	d033      	beq.n	8137a <setvbuf+0x15e>
   81312:	9b00      	ldr	r3, [sp, #0]
   81314:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   81318:	429e      	cmp	r6, r3
   8131a:	bf1c      	itt	ne
   8131c:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   81320:	81a2      	strhne	r2, [r4, #12]
   81322:	f1b8 0f01 	cmp.w	r8, #1
   81326:	bf04      	itt	eq
   81328:	f042 0201 	orreq.w	r2, r2, #1
   8132c:	81a2      	strheq	r2, [r4, #12]
   8132e:	b292      	uxth	r2, r2
   81330:	f012 0308 	ands.w	r3, r2, #8
   81334:	6027      	str	r7, [r4, #0]
   81336:	6127      	str	r7, [r4, #16]
   81338:	6166      	str	r6, [r4, #20]
   8133a:	d00e      	beq.n	8135a <setvbuf+0x13e>
   8133c:	07d1      	lsls	r1, r2, #31
   8133e:	d51a      	bpl.n	81376 <setvbuf+0x15a>
   81340:	2300      	movs	r3, #0
   81342:	6e65      	ldr	r5, [r4, #100]	; 0x64
   81344:	4276      	negs	r6, r6
   81346:	f015 0501 	ands.w	r5, r5, #1
   8134a:	61a6      	str	r6, [r4, #24]
   8134c:	60a3      	str	r3, [r4, #8]
   8134e:	d009      	beq.n	81364 <setvbuf+0x148>
   81350:	2500      	movs	r5, #0
   81352:	4628      	mov	r0, r5
   81354:	b003      	add	sp, #12
   81356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8135a:	60a3      	str	r3, [r4, #8]
   8135c:	6e65      	ldr	r5, [r4, #100]	; 0x64
   8135e:	f015 0501 	ands.w	r5, r5, #1
   81362:	d1f5      	bne.n	81350 <setvbuf+0x134>
   81364:	0593      	lsls	r3, r2, #22
   81366:	d4c0      	bmi.n	812ea <setvbuf+0xce>
   81368:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8136a:	f001 fc51 	bl	82c10 <__retarget_lock_release_recursive>
   8136e:	4628      	mov	r0, r5
   81370:	b003      	add	sp, #12
   81372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81376:	60a6      	str	r6, [r4, #8]
   81378:	e7f0      	b.n	8135c <setvbuf+0x140>
   8137a:	4628      	mov	r0, r5
   8137c:	f001 f886 	bl	8248c <__sinit>
   81380:	e7c7      	b.n	81312 <setvbuf+0xf6>
   81382:	f04f 35ff 	mov.w	r5, #4294967295
   81386:	e7b0      	b.n	812ea <setvbuf+0xce>
   81388:	f8dd 9000 	ldr.w	r9, [sp]
   8138c:	45b1      	cmp	r9, r6
   8138e:	d004      	beq.n	8139a <setvbuf+0x17e>
   81390:	4648      	mov	r0, r9
   81392:	f001 fcb7 	bl	82d04 <malloc>
   81396:	4607      	mov	r7, r0
   81398:	b920      	cbnz	r0, 813a4 <setvbuf+0x188>
   8139a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8139e:	f04f 35ff 	mov.w	r5, #4294967295
   813a2:	e792      	b.n	812ca <setvbuf+0xae>
   813a4:	464e      	mov	r6, r9
   813a6:	e783      	b.n	812b0 <setvbuf+0x94>
   813a8:	20070148 	.word	0x20070148

000813ac <__utoa>:
   813ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   813ae:	b08b      	sub	sp, #44	; 0x2c
   813b0:	466f      	mov	r7, sp
   813b2:	4615      	mov	r5, r2
   813b4:	f8df e070 	ldr.w	lr, [pc, #112]	; 81428 <__utoa+0x7c>
   813b8:	4604      	mov	r4, r0
   813ba:	460e      	mov	r6, r1
   813bc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   813c0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   813c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   813c6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   813c8:	e89e 0003 	ldmia.w	lr, {r0, r1}
   813cc:	1eab      	subs	r3, r5, #2
   813ce:	f847 0b04 	str.w	r0, [r7], #4
   813d2:	2b22      	cmp	r3, #34	; 0x22
   813d4:	7039      	strb	r1, [r7, #0]
   813d6:	d822      	bhi.n	8141e <__utoa+0x72>
   813d8:	1e71      	subs	r1, r6, #1
   813da:	4608      	mov	r0, r1
   813dc:	2300      	movs	r3, #0
   813de:	e000      	b.n	813e2 <__utoa+0x36>
   813e0:	4613      	mov	r3, r2
   813e2:	fbb4 f2f5 	udiv	r2, r4, r5
   813e6:	fb05 4412 	mls	r4, r5, r2, r4
   813ea:	af0a      	add	r7, sp, #40	; 0x28
   813ec:	443c      	add	r4, r7
   813ee:	f814 7c28 	ldrb.w	r7, [r4, #-40]
   813f2:	4614      	mov	r4, r2
   813f4:	f800 7f01 	strb.w	r7, [r0, #1]!
   813f8:	1c5a      	adds	r2, r3, #1
   813fa:	2c00      	cmp	r4, #0
   813fc:	d1f0      	bne.n	813e0 <__utoa+0x34>
   813fe:	54b4      	strb	r4, [r6, r2]
   81400:	18f2      	adds	r2, r6, r3
   81402:	b14b      	cbz	r3, 81418 <__utoa+0x6c>
   81404:	3401      	adds	r4, #1
   81406:	784d      	ldrb	r5, [r1, #1]
   81408:	7817      	ldrb	r7, [r2, #0]
   8140a:	1b18      	subs	r0, r3, r4
   8140c:	4284      	cmp	r4, r0
   8140e:	f801 7f01 	strb.w	r7, [r1, #1]!
   81412:	f802 5901 	strb.w	r5, [r2], #-1
   81416:	dbf5      	blt.n	81404 <__utoa+0x58>
   81418:	4630      	mov	r0, r6
   8141a:	b00b      	add	sp, #44	; 0x2c
   8141c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8141e:	2000      	movs	r0, #0
   81420:	7030      	strb	r0, [r6, #0]
   81422:	b00b      	add	sp, #44	; 0x2c
   81424:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81426:	bf00      	nop
   81428:	0008402c 	.word	0x0008402c

0008142c <__sprint_r.part.0>:
   8142c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81430:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   81432:	4693      	mov	fp, r2
   81434:	049c      	lsls	r4, r3, #18
   81436:	d52f      	bpl.n	81498 <__sprint_r.part.0+0x6c>
   81438:	6893      	ldr	r3, [r2, #8]
   8143a:	6812      	ldr	r2, [r2, #0]
   8143c:	b353      	cbz	r3, 81494 <__sprint_r.part.0+0x68>
   8143e:	460e      	mov	r6, r1
   81440:	4607      	mov	r7, r0
   81442:	f102 0908 	add.w	r9, r2, #8
   81446:	e919 0420 	ldmdb	r9, {r5, sl}
   8144a:	ea5f 089a 	movs.w	r8, sl, lsr #2
   8144e:	d017      	beq.n	81480 <__sprint_r.part.0+0x54>
   81450:	2400      	movs	r4, #0
   81452:	3d04      	subs	r5, #4
   81454:	e001      	b.n	8145a <__sprint_r.part.0+0x2e>
   81456:	45a0      	cmp	r8, r4
   81458:	d010      	beq.n	8147c <__sprint_r.part.0+0x50>
   8145a:	4632      	mov	r2, r6
   8145c:	f855 1f04 	ldr.w	r1, [r5, #4]!
   81460:	4638      	mov	r0, r7
   81462:	f001 f8b5 	bl	825d0 <_fputwc_r>
   81466:	1c43      	adds	r3, r0, #1
   81468:	f104 0401 	add.w	r4, r4, #1
   8146c:	d1f3      	bne.n	81456 <__sprint_r.part.0+0x2a>
   8146e:	2300      	movs	r3, #0
   81470:	f8cb 3008 	str.w	r3, [fp, #8]
   81474:	f8cb 3004 	str.w	r3, [fp, #4]
   81478:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8147c:	f8db 3008 	ldr.w	r3, [fp, #8]
   81480:	f02a 0a03 	bic.w	sl, sl, #3
   81484:	eba3 030a 	sub.w	r3, r3, sl
   81488:	f8cb 3008 	str.w	r3, [fp, #8]
   8148c:	f109 0908 	add.w	r9, r9, #8
   81490:	2b00      	cmp	r3, #0
   81492:	d1d8      	bne.n	81446 <__sprint_r.part.0+0x1a>
   81494:	2000      	movs	r0, #0
   81496:	e7ea      	b.n	8146e <__sprint_r.part.0+0x42>
   81498:	f001 fa04 	bl	828a4 <__sfvwrite_r>
   8149c:	2300      	movs	r3, #0
   8149e:	f8cb 3008 	str.w	r3, [fp, #8]
   814a2:	f8cb 3004 	str.w	r3, [fp, #4]
   814a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   814aa:	bf00      	nop

000814ac <_vfiprintf_r>:
   814ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   814b0:	b0ad      	sub	sp, #180	; 0xb4
   814b2:	461d      	mov	r5, r3
   814b4:	468b      	mov	fp, r1
   814b6:	4690      	mov	r8, r2
   814b8:	9307      	str	r3, [sp, #28]
   814ba:	9006      	str	r0, [sp, #24]
   814bc:	b118      	cbz	r0, 814c6 <_vfiprintf_r+0x1a>
   814be:	6b83      	ldr	r3, [r0, #56]	; 0x38
   814c0:	2b00      	cmp	r3, #0
   814c2:	f000 80f3 	beq.w	816ac <_vfiprintf_r+0x200>
   814c6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   814ca:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   814ce:	07df      	lsls	r7, r3, #31
   814d0:	b281      	uxth	r1, r0
   814d2:	d402      	bmi.n	814da <_vfiprintf_r+0x2e>
   814d4:	058e      	lsls	r6, r1, #22
   814d6:	f140 80fc 	bpl.w	816d2 <_vfiprintf_r+0x226>
   814da:	048c      	lsls	r4, r1, #18
   814dc:	d40a      	bmi.n	814f4 <_vfiprintf_r+0x48>
   814de:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   814e2:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   814e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   814ea:	f8ab 100c 	strh.w	r1, [fp, #12]
   814ee:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   814f2:	b289      	uxth	r1, r1
   814f4:	0708      	lsls	r0, r1, #28
   814f6:	f140 80b3 	bpl.w	81660 <_vfiprintf_r+0x1b4>
   814fa:	f8db 3010 	ldr.w	r3, [fp, #16]
   814fe:	2b00      	cmp	r3, #0
   81500:	f000 80ae 	beq.w	81660 <_vfiprintf_r+0x1b4>
   81504:	f001 031a 	and.w	r3, r1, #26
   81508:	2b0a      	cmp	r3, #10
   8150a:	f000 80b5 	beq.w	81678 <_vfiprintf_r+0x1cc>
   8150e:	2300      	movs	r3, #0
   81510:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   81514:	46d1      	mov	r9, sl
   81516:	930b      	str	r3, [sp, #44]	; 0x2c
   81518:	9303      	str	r3, [sp, #12]
   8151a:	9311      	str	r3, [sp, #68]	; 0x44
   8151c:	9310      	str	r3, [sp, #64]	; 0x40
   8151e:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   81522:	f8cd b010 	str.w	fp, [sp, #16]
   81526:	f898 3000 	ldrb.w	r3, [r8]
   8152a:	4644      	mov	r4, r8
   8152c:	b1fb      	cbz	r3, 8156e <_vfiprintf_r+0xc2>
   8152e:	2b25      	cmp	r3, #37	; 0x25
   81530:	d102      	bne.n	81538 <_vfiprintf_r+0x8c>
   81532:	e01c      	b.n	8156e <_vfiprintf_r+0xc2>
   81534:	2b25      	cmp	r3, #37	; 0x25
   81536:	d003      	beq.n	81540 <_vfiprintf_r+0x94>
   81538:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   8153c:	2b00      	cmp	r3, #0
   8153e:	d1f9      	bne.n	81534 <_vfiprintf_r+0x88>
   81540:	eba4 0508 	sub.w	r5, r4, r8
   81544:	b19d      	cbz	r5, 8156e <_vfiprintf_r+0xc2>
   81546:	9b10      	ldr	r3, [sp, #64]	; 0x40
   81548:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8154a:	3301      	adds	r3, #1
   8154c:	442a      	add	r2, r5
   8154e:	2b07      	cmp	r3, #7
   81550:	f8c9 8000 	str.w	r8, [r9]
   81554:	f8c9 5004 	str.w	r5, [r9, #4]
   81558:	9211      	str	r2, [sp, #68]	; 0x44
   8155a:	9310      	str	r3, [sp, #64]	; 0x40
   8155c:	dd7a      	ble.n	81654 <_vfiprintf_r+0x1a8>
   8155e:	2a00      	cmp	r2, #0
   81560:	f040 84b5 	bne.w	81ece <_vfiprintf_r+0xa22>
   81564:	46d1      	mov	r9, sl
   81566:	9b03      	ldr	r3, [sp, #12]
   81568:	9210      	str	r2, [sp, #64]	; 0x40
   8156a:	442b      	add	r3, r5
   8156c:	9303      	str	r3, [sp, #12]
   8156e:	7823      	ldrb	r3, [r4, #0]
   81570:	2b00      	cmp	r3, #0
   81572:	f000 83e5 	beq.w	81d40 <_vfiprintf_r+0x894>
   81576:	2000      	movs	r0, #0
   81578:	f04f 0300 	mov.w	r3, #0
   8157c:	f104 0801 	add.w	r8, r4, #1
   81580:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   81584:	7862      	ldrb	r2, [r4, #1]
   81586:	4606      	mov	r6, r0
   81588:	4605      	mov	r5, r0
   8158a:	4603      	mov	r3, r0
   8158c:	f04f 34ff 	mov.w	r4, #4294967295
   81590:	f108 0801 	add.w	r8, r8, #1
   81594:	f1a2 0120 	sub.w	r1, r2, #32
   81598:	2958      	cmp	r1, #88	; 0x58
   8159a:	f200 82d9 	bhi.w	81b50 <_vfiprintf_r+0x6a4>
   8159e:	e8df f011 	tbh	[pc, r1, lsl #1]
   815a2:	0228      	.short	0x0228
   815a4:	02d702d7 	.word	0x02d702d7
   815a8:	02d70230 	.word	0x02d70230
   815ac:	02d702d7 	.word	0x02d702d7
   815b0:	02d702d7 	.word	0x02d702d7
   815b4:	00a002d7 	.word	0x00a002d7
   815b8:	02d70288 	.word	0x02d70288
   815bc:	02b800a8 	.word	0x02b800a8
   815c0:	01a602d7 	.word	0x01a602d7
   815c4:	01ab01ab 	.word	0x01ab01ab
   815c8:	01ab01ab 	.word	0x01ab01ab
   815cc:	01ab01ab 	.word	0x01ab01ab
   815d0:	01ab01ab 	.word	0x01ab01ab
   815d4:	02d701ab 	.word	0x02d701ab
   815d8:	02d702d7 	.word	0x02d702d7
   815dc:	02d702d7 	.word	0x02d702d7
   815e0:	02d702d7 	.word	0x02d702d7
   815e4:	02d702d7 	.word	0x02d702d7
   815e8:	01b902d7 	.word	0x01b902d7
   815ec:	02d702d7 	.word	0x02d702d7
   815f0:	02d702d7 	.word	0x02d702d7
   815f4:	02d702d7 	.word	0x02d702d7
   815f8:	02d702d7 	.word	0x02d702d7
   815fc:	02d702d7 	.word	0x02d702d7
   81600:	02d7019e 	.word	0x02d7019e
   81604:	02d702d7 	.word	0x02d702d7
   81608:	02d702d7 	.word	0x02d702d7
   8160c:	02d701a2 	.word	0x02d701a2
   81610:	025a02d7 	.word	0x025a02d7
   81614:	02d702d7 	.word	0x02d702d7
   81618:	02d702d7 	.word	0x02d702d7
   8161c:	02d702d7 	.word	0x02d702d7
   81620:	02d702d7 	.word	0x02d702d7
   81624:	02d702d7 	.word	0x02d702d7
   81628:	02220261 	.word	0x02220261
   8162c:	02d702d7 	.word	0x02d702d7
   81630:	027602d7 	.word	0x027602d7
   81634:	02d70222 	.word	0x02d70222
   81638:	027b02d7 	.word	0x027b02d7
   8163c:	01fc02d7 	.word	0x01fc02d7
   81640:	02100189 	.word	0x02100189
   81644:	02d702d2 	.word	0x02d702d2
   81648:	02d70295 	.word	0x02d70295
   8164c:	02d700ad 	.word	0x02d700ad
   81650:	023502d7 	.word	0x023502d7
   81654:	f109 0908 	add.w	r9, r9, #8
   81658:	9b03      	ldr	r3, [sp, #12]
   8165a:	442b      	add	r3, r5
   8165c:	9303      	str	r3, [sp, #12]
   8165e:	e786      	b.n	8156e <_vfiprintf_r+0xc2>
   81660:	4659      	mov	r1, fp
   81662:	9806      	ldr	r0, [sp, #24]
   81664:	f000 fdaa 	bl	821bc <__swsetup_r>
   81668:	bb18      	cbnz	r0, 816b2 <_vfiprintf_r+0x206>
   8166a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   8166e:	f001 031a 	and.w	r3, r1, #26
   81672:	2b0a      	cmp	r3, #10
   81674:	f47f af4b 	bne.w	8150e <_vfiprintf_r+0x62>
   81678:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   8167c:	2b00      	cmp	r3, #0
   8167e:	f6ff af46 	blt.w	8150e <_vfiprintf_r+0x62>
   81682:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81686:	07db      	lsls	r3, r3, #31
   81688:	d405      	bmi.n	81696 <_vfiprintf_r+0x1ea>
   8168a:	058f      	lsls	r7, r1, #22
   8168c:	d403      	bmi.n	81696 <_vfiprintf_r+0x1ea>
   8168e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81692:	f001 fabd 	bl	82c10 <__retarget_lock_release_recursive>
   81696:	462b      	mov	r3, r5
   81698:	4642      	mov	r2, r8
   8169a:	4659      	mov	r1, fp
   8169c:	9806      	ldr	r0, [sp, #24]
   8169e:	f000 fd49 	bl	82134 <__sbprintf>
   816a2:	9003      	str	r0, [sp, #12]
   816a4:	9803      	ldr	r0, [sp, #12]
   816a6:	b02d      	add	sp, #180	; 0xb4
   816a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   816ac:	f000 feee 	bl	8248c <__sinit>
   816b0:	e709      	b.n	814c6 <_vfiprintf_r+0x1a>
   816b2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   816b6:	07d9      	lsls	r1, r3, #31
   816b8:	d404      	bmi.n	816c4 <_vfiprintf_r+0x218>
   816ba:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   816be:	059a      	lsls	r2, r3, #22
   816c0:	f140 84ae 	bpl.w	82020 <_vfiprintf_r+0xb74>
   816c4:	f04f 33ff 	mov.w	r3, #4294967295
   816c8:	9303      	str	r3, [sp, #12]
   816ca:	9803      	ldr	r0, [sp, #12]
   816cc:	b02d      	add	sp, #180	; 0xb4
   816ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   816d2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   816d6:	f001 fa99 	bl	82c0c <__retarget_lock_acquire_recursive>
   816da:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   816de:	b281      	uxth	r1, r0
   816e0:	e6fb      	b.n	814da <_vfiprintf_r+0x2e>
   816e2:	9907      	ldr	r1, [sp, #28]
   816e4:	460a      	mov	r2, r1
   816e6:	680d      	ldr	r5, [r1, #0]
   816e8:	3204      	adds	r2, #4
   816ea:	2d00      	cmp	r5, #0
   816ec:	9207      	str	r2, [sp, #28]
   816ee:	da02      	bge.n	816f6 <_vfiprintf_r+0x24a>
   816f0:	426d      	negs	r5, r5
   816f2:	f043 0304 	orr.w	r3, r3, #4
   816f6:	f898 2000 	ldrb.w	r2, [r8]
   816fa:	e749      	b.n	81590 <_vfiprintf_r+0xe4>
   816fc:	9508      	str	r5, [sp, #32]
   816fe:	069e      	lsls	r6, r3, #26
   81700:	f100 845a 	bmi.w	81fb8 <_vfiprintf_r+0xb0c>
   81704:	9907      	ldr	r1, [sp, #28]
   81706:	06dd      	lsls	r5, r3, #27
   81708:	460a      	mov	r2, r1
   8170a:	f100 83ef 	bmi.w	81eec <_vfiprintf_r+0xa40>
   8170e:	0658      	lsls	r0, r3, #25
   81710:	f140 83ec 	bpl.w	81eec <_vfiprintf_r+0xa40>
   81714:	2700      	movs	r7, #0
   81716:	2201      	movs	r2, #1
   81718:	880e      	ldrh	r6, [r1, #0]
   8171a:	3104      	adds	r1, #4
   8171c:	9107      	str	r1, [sp, #28]
   8171e:	f04f 0100 	mov.w	r1, #0
   81722:	2500      	movs	r5, #0
   81724:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   81728:	1c61      	adds	r1, r4, #1
   8172a:	f000 8117 	beq.w	8195c <_vfiprintf_r+0x4b0>
   8172e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   81732:	9102      	str	r1, [sp, #8]
   81734:	ea56 0107 	orrs.w	r1, r6, r7
   81738:	f040 8115 	bne.w	81966 <_vfiprintf_r+0x4ba>
   8173c:	2c00      	cmp	r4, #0
   8173e:	f040 835b 	bne.w	81df8 <_vfiprintf_r+0x94c>
   81742:	2a00      	cmp	r2, #0
   81744:	f040 83b6 	bne.w	81eb4 <_vfiprintf_r+0xa08>
   81748:	f013 0301 	ands.w	r3, r3, #1
   8174c:	9305      	str	r3, [sp, #20]
   8174e:	f000 8455 	beq.w	81ffc <_vfiprintf_r+0xb50>
   81752:	2330      	movs	r3, #48	; 0x30
   81754:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   81758:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   8175c:	9b05      	ldr	r3, [sp, #20]
   8175e:	42a3      	cmp	r3, r4
   81760:	bfb8      	it	lt
   81762:	4623      	movlt	r3, r4
   81764:	9301      	str	r3, [sp, #4]
   81766:	b10d      	cbz	r5, 8176c <_vfiprintf_r+0x2c0>
   81768:	3301      	adds	r3, #1
   8176a:	9301      	str	r3, [sp, #4]
   8176c:	9b02      	ldr	r3, [sp, #8]
   8176e:	f013 0302 	ands.w	r3, r3, #2
   81772:	9309      	str	r3, [sp, #36]	; 0x24
   81774:	d002      	beq.n	8177c <_vfiprintf_r+0x2d0>
   81776:	9b01      	ldr	r3, [sp, #4]
   81778:	3302      	adds	r3, #2
   8177a:	9301      	str	r3, [sp, #4]
   8177c:	9b02      	ldr	r3, [sp, #8]
   8177e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   81782:	930a      	str	r3, [sp, #40]	; 0x28
   81784:	f040 8215 	bne.w	81bb2 <_vfiprintf_r+0x706>
   81788:	9b08      	ldr	r3, [sp, #32]
   8178a:	9a01      	ldr	r2, [sp, #4]
   8178c:	1a9d      	subs	r5, r3, r2
   8178e:	2d00      	cmp	r5, #0
   81790:	f340 820f 	ble.w	81bb2 <_vfiprintf_r+0x706>
   81794:	2d10      	cmp	r5, #16
   81796:	f340 8484 	ble.w	820a2 <_vfiprintf_r+0xbf6>
   8179a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8179c:	46ce      	mov	lr, r9
   8179e:	2710      	movs	r7, #16
   817a0:	46a1      	mov	r9, r4
   817a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   817a4:	4ec5      	ldr	r6, [pc, #788]	; (81abc <_vfiprintf_r+0x610>)
   817a6:	4619      	mov	r1, r3
   817a8:	9c06      	ldr	r4, [sp, #24]
   817aa:	e007      	b.n	817bc <_vfiprintf_r+0x310>
   817ac:	f101 0c02 	add.w	ip, r1, #2
   817b0:	4601      	mov	r1, r0
   817b2:	f10e 0e08 	add.w	lr, lr, #8
   817b6:	3d10      	subs	r5, #16
   817b8:	2d10      	cmp	r5, #16
   817ba:	dd11      	ble.n	817e0 <_vfiprintf_r+0x334>
   817bc:	1c48      	adds	r0, r1, #1
   817be:	3210      	adds	r2, #16
   817c0:	2807      	cmp	r0, #7
   817c2:	9211      	str	r2, [sp, #68]	; 0x44
   817c4:	e88e 00c0 	stmia.w	lr, {r6, r7}
   817c8:	9010      	str	r0, [sp, #64]	; 0x40
   817ca:	ddef      	ble.n	817ac <_vfiprintf_r+0x300>
   817cc:	2a00      	cmp	r2, #0
   817ce:	f040 81d9 	bne.w	81b84 <_vfiprintf_r+0x6d8>
   817d2:	3d10      	subs	r5, #16
   817d4:	2d10      	cmp	r5, #16
   817d6:	4611      	mov	r1, r2
   817d8:	f04f 0c01 	mov.w	ip, #1
   817dc:	46d6      	mov	lr, sl
   817de:	dced      	bgt.n	817bc <_vfiprintf_r+0x310>
   817e0:	464c      	mov	r4, r9
   817e2:	4661      	mov	r1, ip
   817e4:	46f1      	mov	r9, lr
   817e6:	442a      	add	r2, r5
   817e8:	2907      	cmp	r1, #7
   817ea:	9211      	str	r2, [sp, #68]	; 0x44
   817ec:	f8c9 6000 	str.w	r6, [r9]
   817f0:	f8c9 5004 	str.w	r5, [r9, #4]
   817f4:	9110      	str	r1, [sp, #64]	; 0x40
   817f6:	f300 82eb 	bgt.w	81dd0 <_vfiprintf_r+0x924>
   817fa:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   817fe:	f109 0908 	add.w	r9, r9, #8
   81802:	1c48      	adds	r0, r1, #1
   81804:	2d00      	cmp	r5, #0
   81806:	f040 81dc 	bne.w	81bc2 <_vfiprintf_r+0x716>
   8180a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8180c:	2b00      	cmp	r3, #0
   8180e:	f000 81f6 	beq.w	81bfe <_vfiprintf_r+0x752>
   81812:	2102      	movs	r1, #2
   81814:	ab0e      	add	r3, sp, #56	; 0x38
   81816:	440a      	add	r2, r1
   81818:	2807      	cmp	r0, #7
   8181a:	9211      	str	r2, [sp, #68]	; 0x44
   8181c:	9010      	str	r0, [sp, #64]	; 0x40
   8181e:	f8c9 1004 	str.w	r1, [r9, #4]
   81822:	f8c9 3000 	str.w	r3, [r9]
   81826:	f340 81e6 	ble.w	81bf6 <_vfiprintf_r+0x74a>
   8182a:	2a00      	cmp	r2, #0
   8182c:	f040 8395 	bne.w	81f5a <_vfiprintf_r+0xaae>
   81830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81832:	2001      	movs	r0, #1
   81834:	2b80      	cmp	r3, #128	; 0x80
   81836:	4611      	mov	r1, r2
   81838:	46d1      	mov	r9, sl
   8183a:	f040 81e4 	bne.w	81c06 <_vfiprintf_r+0x75a>
   8183e:	9b08      	ldr	r3, [sp, #32]
   81840:	9d01      	ldr	r5, [sp, #4]
   81842:	1b5e      	subs	r6, r3, r5
   81844:	2e00      	cmp	r6, #0
   81846:	f340 81de 	ble.w	81c06 <_vfiprintf_r+0x75a>
   8184a:	2e10      	cmp	r6, #16
   8184c:	f340 843c 	ble.w	820c8 <_vfiprintf_r+0xc1c>
   81850:	46cc      	mov	ip, r9
   81852:	2710      	movs	r7, #16
   81854:	46a1      	mov	r9, r4
   81856:	4d9a      	ldr	r5, [pc, #616]	; (81ac0 <_vfiprintf_r+0x614>)
   81858:	9c06      	ldr	r4, [sp, #24]
   8185a:	e007      	b.n	8186c <_vfiprintf_r+0x3c0>
   8185c:	f101 0e02 	add.w	lr, r1, #2
   81860:	4601      	mov	r1, r0
   81862:	f10c 0c08 	add.w	ip, ip, #8
   81866:	3e10      	subs	r6, #16
   81868:	2e10      	cmp	r6, #16
   8186a:	dd11      	ble.n	81890 <_vfiprintf_r+0x3e4>
   8186c:	1c48      	adds	r0, r1, #1
   8186e:	3210      	adds	r2, #16
   81870:	2807      	cmp	r0, #7
   81872:	9211      	str	r2, [sp, #68]	; 0x44
   81874:	e88c 00a0 	stmia.w	ip, {r5, r7}
   81878:	9010      	str	r0, [sp, #64]	; 0x40
   8187a:	ddef      	ble.n	8185c <_vfiprintf_r+0x3b0>
   8187c:	2a00      	cmp	r2, #0
   8187e:	f040 829b 	bne.w	81db8 <_vfiprintf_r+0x90c>
   81882:	3e10      	subs	r6, #16
   81884:	2e10      	cmp	r6, #16
   81886:	f04f 0e01 	mov.w	lr, #1
   8188a:	4611      	mov	r1, r2
   8188c:	46d4      	mov	ip, sl
   8188e:	dced      	bgt.n	8186c <_vfiprintf_r+0x3c0>
   81890:	464c      	mov	r4, r9
   81892:	46e1      	mov	r9, ip
   81894:	4432      	add	r2, r6
   81896:	f1be 0f07 	cmp.w	lr, #7
   8189a:	9211      	str	r2, [sp, #68]	; 0x44
   8189c:	e889 0060 	stmia.w	r9, {r5, r6}
   818a0:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   818a4:	f300 8366 	bgt.w	81f74 <_vfiprintf_r+0xac8>
   818a8:	f109 0908 	add.w	r9, r9, #8
   818ac:	f10e 0001 	add.w	r0, lr, #1
   818b0:	4671      	mov	r1, lr
   818b2:	e1a8      	b.n	81c06 <_vfiprintf_r+0x75a>
   818b4:	9508      	str	r5, [sp, #32]
   818b6:	f013 0220 	ands.w	r2, r3, #32
   818ba:	f040 8389 	bne.w	81fd0 <_vfiprintf_r+0xb24>
   818be:	f013 0110 	ands.w	r1, r3, #16
   818c2:	f040 8319 	bne.w	81ef8 <_vfiprintf_r+0xa4c>
   818c6:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   818ca:	f000 8315 	beq.w	81ef8 <_vfiprintf_r+0xa4c>
   818ce:	9807      	ldr	r0, [sp, #28]
   818d0:	460a      	mov	r2, r1
   818d2:	4601      	mov	r1, r0
   818d4:	3104      	adds	r1, #4
   818d6:	8806      	ldrh	r6, [r0, #0]
   818d8:	2700      	movs	r7, #0
   818da:	9107      	str	r1, [sp, #28]
   818dc:	e71f      	b.n	8171e <_vfiprintf_r+0x272>
   818de:	9508      	str	r5, [sp, #32]
   818e0:	f043 0310 	orr.w	r3, r3, #16
   818e4:	e7e7      	b.n	818b6 <_vfiprintf_r+0x40a>
   818e6:	9508      	str	r5, [sp, #32]
   818e8:	f043 0310 	orr.w	r3, r3, #16
   818ec:	e707      	b.n	816fe <_vfiprintf_r+0x252>
   818ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   818f2:	f898 2000 	ldrb.w	r2, [r8]
   818f6:	e64b      	b.n	81590 <_vfiprintf_r+0xe4>
   818f8:	2500      	movs	r5, #0
   818fa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   818fe:	f818 2b01 	ldrb.w	r2, [r8], #1
   81902:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   81906:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   8190a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   8190e:	2909      	cmp	r1, #9
   81910:	d9f5      	bls.n	818fe <_vfiprintf_r+0x452>
   81912:	e63f      	b.n	81594 <_vfiprintf_r+0xe8>
   81914:	9508      	str	r5, [sp, #32]
   81916:	2800      	cmp	r0, #0
   81918:	f040 8402 	bne.w	82120 <_vfiprintf_r+0xc74>
   8191c:	f043 0310 	orr.w	r3, r3, #16
   81920:	069e      	lsls	r6, r3, #26
   81922:	f100 833d 	bmi.w	81fa0 <_vfiprintf_r+0xaf4>
   81926:	9907      	ldr	r1, [sp, #28]
   81928:	06dd      	lsls	r5, r3, #27
   8192a:	460a      	mov	r2, r1
   8192c:	f100 82f0 	bmi.w	81f10 <_vfiprintf_r+0xa64>
   81930:	0658      	lsls	r0, r3, #25
   81932:	f140 82ed 	bpl.w	81f10 <_vfiprintf_r+0xa64>
   81936:	f9b1 6000 	ldrsh.w	r6, [r1]
   8193a:	3204      	adds	r2, #4
   8193c:	17f7      	asrs	r7, r6, #31
   8193e:	4630      	mov	r0, r6
   81940:	4639      	mov	r1, r7
   81942:	9207      	str	r2, [sp, #28]
   81944:	2800      	cmp	r0, #0
   81946:	f171 0200 	sbcs.w	r2, r1, #0
   8194a:	f2c0 835a 	blt.w	82002 <_vfiprintf_r+0xb56>
   8194e:	1c61      	adds	r1, r4, #1
   81950:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81954:	f04f 0201 	mov.w	r2, #1
   81958:	f47f aee9 	bne.w	8172e <_vfiprintf_r+0x282>
   8195c:	ea56 0107 	orrs.w	r1, r6, r7
   81960:	f000 824b 	beq.w	81dfa <_vfiprintf_r+0x94e>
   81964:	9302      	str	r3, [sp, #8]
   81966:	2a01      	cmp	r2, #1
   81968:	f000 828a 	beq.w	81e80 <_vfiprintf_r+0x9d4>
   8196c:	2a02      	cmp	r2, #2
   8196e:	f040 825a 	bne.w	81e26 <_vfiprintf_r+0x97a>
   81972:	46d3      	mov	fp, sl
   81974:	980b      	ldr	r0, [sp, #44]	; 0x2c
   81976:	0933      	lsrs	r3, r6, #4
   81978:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   8197c:	0939      	lsrs	r1, r7, #4
   8197e:	f006 020f 	and.w	r2, r6, #15
   81982:	460f      	mov	r7, r1
   81984:	461e      	mov	r6, r3
   81986:	5c83      	ldrb	r3, [r0, r2]
   81988:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   8198c:	ea56 0307 	orrs.w	r3, r6, r7
   81990:	d1f1      	bne.n	81976 <_vfiprintf_r+0x4ca>
   81992:	ebaa 030b 	sub.w	r3, sl, fp
   81996:	9305      	str	r3, [sp, #20]
   81998:	e6e0      	b.n	8175c <_vfiprintf_r+0x2b0>
   8199a:	2800      	cmp	r0, #0
   8199c:	f040 83bd 	bne.w	8211a <_vfiprintf_r+0xc6e>
   819a0:	0699      	lsls	r1, r3, #26
   819a2:	f100 8359 	bmi.w	82058 <_vfiprintf_r+0xbac>
   819a6:	06da      	lsls	r2, r3, #27
   819a8:	f100 80e5 	bmi.w	81b76 <_vfiprintf_r+0x6ca>
   819ac:	065b      	lsls	r3, r3, #25
   819ae:	f140 80e2 	bpl.w	81b76 <_vfiprintf_r+0x6ca>
   819b2:	9a07      	ldr	r2, [sp, #28]
   819b4:	6813      	ldr	r3, [r2, #0]
   819b6:	3204      	adds	r2, #4
   819b8:	9207      	str	r2, [sp, #28]
   819ba:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   819be:	801a      	strh	r2, [r3, #0]
   819c0:	e5b1      	b.n	81526 <_vfiprintf_r+0x7a>
   819c2:	2278      	movs	r2, #120	; 0x78
   819c4:	2130      	movs	r1, #48	; 0x30
   819c6:	9508      	str	r5, [sp, #32]
   819c8:	9d07      	ldr	r5, [sp, #28]
   819ca:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   819ce:	1d2a      	adds	r2, r5, #4
   819d0:	9207      	str	r2, [sp, #28]
   819d2:	4a3c      	ldr	r2, [pc, #240]	; (81ac4 <_vfiprintf_r+0x618>)
   819d4:	682e      	ldr	r6, [r5, #0]
   819d6:	920b      	str	r2, [sp, #44]	; 0x2c
   819d8:	f043 0302 	orr.w	r3, r3, #2
   819dc:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   819e0:	2700      	movs	r7, #0
   819e2:	2202      	movs	r2, #2
   819e4:	e69b      	b.n	8171e <_vfiprintf_r+0x272>
   819e6:	9508      	str	r5, [sp, #32]
   819e8:	2800      	cmp	r0, #0
   819ea:	d099      	beq.n	81920 <_vfiprintf_r+0x474>
   819ec:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   819f0:	e796      	b.n	81920 <_vfiprintf_r+0x474>
   819f2:	f898 2000 	ldrb.w	r2, [r8]
   819f6:	2e00      	cmp	r6, #0
   819f8:	f47f adca 	bne.w	81590 <_vfiprintf_r+0xe4>
   819fc:	2001      	movs	r0, #1
   819fe:	2620      	movs	r6, #32
   81a00:	e5c6      	b.n	81590 <_vfiprintf_r+0xe4>
   81a02:	f043 0301 	orr.w	r3, r3, #1
   81a06:	f898 2000 	ldrb.w	r2, [r8]
   81a0a:	e5c1      	b.n	81590 <_vfiprintf_r+0xe4>
   81a0c:	9508      	str	r5, [sp, #32]
   81a0e:	2800      	cmp	r0, #0
   81a10:	f040 8380 	bne.w	82114 <_vfiprintf_r+0xc68>
   81a14:	492b      	ldr	r1, [pc, #172]	; (81ac4 <_vfiprintf_r+0x618>)
   81a16:	910b      	str	r1, [sp, #44]	; 0x2c
   81a18:	069f      	lsls	r7, r3, #26
   81a1a:	f100 82e5 	bmi.w	81fe8 <_vfiprintf_r+0xb3c>
   81a1e:	9807      	ldr	r0, [sp, #28]
   81a20:	06de      	lsls	r6, r3, #27
   81a22:	4601      	mov	r1, r0
   81a24:	f100 826f 	bmi.w	81f06 <_vfiprintf_r+0xa5a>
   81a28:	065d      	lsls	r5, r3, #25
   81a2a:	f140 826c 	bpl.w	81f06 <_vfiprintf_r+0xa5a>
   81a2e:	2700      	movs	r7, #0
   81a30:	3104      	adds	r1, #4
   81a32:	8806      	ldrh	r6, [r0, #0]
   81a34:	9107      	str	r1, [sp, #28]
   81a36:	07d8      	lsls	r0, r3, #31
   81a38:	f140 8220 	bpl.w	81e7c <_vfiprintf_r+0x9d0>
   81a3c:	ea56 0107 	orrs.w	r1, r6, r7
   81a40:	f000 821c 	beq.w	81e7c <_vfiprintf_r+0x9d0>
   81a44:	2130      	movs	r1, #48	; 0x30
   81a46:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   81a4a:	f043 0302 	orr.w	r3, r3, #2
   81a4e:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   81a52:	2202      	movs	r2, #2
   81a54:	e663      	b.n	8171e <_vfiprintf_r+0x272>
   81a56:	9508      	str	r5, [sp, #32]
   81a58:	2800      	cmp	r0, #0
   81a5a:	f040 8355 	bne.w	82108 <_vfiprintf_r+0xc5c>
   81a5e:	491a      	ldr	r1, [pc, #104]	; (81ac8 <_vfiprintf_r+0x61c>)
   81a60:	910b      	str	r1, [sp, #44]	; 0x2c
   81a62:	e7d9      	b.n	81a18 <_vfiprintf_r+0x56c>
   81a64:	2201      	movs	r2, #1
   81a66:	9807      	ldr	r0, [sp, #28]
   81a68:	4611      	mov	r1, r2
   81a6a:	9201      	str	r2, [sp, #4]
   81a6c:	6802      	ldr	r2, [r0, #0]
   81a6e:	f04f 0400 	mov.w	r4, #0
   81a72:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81a76:	4602      	mov	r2, r0
   81a78:	3204      	adds	r2, #4
   81a7a:	9508      	str	r5, [sp, #32]
   81a7c:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   81a80:	9105      	str	r1, [sp, #20]
   81a82:	9207      	str	r2, [sp, #28]
   81a84:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   81a88:	9302      	str	r3, [sp, #8]
   81a8a:	2400      	movs	r4, #0
   81a8c:	e66e      	b.n	8176c <_vfiprintf_r+0x2c0>
   81a8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81a92:	f898 2000 	ldrb.w	r2, [r8]
   81a96:	e57b      	b.n	81590 <_vfiprintf_r+0xe4>
   81a98:	f898 2000 	ldrb.w	r2, [r8]
   81a9c:	2a6c      	cmp	r2, #108	; 0x6c
   81a9e:	bf03      	ittte	eq
   81aa0:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   81aa4:	f043 0320 	orreq.w	r3, r3, #32
   81aa8:	f108 0801 	addeq.w	r8, r8, #1
   81aac:	f043 0310 	orrne.w	r3, r3, #16
   81ab0:	e56e      	b.n	81590 <_vfiprintf_r+0xe4>
   81ab2:	f898 2000 	ldrb.w	r2, [r8]
   81ab6:	2001      	movs	r0, #1
   81ab8:	262b      	movs	r6, #43	; 0x2b
   81aba:	e569      	b.n	81590 <_vfiprintf_r+0xe4>
   81abc:	00084084 	.word	0x00084084
   81ac0:	00084094 	.word	0x00084094
   81ac4:	00084068 	.word	0x00084068
   81ac8:	00084054 	.word	0x00084054
   81acc:	f04f 0200 	mov.w	r2, #0
   81ad0:	9907      	ldr	r1, [sp, #28]
   81ad2:	9508      	str	r5, [sp, #32]
   81ad4:	f8d1 b000 	ldr.w	fp, [r1]
   81ad8:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   81adc:	1d0d      	adds	r5, r1, #4
   81ade:	f1bb 0f00 	cmp.w	fp, #0
   81ae2:	f000 82e4 	beq.w	820ae <_vfiprintf_r+0xc02>
   81ae6:	1c67      	adds	r7, r4, #1
   81ae8:	f000 82c3 	beq.w	82072 <_vfiprintf_r+0xbc6>
   81aec:	4622      	mov	r2, r4
   81aee:	2100      	movs	r1, #0
   81af0:	4658      	mov	r0, fp
   81af2:	9301      	str	r3, [sp, #4]
   81af4:	f001 fbc6 	bl	83284 <memchr>
   81af8:	9b01      	ldr	r3, [sp, #4]
   81afa:	2800      	cmp	r0, #0
   81afc:	f000 82e8 	beq.w	820d0 <_vfiprintf_r+0xc24>
   81b00:	eba0 020b 	sub.w	r2, r0, fp
   81b04:	9507      	str	r5, [sp, #28]
   81b06:	9205      	str	r2, [sp, #20]
   81b08:	9302      	str	r3, [sp, #8]
   81b0a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81b0e:	2400      	movs	r4, #0
   81b10:	e624      	b.n	8175c <_vfiprintf_r+0x2b0>
   81b12:	f898 2000 	ldrb.w	r2, [r8]
   81b16:	f108 0701 	add.w	r7, r8, #1
   81b1a:	2a2a      	cmp	r2, #42	; 0x2a
   81b1c:	f000 82e9 	beq.w	820f2 <_vfiprintf_r+0xc46>
   81b20:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81b24:	2909      	cmp	r1, #9
   81b26:	46b8      	mov	r8, r7
   81b28:	f04f 0400 	mov.w	r4, #0
   81b2c:	f63f ad32 	bhi.w	81594 <_vfiprintf_r+0xe8>
   81b30:	f818 2b01 	ldrb.w	r2, [r8], #1
   81b34:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   81b38:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   81b3c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81b40:	2909      	cmp	r1, #9
   81b42:	d9f5      	bls.n	81b30 <_vfiprintf_r+0x684>
   81b44:	e526      	b.n	81594 <_vfiprintf_r+0xe8>
   81b46:	f043 0320 	orr.w	r3, r3, #32
   81b4a:	f898 2000 	ldrb.w	r2, [r8]
   81b4e:	e51f      	b.n	81590 <_vfiprintf_r+0xe4>
   81b50:	9508      	str	r5, [sp, #32]
   81b52:	2800      	cmp	r0, #0
   81b54:	f040 82db 	bne.w	8210e <_vfiprintf_r+0xc62>
   81b58:	2a00      	cmp	r2, #0
   81b5a:	f000 80f1 	beq.w	81d40 <_vfiprintf_r+0x894>
   81b5e:	2101      	movs	r1, #1
   81b60:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81b64:	f04f 0200 	mov.w	r2, #0
   81b68:	9101      	str	r1, [sp, #4]
   81b6a:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   81b6e:	9105      	str	r1, [sp, #20]
   81b70:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   81b74:	e788      	b.n	81a88 <_vfiprintf_r+0x5dc>
   81b76:	9a07      	ldr	r2, [sp, #28]
   81b78:	6813      	ldr	r3, [r2, #0]
   81b7a:	3204      	adds	r2, #4
   81b7c:	9207      	str	r2, [sp, #28]
   81b7e:	9a03      	ldr	r2, [sp, #12]
   81b80:	601a      	str	r2, [r3, #0]
   81b82:	e4d0      	b.n	81526 <_vfiprintf_r+0x7a>
   81b84:	aa0f      	add	r2, sp, #60	; 0x3c
   81b86:	9904      	ldr	r1, [sp, #16]
   81b88:	4620      	mov	r0, r4
   81b8a:	f7ff fc4f 	bl	8142c <__sprint_r.part.0>
   81b8e:	2800      	cmp	r0, #0
   81b90:	f040 8143 	bne.w	81e1a <_vfiprintf_r+0x96e>
   81b94:	9910      	ldr	r1, [sp, #64]	; 0x40
   81b96:	46d6      	mov	lr, sl
   81b98:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81b9a:	f101 0c01 	add.w	ip, r1, #1
   81b9e:	e60a      	b.n	817b6 <_vfiprintf_r+0x30a>
   81ba0:	aa0f      	add	r2, sp, #60	; 0x3c
   81ba2:	9904      	ldr	r1, [sp, #16]
   81ba4:	9806      	ldr	r0, [sp, #24]
   81ba6:	f7ff fc41 	bl	8142c <__sprint_r.part.0>
   81baa:	2800      	cmp	r0, #0
   81bac:	f040 8135 	bne.w	81e1a <_vfiprintf_r+0x96e>
   81bb0:	46d1      	mov	r9, sl
   81bb2:	9910      	ldr	r1, [sp, #64]	; 0x40
   81bb4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81bb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81bba:	1c48      	adds	r0, r1, #1
   81bbc:	2d00      	cmp	r5, #0
   81bbe:	f43f ae24 	beq.w	8180a <_vfiprintf_r+0x35e>
   81bc2:	2101      	movs	r1, #1
   81bc4:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   81bc8:	440a      	add	r2, r1
   81bca:	2807      	cmp	r0, #7
   81bcc:	9211      	str	r2, [sp, #68]	; 0x44
   81bce:	9010      	str	r0, [sp, #64]	; 0x40
   81bd0:	f8c9 1004 	str.w	r1, [r9, #4]
   81bd4:	f8c9 5000 	str.w	r5, [r9]
   81bd8:	f340 8109 	ble.w	81dee <_vfiprintf_r+0x942>
   81bdc:	2a00      	cmp	r2, #0
   81bde:	f040 81af 	bne.w	81f40 <_vfiprintf_r+0xa94>
   81be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81be4:	2b00      	cmp	r3, #0
   81be6:	f43f ae23 	beq.w	81830 <_vfiprintf_r+0x384>
   81bea:	2202      	movs	r2, #2
   81bec:	4608      	mov	r0, r1
   81bee:	46d1      	mov	r9, sl
   81bf0:	ab0e      	add	r3, sp, #56	; 0x38
   81bf2:	921d      	str	r2, [sp, #116]	; 0x74
   81bf4:	931c      	str	r3, [sp, #112]	; 0x70
   81bf6:	4601      	mov	r1, r0
   81bf8:	f109 0908 	add.w	r9, r9, #8
   81bfc:	3001      	adds	r0, #1
   81bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81c00:	2b80      	cmp	r3, #128	; 0x80
   81c02:	f43f ae1c 	beq.w	8183e <_vfiprintf_r+0x392>
   81c06:	9b05      	ldr	r3, [sp, #20]
   81c08:	1ae4      	subs	r4, r4, r3
   81c0a:	2c00      	cmp	r4, #0
   81c0c:	dd2f      	ble.n	81c6e <_vfiprintf_r+0x7c2>
   81c0e:	2c10      	cmp	r4, #16
   81c10:	f340 8220 	ble.w	82054 <_vfiprintf_r+0xba8>
   81c14:	46ce      	mov	lr, r9
   81c16:	2610      	movs	r6, #16
   81c18:	4db2      	ldr	r5, [pc, #712]	; (81ee4 <_vfiprintf_r+0xa38>)
   81c1a:	9f06      	ldr	r7, [sp, #24]
   81c1c:	f8dd 9010 	ldr.w	r9, [sp, #16]
   81c20:	e006      	b.n	81c30 <_vfiprintf_r+0x784>
   81c22:	1c88      	adds	r0, r1, #2
   81c24:	4619      	mov	r1, r3
   81c26:	f10e 0e08 	add.w	lr, lr, #8
   81c2a:	3c10      	subs	r4, #16
   81c2c:	2c10      	cmp	r4, #16
   81c2e:	dd10      	ble.n	81c52 <_vfiprintf_r+0x7a6>
   81c30:	1c4b      	adds	r3, r1, #1
   81c32:	3210      	adds	r2, #16
   81c34:	2b07      	cmp	r3, #7
   81c36:	9211      	str	r2, [sp, #68]	; 0x44
   81c38:	e88e 0060 	stmia.w	lr, {r5, r6}
   81c3c:	9310      	str	r3, [sp, #64]	; 0x40
   81c3e:	ddf0      	ble.n	81c22 <_vfiprintf_r+0x776>
   81c40:	2a00      	cmp	r2, #0
   81c42:	d165      	bne.n	81d10 <_vfiprintf_r+0x864>
   81c44:	3c10      	subs	r4, #16
   81c46:	2c10      	cmp	r4, #16
   81c48:	f04f 0001 	mov.w	r0, #1
   81c4c:	4611      	mov	r1, r2
   81c4e:	46d6      	mov	lr, sl
   81c50:	dcee      	bgt.n	81c30 <_vfiprintf_r+0x784>
   81c52:	46f1      	mov	r9, lr
   81c54:	4422      	add	r2, r4
   81c56:	2807      	cmp	r0, #7
   81c58:	9211      	str	r2, [sp, #68]	; 0x44
   81c5a:	f8c9 5000 	str.w	r5, [r9]
   81c5e:	f8c9 4004 	str.w	r4, [r9, #4]
   81c62:	9010      	str	r0, [sp, #64]	; 0x40
   81c64:	f300 8085 	bgt.w	81d72 <_vfiprintf_r+0x8c6>
   81c68:	f109 0908 	add.w	r9, r9, #8
   81c6c:	3001      	adds	r0, #1
   81c6e:	9905      	ldr	r1, [sp, #20]
   81c70:	2807      	cmp	r0, #7
   81c72:	440a      	add	r2, r1
   81c74:	9211      	str	r2, [sp, #68]	; 0x44
   81c76:	f8c9 b000 	str.w	fp, [r9]
   81c7a:	f8c9 1004 	str.w	r1, [r9, #4]
   81c7e:	9010      	str	r0, [sp, #64]	; 0x40
   81c80:	f340 8082 	ble.w	81d88 <_vfiprintf_r+0x8dc>
   81c84:	2a00      	cmp	r2, #0
   81c86:	f040 8118 	bne.w	81eba <_vfiprintf_r+0xa0e>
   81c8a:	9b02      	ldr	r3, [sp, #8]
   81c8c:	9210      	str	r2, [sp, #64]	; 0x40
   81c8e:	0758      	lsls	r0, r3, #29
   81c90:	d535      	bpl.n	81cfe <_vfiprintf_r+0x852>
   81c92:	9b08      	ldr	r3, [sp, #32]
   81c94:	9901      	ldr	r1, [sp, #4]
   81c96:	1a5c      	subs	r4, r3, r1
   81c98:	2c00      	cmp	r4, #0
   81c9a:	f340 80e7 	ble.w	81e6c <_vfiprintf_r+0x9c0>
   81c9e:	46d1      	mov	r9, sl
   81ca0:	2c10      	cmp	r4, #16
   81ca2:	f340 820d 	ble.w	820c0 <_vfiprintf_r+0xc14>
   81ca6:	2510      	movs	r5, #16
   81ca8:	9910      	ldr	r1, [sp, #64]	; 0x40
   81caa:	4e8f      	ldr	r6, [pc, #572]	; (81ee8 <_vfiprintf_r+0xa3c>)
   81cac:	9f06      	ldr	r7, [sp, #24]
   81cae:	f8dd b010 	ldr.w	fp, [sp, #16]
   81cb2:	e006      	b.n	81cc2 <_vfiprintf_r+0x816>
   81cb4:	1c88      	adds	r0, r1, #2
   81cb6:	4619      	mov	r1, r3
   81cb8:	f109 0908 	add.w	r9, r9, #8
   81cbc:	3c10      	subs	r4, #16
   81cbe:	2c10      	cmp	r4, #16
   81cc0:	dd11      	ble.n	81ce6 <_vfiprintf_r+0x83a>
   81cc2:	1c4b      	adds	r3, r1, #1
   81cc4:	3210      	adds	r2, #16
   81cc6:	2b07      	cmp	r3, #7
   81cc8:	9211      	str	r2, [sp, #68]	; 0x44
   81cca:	f8c9 6000 	str.w	r6, [r9]
   81cce:	f8c9 5004 	str.w	r5, [r9, #4]
   81cd2:	9310      	str	r3, [sp, #64]	; 0x40
   81cd4:	ddee      	ble.n	81cb4 <_vfiprintf_r+0x808>
   81cd6:	bb42      	cbnz	r2, 81d2a <_vfiprintf_r+0x87e>
   81cd8:	3c10      	subs	r4, #16
   81cda:	2c10      	cmp	r4, #16
   81cdc:	f04f 0001 	mov.w	r0, #1
   81ce0:	4611      	mov	r1, r2
   81ce2:	46d1      	mov	r9, sl
   81ce4:	dced      	bgt.n	81cc2 <_vfiprintf_r+0x816>
   81ce6:	4422      	add	r2, r4
   81ce8:	2807      	cmp	r0, #7
   81cea:	9211      	str	r2, [sp, #68]	; 0x44
   81cec:	f8c9 6000 	str.w	r6, [r9]
   81cf0:	f8c9 4004 	str.w	r4, [r9, #4]
   81cf4:	9010      	str	r0, [sp, #64]	; 0x40
   81cf6:	dd51      	ble.n	81d9c <_vfiprintf_r+0x8f0>
   81cf8:	2a00      	cmp	r2, #0
   81cfa:	f040 819a 	bne.w	82032 <_vfiprintf_r+0xb86>
   81cfe:	9b03      	ldr	r3, [sp, #12]
   81d00:	9a08      	ldr	r2, [sp, #32]
   81d02:	9901      	ldr	r1, [sp, #4]
   81d04:	428a      	cmp	r2, r1
   81d06:	bfac      	ite	ge
   81d08:	189b      	addge	r3, r3, r2
   81d0a:	185b      	addlt	r3, r3, r1
   81d0c:	9303      	str	r3, [sp, #12]
   81d0e:	e04e      	b.n	81dae <_vfiprintf_r+0x902>
   81d10:	aa0f      	add	r2, sp, #60	; 0x3c
   81d12:	4649      	mov	r1, r9
   81d14:	4638      	mov	r0, r7
   81d16:	f7ff fb89 	bl	8142c <__sprint_r.part.0>
   81d1a:	2800      	cmp	r0, #0
   81d1c:	f040 813e 	bne.w	81f9c <_vfiprintf_r+0xaf0>
   81d20:	9910      	ldr	r1, [sp, #64]	; 0x40
   81d22:	46d6      	mov	lr, sl
   81d24:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81d26:	1c48      	adds	r0, r1, #1
   81d28:	e77f      	b.n	81c2a <_vfiprintf_r+0x77e>
   81d2a:	aa0f      	add	r2, sp, #60	; 0x3c
   81d2c:	4659      	mov	r1, fp
   81d2e:	4638      	mov	r0, r7
   81d30:	f7ff fb7c 	bl	8142c <__sprint_r.part.0>
   81d34:	b960      	cbnz	r0, 81d50 <_vfiprintf_r+0x8a4>
   81d36:	9910      	ldr	r1, [sp, #64]	; 0x40
   81d38:	46d1      	mov	r9, sl
   81d3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81d3c:	1c48      	adds	r0, r1, #1
   81d3e:	e7bd      	b.n	81cbc <_vfiprintf_r+0x810>
   81d40:	9b11      	ldr	r3, [sp, #68]	; 0x44
   81d42:	f8dd b010 	ldr.w	fp, [sp, #16]
   81d46:	2b00      	cmp	r3, #0
   81d48:	f040 81ca 	bne.w	820e0 <_vfiprintf_r+0xc34>
   81d4c:	2300      	movs	r3, #0
   81d4e:	9310      	str	r3, [sp, #64]	; 0x40
   81d50:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81d54:	f013 0f01 	tst.w	r3, #1
   81d58:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   81d5c:	d102      	bne.n	81d64 <_vfiprintf_r+0x8b8>
   81d5e:	059a      	lsls	r2, r3, #22
   81d60:	f140 80dd 	bpl.w	81f1e <_vfiprintf_r+0xa72>
   81d64:	065b      	lsls	r3, r3, #25
   81d66:	f53f acad 	bmi.w	816c4 <_vfiprintf_r+0x218>
   81d6a:	9803      	ldr	r0, [sp, #12]
   81d6c:	b02d      	add	sp, #180	; 0xb4
   81d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81d72:	2a00      	cmp	r2, #0
   81d74:	f040 8105 	bne.w	81f82 <_vfiprintf_r+0xad6>
   81d78:	2301      	movs	r3, #1
   81d7a:	46d1      	mov	r9, sl
   81d7c:	9a05      	ldr	r2, [sp, #20]
   81d7e:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   81d82:	921d      	str	r2, [sp, #116]	; 0x74
   81d84:	9211      	str	r2, [sp, #68]	; 0x44
   81d86:	9310      	str	r3, [sp, #64]	; 0x40
   81d88:	f109 0908 	add.w	r9, r9, #8
   81d8c:	9b02      	ldr	r3, [sp, #8]
   81d8e:	0759      	lsls	r1, r3, #29
   81d90:	d504      	bpl.n	81d9c <_vfiprintf_r+0x8f0>
   81d92:	9b08      	ldr	r3, [sp, #32]
   81d94:	9901      	ldr	r1, [sp, #4]
   81d96:	1a5c      	subs	r4, r3, r1
   81d98:	2c00      	cmp	r4, #0
   81d9a:	dc81      	bgt.n	81ca0 <_vfiprintf_r+0x7f4>
   81d9c:	9b03      	ldr	r3, [sp, #12]
   81d9e:	9908      	ldr	r1, [sp, #32]
   81da0:	9801      	ldr	r0, [sp, #4]
   81da2:	4281      	cmp	r1, r0
   81da4:	bfac      	ite	ge
   81da6:	185b      	addge	r3, r3, r1
   81da8:	181b      	addlt	r3, r3, r0
   81daa:	9303      	str	r3, [sp, #12]
   81dac:	bb72      	cbnz	r2, 81e0c <_vfiprintf_r+0x960>
   81dae:	2300      	movs	r3, #0
   81db0:	46d1      	mov	r9, sl
   81db2:	9310      	str	r3, [sp, #64]	; 0x40
   81db4:	f7ff bbb7 	b.w	81526 <_vfiprintf_r+0x7a>
   81db8:	aa0f      	add	r2, sp, #60	; 0x3c
   81dba:	9904      	ldr	r1, [sp, #16]
   81dbc:	4620      	mov	r0, r4
   81dbe:	f7ff fb35 	bl	8142c <__sprint_r.part.0>
   81dc2:	bb50      	cbnz	r0, 81e1a <_vfiprintf_r+0x96e>
   81dc4:	9910      	ldr	r1, [sp, #64]	; 0x40
   81dc6:	46d4      	mov	ip, sl
   81dc8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81dca:	f101 0e01 	add.w	lr, r1, #1
   81dce:	e54a      	b.n	81866 <_vfiprintf_r+0x3ba>
   81dd0:	2a00      	cmp	r2, #0
   81dd2:	f47f aee5 	bne.w	81ba0 <_vfiprintf_r+0x6f4>
   81dd6:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   81dda:	2900      	cmp	r1, #0
   81ddc:	f000 811a 	beq.w	82014 <_vfiprintf_r+0xb68>
   81de0:	2201      	movs	r2, #1
   81de2:	46d1      	mov	r9, sl
   81de4:	4610      	mov	r0, r2
   81de6:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   81dea:	921d      	str	r2, [sp, #116]	; 0x74
   81dec:	911c      	str	r1, [sp, #112]	; 0x70
   81dee:	4601      	mov	r1, r0
   81df0:	f109 0908 	add.w	r9, r9, #8
   81df4:	3001      	adds	r0, #1
   81df6:	e508      	b.n	8180a <_vfiprintf_r+0x35e>
   81df8:	9b02      	ldr	r3, [sp, #8]
   81dfa:	2a01      	cmp	r2, #1
   81dfc:	f000 8097 	beq.w	81f2e <_vfiprintf_r+0xa82>
   81e00:	2a02      	cmp	r2, #2
   81e02:	d10d      	bne.n	81e20 <_vfiprintf_r+0x974>
   81e04:	9302      	str	r3, [sp, #8]
   81e06:	2600      	movs	r6, #0
   81e08:	2700      	movs	r7, #0
   81e0a:	e5b2      	b.n	81972 <_vfiprintf_r+0x4c6>
   81e0c:	aa0f      	add	r2, sp, #60	; 0x3c
   81e0e:	9904      	ldr	r1, [sp, #16]
   81e10:	9806      	ldr	r0, [sp, #24]
   81e12:	f7ff fb0b 	bl	8142c <__sprint_r.part.0>
   81e16:	2800      	cmp	r0, #0
   81e18:	d0c9      	beq.n	81dae <_vfiprintf_r+0x902>
   81e1a:	f8dd b010 	ldr.w	fp, [sp, #16]
   81e1e:	e797      	b.n	81d50 <_vfiprintf_r+0x8a4>
   81e20:	2600      	movs	r6, #0
   81e22:	2700      	movs	r7, #0
   81e24:	9302      	str	r3, [sp, #8]
   81e26:	4651      	mov	r1, sl
   81e28:	e000      	b.n	81e2c <_vfiprintf_r+0x980>
   81e2a:	4659      	mov	r1, fp
   81e2c:	08f2      	lsrs	r2, r6, #3
   81e2e:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   81e32:	08f8      	lsrs	r0, r7, #3
   81e34:	f006 0307 	and.w	r3, r6, #7
   81e38:	4607      	mov	r7, r0
   81e3a:	4616      	mov	r6, r2
   81e3c:	3330      	adds	r3, #48	; 0x30
   81e3e:	ea56 0207 	orrs.w	r2, r6, r7
   81e42:	f801 3c01 	strb.w	r3, [r1, #-1]
   81e46:	f101 3bff 	add.w	fp, r1, #4294967295
   81e4a:	d1ee      	bne.n	81e2a <_vfiprintf_r+0x97e>
   81e4c:	9a02      	ldr	r2, [sp, #8]
   81e4e:	07d6      	lsls	r6, r2, #31
   81e50:	f57f ad9f 	bpl.w	81992 <_vfiprintf_r+0x4e6>
   81e54:	2b30      	cmp	r3, #48	; 0x30
   81e56:	f43f ad9c 	beq.w	81992 <_vfiprintf_r+0x4e6>
   81e5a:	2330      	movs	r3, #48	; 0x30
   81e5c:	3902      	subs	r1, #2
   81e5e:	f80b 3c01 	strb.w	r3, [fp, #-1]
   81e62:	ebaa 0301 	sub.w	r3, sl, r1
   81e66:	9305      	str	r3, [sp, #20]
   81e68:	468b      	mov	fp, r1
   81e6a:	e477      	b.n	8175c <_vfiprintf_r+0x2b0>
   81e6c:	9b03      	ldr	r3, [sp, #12]
   81e6e:	9a08      	ldr	r2, [sp, #32]
   81e70:	428a      	cmp	r2, r1
   81e72:	bfac      	ite	ge
   81e74:	189b      	addge	r3, r3, r2
   81e76:	185b      	addlt	r3, r3, r1
   81e78:	9303      	str	r3, [sp, #12]
   81e7a:	e798      	b.n	81dae <_vfiprintf_r+0x902>
   81e7c:	2202      	movs	r2, #2
   81e7e:	e44e      	b.n	8171e <_vfiprintf_r+0x272>
   81e80:	2f00      	cmp	r7, #0
   81e82:	bf08      	it	eq
   81e84:	2e0a      	cmpeq	r6, #10
   81e86:	d351      	bcc.n	81f2c <_vfiprintf_r+0xa80>
   81e88:	46d3      	mov	fp, sl
   81e8a:	4630      	mov	r0, r6
   81e8c:	4639      	mov	r1, r7
   81e8e:	220a      	movs	r2, #10
   81e90:	2300      	movs	r3, #0
   81e92:	f001 ff29 	bl	83ce8 <__aeabi_uldivmod>
   81e96:	3230      	adds	r2, #48	; 0x30
   81e98:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   81e9c:	4630      	mov	r0, r6
   81e9e:	4639      	mov	r1, r7
   81ea0:	2300      	movs	r3, #0
   81ea2:	220a      	movs	r2, #10
   81ea4:	f001 ff20 	bl	83ce8 <__aeabi_uldivmod>
   81ea8:	4606      	mov	r6, r0
   81eaa:	460f      	mov	r7, r1
   81eac:	ea56 0307 	orrs.w	r3, r6, r7
   81eb0:	d1eb      	bne.n	81e8a <_vfiprintf_r+0x9de>
   81eb2:	e56e      	b.n	81992 <_vfiprintf_r+0x4e6>
   81eb4:	9405      	str	r4, [sp, #20]
   81eb6:	46d3      	mov	fp, sl
   81eb8:	e450      	b.n	8175c <_vfiprintf_r+0x2b0>
   81eba:	aa0f      	add	r2, sp, #60	; 0x3c
   81ebc:	9904      	ldr	r1, [sp, #16]
   81ebe:	9806      	ldr	r0, [sp, #24]
   81ec0:	f7ff fab4 	bl	8142c <__sprint_r.part.0>
   81ec4:	2800      	cmp	r0, #0
   81ec6:	d1a8      	bne.n	81e1a <_vfiprintf_r+0x96e>
   81ec8:	46d1      	mov	r9, sl
   81eca:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81ecc:	e75e      	b.n	81d8c <_vfiprintf_r+0x8e0>
   81ece:	aa0f      	add	r2, sp, #60	; 0x3c
   81ed0:	9904      	ldr	r1, [sp, #16]
   81ed2:	9806      	ldr	r0, [sp, #24]
   81ed4:	f7ff faaa 	bl	8142c <__sprint_r.part.0>
   81ed8:	2800      	cmp	r0, #0
   81eda:	d19e      	bne.n	81e1a <_vfiprintf_r+0x96e>
   81edc:	46d1      	mov	r9, sl
   81ede:	f7ff bbbb 	b.w	81658 <_vfiprintf_r+0x1ac>
   81ee2:	bf00      	nop
   81ee4:	00084094 	.word	0x00084094
   81ee8:	00084084 	.word	0x00084084
   81eec:	3104      	adds	r1, #4
   81eee:	6816      	ldr	r6, [r2, #0]
   81ef0:	2700      	movs	r7, #0
   81ef2:	2201      	movs	r2, #1
   81ef4:	9107      	str	r1, [sp, #28]
   81ef6:	e412      	b.n	8171e <_vfiprintf_r+0x272>
   81ef8:	9807      	ldr	r0, [sp, #28]
   81efa:	2700      	movs	r7, #0
   81efc:	4601      	mov	r1, r0
   81efe:	3104      	adds	r1, #4
   81f00:	6806      	ldr	r6, [r0, #0]
   81f02:	9107      	str	r1, [sp, #28]
   81f04:	e40b      	b.n	8171e <_vfiprintf_r+0x272>
   81f06:	680e      	ldr	r6, [r1, #0]
   81f08:	3104      	adds	r1, #4
   81f0a:	9107      	str	r1, [sp, #28]
   81f0c:	2700      	movs	r7, #0
   81f0e:	e592      	b.n	81a36 <_vfiprintf_r+0x58a>
   81f10:	6816      	ldr	r6, [r2, #0]
   81f12:	3204      	adds	r2, #4
   81f14:	17f7      	asrs	r7, r6, #31
   81f16:	9207      	str	r2, [sp, #28]
   81f18:	4630      	mov	r0, r6
   81f1a:	4639      	mov	r1, r7
   81f1c:	e512      	b.n	81944 <_vfiprintf_r+0x498>
   81f1e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81f22:	f000 fe75 	bl	82c10 <__retarget_lock_release_recursive>
   81f26:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   81f2a:	e71b      	b.n	81d64 <_vfiprintf_r+0x8b8>
   81f2c:	9b02      	ldr	r3, [sp, #8]
   81f2e:	9302      	str	r3, [sp, #8]
   81f30:	2301      	movs	r3, #1
   81f32:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   81f36:	3630      	adds	r6, #48	; 0x30
   81f38:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   81f3c:	9305      	str	r3, [sp, #20]
   81f3e:	e40d      	b.n	8175c <_vfiprintf_r+0x2b0>
   81f40:	aa0f      	add	r2, sp, #60	; 0x3c
   81f42:	9904      	ldr	r1, [sp, #16]
   81f44:	9806      	ldr	r0, [sp, #24]
   81f46:	f7ff fa71 	bl	8142c <__sprint_r.part.0>
   81f4a:	2800      	cmp	r0, #0
   81f4c:	f47f af65 	bne.w	81e1a <_vfiprintf_r+0x96e>
   81f50:	9910      	ldr	r1, [sp, #64]	; 0x40
   81f52:	46d1      	mov	r9, sl
   81f54:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81f56:	1c48      	adds	r0, r1, #1
   81f58:	e457      	b.n	8180a <_vfiprintf_r+0x35e>
   81f5a:	aa0f      	add	r2, sp, #60	; 0x3c
   81f5c:	9904      	ldr	r1, [sp, #16]
   81f5e:	9806      	ldr	r0, [sp, #24]
   81f60:	f7ff fa64 	bl	8142c <__sprint_r.part.0>
   81f64:	2800      	cmp	r0, #0
   81f66:	f47f af58 	bne.w	81e1a <_vfiprintf_r+0x96e>
   81f6a:	9910      	ldr	r1, [sp, #64]	; 0x40
   81f6c:	46d1      	mov	r9, sl
   81f6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81f70:	1c48      	adds	r0, r1, #1
   81f72:	e644      	b.n	81bfe <_vfiprintf_r+0x752>
   81f74:	2a00      	cmp	r2, #0
   81f76:	f040 8087 	bne.w	82088 <_vfiprintf_r+0xbdc>
   81f7a:	2001      	movs	r0, #1
   81f7c:	4611      	mov	r1, r2
   81f7e:	46d1      	mov	r9, sl
   81f80:	e641      	b.n	81c06 <_vfiprintf_r+0x75a>
   81f82:	aa0f      	add	r2, sp, #60	; 0x3c
   81f84:	9904      	ldr	r1, [sp, #16]
   81f86:	9806      	ldr	r0, [sp, #24]
   81f88:	f7ff fa50 	bl	8142c <__sprint_r.part.0>
   81f8c:	2800      	cmp	r0, #0
   81f8e:	f47f af44 	bne.w	81e1a <_vfiprintf_r+0x96e>
   81f92:	9810      	ldr	r0, [sp, #64]	; 0x40
   81f94:	46d1      	mov	r9, sl
   81f96:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81f98:	3001      	adds	r0, #1
   81f9a:	e668      	b.n	81c6e <_vfiprintf_r+0x7c2>
   81f9c:	46cb      	mov	fp, r9
   81f9e:	e6d7      	b.n	81d50 <_vfiprintf_r+0x8a4>
   81fa0:	9d07      	ldr	r5, [sp, #28]
   81fa2:	3507      	adds	r5, #7
   81fa4:	f025 0507 	bic.w	r5, r5, #7
   81fa8:	f105 0208 	add.w	r2, r5, #8
   81fac:	e9d5 0100 	ldrd	r0, r1, [r5]
   81fb0:	9207      	str	r2, [sp, #28]
   81fb2:	4606      	mov	r6, r0
   81fb4:	460f      	mov	r7, r1
   81fb6:	e4c5      	b.n	81944 <_vfiprintf_r+0x498>
   81fb8:	9d07      	ldr	r5, [sp, #28]
   81fba:	3507      	adds	r5, #7
   81fbc:	f025 0207 	bic.w	r2, r5, #7
   81fc0:	f102 0108 	add.w	r1, r2, #8
   81fc4:	e9d2 6700 	ldrd	r6, r7, [r2]
   81fc8:	9107      	str	r1, [sp, #28]
   81fca:	2201      	movs	r2, #1
   81fcc:	f7ff bba7 	b.w	8171e <_vfiprintf_r+0x272>
   81fd0:	9d07      	ldr	r5, [sp, #28]
   81fd2:	3507      	adds	r5, #7
   81fd4:	f025 0207 	bic.w	r2, r5, #7
   81fd8:	f102 0108 	add.w	r1, r2, #8
   81fdc:	e9d2 6700 	ldrd	r6, r7, [r2]
   81fe0:	9107      	str	r1, [sp, #28]
   81fe2:	2200      	movs	r2, #0
   81fe4:	f7ff bb9b 	b.w	8171e <_vfiprintf_r+0x272>
   81fe8:	9d07      	ldr	r5, [sp, #28]
   81fea:	3507      	adds	r5, #7
   81fec:	f025 0107 	bic.w	r1, r5, #7
   81ff0:	f101 0008 	add.w	r0, r1, #8
   81ff4:	9007      	str	r0, [sp, #28]
   81ff6:	e9d1 6700 	ldrd	r6, r7, [r1]
   81ffa:	e51c      	b.n	81a36 <_vfiprintf_r+0x58a>
   81ffc:	46d3      	mov	fp, sl
   81ffe:	f7ff bbad 	b.w	8175c <_vfiprintf_r+0x2b0>
   82002:	252d      	movs	r5, #45	; 0x2d
   82004:	4276      	negs	r6, r6
   82006:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   8200a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   8200e:	2201      	movs	r2, #1
   82010:	f7ff bb8a 	b.w	81728 <_vfiprintf_r+0x27c>
   82014:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82016:	b9b3      	cbnz	r3, 82046 <_vfiprintf_r+0xb9a>
   82018:	4611      	mov	r1, r2
   8201a:	2001      	movs	r0, #1
   8201c:	46d1      	mov	r9, sl
   8201e:	e5f2      	b.n	81c06 <_vfiprintf_r+0x75a>
   82020:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82024:	f000 fdf4 	bl	82c10 <__retarget_lock_release_recursive>
   82028:	f04f 33ff 	mov.w	r3, #4294967295
   8202c:	9303      	str	r3, [sp, #12]
   8202e:	f7ff bb4c 	b.w	816ca <_vfiprintf_r+0x21e>
   82032:	aa0f      	add	r2, sp, #60	; 0x3c
   82034:	9904      	ldr	r1, [sp, #16]
   82036:	9806      	ldr	r0, [sp, #24]
   82038:	f7ff f9f8 	bl	8142c <__sprint_r.part.0>
   8203c:	2800      	cmp	r0, #0
   8203e:	f47f aeec 	bne.w	81e1a <_vfiprintf_r+0x96e>
   82042:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82044:	e6aa      	b.n	81d9c <_vfiprintf_r+0x8f0>
   82046:	2202      	movs	r2, #2
   82048:	ab0e      	add	r3, sp, #56	; 0x38
   8204a:	921d      	str	r2, [sp, #116]	; 0x74
   8204c:	931c      	str	r3, [sp, #112]	; 0x70
   8204e:	2001      	movs	r0, #1
   82050:	46d1      	mov	r9, sl
   82052:	e5d0      	b.n	81bf6 <_vfiprintf_r+0x74a>
   82054:	4d34      	ldr	r5, [pc, #208]	; (82128 <_vfiprintf_r+0xc7c>)
   82056:	e5fd      	b.n	81c54 <_vfiprintf_r+0x7a8>
   82058:	9a07      	ldr	r2, [sp, #28]
   8205a:	4613      	mov	r3, r2
   8205c:	3304      	adds	r3, #4
   8205e:	9307      	str	r3, [sp, #28]
   82060:	9b03      	ldr	r3, [sp, #12]
   82062:	6811      	ldr	r1, [r2, #0]
   82064:	17dd      	asrs	r5, r3, #31
   82066:	461a      	mov	r2, r3
   82068:	462b      	mov	r3, r5
   8206a:	e9c1 2300 	strd	r2, r3, [r1]
   8206e:	f7ff ba5a 	b.w	81526 <_vfiprintf_r+0x7a>
   82072:	4658      	mov	r0, fp
   82074:	9507      	str	r5, [sp, #28]
   82076:	9302      	str	r3, [sp, #8]
   82078:	f001 fc3c 	bl	838f4 <strlen>
   8207c:	2400      	movs	r4, #0
   8207e:	9005      	str	r0, [sp, #20]
   82080:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82084:	f7ff bb6a 	b.w	8175c <_vfiprintf_r+0x2b0>
   82088:	aa0f      	add	r2, sp, #60	; 0x3c
   8208a:	9904      	ldr	r1, [sp, #16]
   8208c:	9806      	ldr	r0, [sp, #24]
   8208e:	f7ff f9cd 	bl	8142c <__sprint_r.part.0>
   82092:	2800      	cmp	r0, #0
   82094:	f47f aec1 	bne.w	81e1a <_vfiprintf_r+0x96e>
   82098:	9910      	ldr	r1, [sp, #64]	; 0x40
   8209a:	46d1      	mov	r9, sl
   8209c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8209e:	1c48      	adds	r0, r1, #1
   820a0:	e5b1      	b.n	81c06 <_vfiprintf_r+0x75a>
   820a2:	9910      	ldr	r1, [sp, #64]	; 0x40
   820a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   820a6:	3101      	adds	r1, #1
   820a8:	4e20      	ldr	r6, [pc, #128]	; (8212c <_vfiprintf_r+0xc80>)
   820aa:	f7ff bb9c 	b.w	817e6 <_vfiprintf_r+0x33a>
   820ae:	2c06      	cmp	r4, #6
   820b0:	bf28      	it	cs
   820b2:	2406      	movcs	r4, #6
   820b4:	9507      	str	r5, [sp, #28]
   820b6:	9405      	str	r4, [sp, #20]
   820b8:	9401      	str	r4, [sp, #4]
   820ba:	f8df b074 	ldr.w	fp, [pc, #116]	; 82130 <_vfiprintf_r+0xc84>
   820be:	e4e3      	b.n	81a88 <_vfiprintf_r+0x5dc>
   820c0:	9810      	ldr	r0, [sp, #64]	; 0x40
   820c2:	4e1a      	ldr	r6, [pc, #104]	; (8212c <_vfiprintf_r+0xc80>)
   820c4:	3001      	adds	r0, #1
   820c6:	e60e      	b.n	81ce6 <_vfiprintf_r+0x83a>
   820c8:	4686      	mov	lr, r0
   820ca:	4d17      	ldr	r5, [pc, #92]	; (82128 <_vfiprintf_r+0xc7c>)
   820cc:	f7ff bbe2 	b.w	81894 <_vfiprintf_r+0x3e8>
   820d0:	9405      	str	r4, [sp, #20]
   820d2:	9507      	str	r5, [sp, #28]
   820d4:	9302      	str	r3, [sp, #8]
   820d6:	4604      	mov	r4, r0
   820d8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   820dc:	f7ff bb3e 	b.w	8175c <_vfiprintf_r+0x2b0>
   820e0:	9806      	ldr	r0, [sp, #24]
   820e2:	aa0f      	add	r2, sp, #60	; 0x3c
   820e4:	4659      	mov	r1, fp
   820e6:	f7ff f9a1 	bl	8142c <__sprint_r.part.0>
   820ea:	2800      	cmp	r0, #0
   820ec:	f43f ae2e 	beq.w	81d4c <_vfiprintf_r+0x8a0>
   820f0:	e62e      	b.n	81d50 <_vfiprintf_r+0x8a4>
   820f2:	9907      	ldr	r1, [sp, #28]
   820f4:	f898 2001 	ldrb.w	r2, [r8, #1]
   820f8:	680c      	ldr	r4, [r1, #0]
   820fa:	3104      	adds	r1, #4
   820fc:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   82100:	46b8      	mov	r8, r7
   82102:	9107      	str	r1, [sp, #28]
   82104:	f7ff ba44 	b.w	81590 <_vfiprintf_r+0xe4>
   82108:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8210c:	e4a7      	b.n	81a5e <_vfiprintf_r+0x5b2>
   8210e:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82112:	e521      	b.n	81b58 <_vfiprintf_r+0x6ac>
   82114:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82118:	e47c      	b.n	81a14 <_vfiprintf_r+0x568>
   8211a:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8211e:	e43f      	b.n	819a0 <_vfiprintf_r+0x4f4>
   82120:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82124:	f7ff bbfa 	b.w	8191c <_vfiprintf_r+0x470>
   82128:	00084094 	.word	0x00084094
   8212c:	00084084 	.word	0x00084084
   82130:	0008407c 	.word	0x0008407c

00082134 <__sbprintf>:
   82134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82138:	460c      	mov	r4, r1
   8213a:	f04f 0e00 	mov.w	lr, #0
   8213e:	f44f 6580 	mov.w	r5, #1024	; 0x400
   82142:	4606      	mov	r6, r0
   82144:	4617      	mov	r7, r2
   82146:	4698      	mov	r8, r3
   82148:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8214a:	89e3      	ldrh	r3, [r4, #14]
   8214c:	8989      	ldrh	r1, [r1, #12]
   8214e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   82152:	f021 0102 	bic.w	r1, r1, #2
   82156:	9219      	str	r2, [sp, #100]	; 0x64
   82158:	f8ad 300e 	strh.w	r3, [sp, #14]
   8215c:	69e2      	ldr	r2, [r4, #28]
   8215e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82160:	f8ad 100c 	strh.w	r1, [sp, #12]
   82164:	a816      	add	r0, sp, #88	; 0x58
   82166:	a91a      	add	r1, sp, #104	; 0x68
   82168:	f8cd e018 	str.w	lr, [sp, #24]
   8216c:	9207      	str	r2, [sp, #28]
   8216e:	9309      	str	r3, [sp, #36]	; 0x24
   82170:	9100      	str	r1, [sp, #0]
   82172:	9104      	str	r1, [sp, #16]
   82174:	9502      	str	r5, [sp, #8]
   82176:	9505      	str	r5, [sp, #20]
   82178:	f000 fd44 	bl	82c04 <__retarget_lock_init_recursive>
   8217c:	4643      	mov	r3, r8
   8217e:	463a      	mov	r2, r7
   82180:	4669      	mov	r1, sp
   82182:	4630      	mov	r0, r6
   82184:	f7ff f992 	bl	814ac <_vfiprintf_r>
   82188:	1e05      	subs	r5, r0, #0
   8218a:	db07      	blt.n	8219c <__sbprintf+0x68>
   8218c:	4630      	mov	r0, r6
   8218e:	4669      	mov	r1, sp
   82190:	f000 f924 	bl	823dc <_fflush_r>
   82194:	2800      	cmp	r0, #0
   82196:	bf18      	it	ne
   82198:	f04f 35ff 	movne.w	r5, #4294967295
   8219c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   821a0:	065b      	lsls	r3, r3, #25
   821a2:	d503      	bpl.n	821ac <__sbprintf+0x78>
   821a4:	89a3      	ldrh	r3, [r4, #12]
   821a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   821aa:	81a3      	strh	r3, [r4, #12]
   821ac:	9816      	ldr	r0, [sp, #88]	; 0x58
   821ae:	f000 fd2b 	bl	82c08 <__retarget_lock_close_recursive>
   821b2:	4628      	mov	r0, r5
   821b4:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   821b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000821bc <__swsetup_r>:
   821bc:	b538      	push	{r3, r4, r5, lr}
   821be:	4b30      	ldr	r3, [pc, #192]	; (82280 <__swsetup_r+0xc4>)
   821c0:	4605      	mov	r5, r0
   821c2:	6818      	ldr	r0, [r3, #0]
   821c4:	460c      	mov	r4, r1
   821c6:	b110      	cbz	r0, 821ce <__swsetup_r+0x12>
   821c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   821ca:	2b00      	cmp	r3, #0
   821cc:	d038      	beq.n	82240 <__swsetup_r+0x84>
   821ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   821d2:	b293      	uxth	r3, r2
   821d4:	0718      	lsls	r0, r3, #28
   821d6:	d50c      	bpl.n	821f2 <__swsetup_r+0x36>
   821d8:	6920      	ldr	r0, [r4, #16]
   821da:	b1a8      	cbz	r0, 82208 <__swsetup_r+0x4c>
   821dc:	f013 0201 	ands.w	r2, r3, #1
   821e0:	d01e      	beq.n	82220 <__swsetup_r+0x64>
   821e2:	2200      	movs	r2, #0
   821e4:	6963      	ldr	r3, [r4, #20]
   821e6:	60a2      	str	r2, [r4, #8]
   821e8:	425b      	negs	r3, r3
   821ea:	61a3      	str	r3, [r4, #24]
   821ec:	b1f0      	cbz	r0, 8222c <__swsetup_r+0x70>
   821ee:	2000      	movs	r0, #0
   821f0:	bd38      	pop	{r3, r4, r5, pc}
   821f2:	06d9      	lsls	r1, r3, #27
   821f4:	d53b      	bpl.n	8226e <__swsetup_r+0xb2>
   821f6:	0758      	lsls	r0, r3, #29
   821f8:	d425      	bmi.n	82246 <__swsetup_r+0x8a>
   821fa:	6920      	ldr	r0, [r4, #16]
   821fc:	f042 0308 	orr.w	r3, r2, #8
   82200:	81a3      	strh	r3, [r4, #12]
   82202:	b29b      	uxth	r3, r3
   82204:	2800      	cmp	r0, #0
   82206:	d1e9      	bne.n	821dc <__swsetup_r+0x20>
   82208:	f403 7220 	and.w	r2, r3, #640	; 0x280
   8220c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   82210:	d0e4      	beq.n	821dc <__swsetup_r+0x20>
   82212:	4628      	mov	r0, r5
   82214:	4621      	mov	r1, r4
   82216:	f000 fd2b 	bl	82c70 <__smakebuf_r>
   8221a:	89a3      	ldrh	r3, [r4, #12]
   8221c:	6920      	ldr	r0, [r4, #16]
   8221e:	e7dd      	b.n	821dc <__swsetup_r+0x20>
   82220:	0799      	lsls	r1, r3, #30
   82222:	bf58      	it	pl
   82224:	6962      	ldrpl	r2, [r4, #20]
   82226:	60a2      	str	r2, [r4, #8]
   82228:	2800      	cmp	r0, #0
   8222a:	d1e0      	bne.n	821ee <__swsetup_r+0x32>
   8222c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82230:	061a      	lsls	r2, r3, #24
   82232:	d5dd      	bpl.n	821f0 <__swsetup_r+0x34>
   82234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82238:	81a3      	strh	r3, [r4, #12]
   8223a:	f04f 30ff 	mov.w	r0, #4294967295
   8223e:	bd38      	pop	{r3, r4, r5, pc}
   82240:	f000 f924 	bl	8248c <__sinit>
   82244:	e7c3      	b.n	821ce <__swsetup_r+0x12>
   82246:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82248:	b151      	cbz	r1, 82260 <__swsetup_r+0xa4>
   8224a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8224e:	4299      	cmp	r1, r3
   82250:	d004      	beq.n	8225c <__swsetup_r+0xa0>
   82252:	4628      	mov	r0, r5
   82254:	f000 fa40 	bl	826d8 <_free_r>
   82258:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8225c:	2300      	movs	r3, #0
   8225e:	6323      	str	r3, [r4, #48]	; 0x30
   82260:	2300      	movs	r3, #0
   82262:	6920      	ldr	r0, [r4, #16]
   82264:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   82268:	e884 0009 	stmia.w	r4, {r0, r3}
   8226c:	e7c6      	b.n	821fc <__swsetup_r+0x40>
   8226e:	2309      	movs	r3, #9
   82270:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   82274:	602b      	str	r3, [r5, #0]
   82276:	f04f 30ff 	mov.w	r0, #4294967295
   8227a:	81a2      	strh	r2, [r4, #12]
   8227c:	bd38      	pop	{r3, r4, r5, pc}
   8227e:	bf00      	nop
   82280:	20070148 	.word	0x20070148

00082284 <register_fini>:
   82284:	4b02      	ldr	r3, [pc, #8]	; (82290 <register_fini+0xc>)
   82286:	b113      	cbz	r3, 8228e <register_fini+0xa>
   82288:	4802      	ldr	r0, [pc, #8]	; (82294 <register_fini+0x10>)
   8228a:	f000 b805 	b.w	82298 <atexit>
   8228e:	4770      	bx	lr
   82290:	00000000 	.word	0x00000000
   82294:	00082505 	.word	0x00082505

00082298 <atexit>:
   82298:	2300      	movs	r3, #0
   8229a:	4601      	mov	r1, r0
   8229c:	461a      	mov	r2, r3
   8229e:	4618      	mov	r0, r3
   822a0:	f001 bbfa 	b.w	83a98 <__register_exitproc>

000822a4 <__sflush_r>:
   822a4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   822a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   822ac:	b29a      	uxth	r2, r3
   822ae:	460d      	mov	r5, r1
   822b0:	0711      	lsls	r1, r2, #28
   822b2:	4680      	mov	r8, r0
   822b4:	d43a      	bmi.n	8232c <__sflush_r+0x88>
   822b6:	686a      	ldr	r2, [r5, #4]
   822b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   822bc:	2a00      	cmp	r2, #0
   822be:	81ab      	strh	r3, [r5, #12]
   822c0:	dd70      	ble.n	823a4 <__sflush_r+0x100>
   822c2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   822c4:	2c00      	cmp	r4, #0
   822c6:	d04a      	beq.n	8235e <__sflush_r+0xba>
   822c8:	2200      	movs	r2, #0
   822ca:	b29b      	uxth	r3, r3
   822cc:	f8d8 6000 	ldr.w	r6, [r8]
   822d0:	f8c8 2000 	str.w	r2, [r8]
   822d4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   822d8:	d068      	beq.n	823ac <__sflush_r+0x108>
   822da:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   822dc:	075f      	lsls	r7, r3, #29
   822de:	d505      	bpl.n	822ec <__sflush_r+0x48>
   822e0:	6869      	ldr	r1, [r5, #4]
   822e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   822e4:	1a52      	subs	r2, r2, r1
   822e6:	b10b      	cbz	r3, 822ec <__sflush_r+0x48>
   822e8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   822ea:	1ad2      	subs	r2, r2, r3
   822ec:	2300      	movs	r3, #0
   822ee:	69e9      	ldr	r1, [r5, #28]
   822f0:	4640      	mov	r0, r8
   822f2:	47a0      	blx	r4
   822f4:	1c44      	adds	r4, r0, #1
   822f6:	d03d      	beq.n	82374 <__sflush_r+0xd0>
   822f8:	2100      	movs	r1, #0
   822fa:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   822fe:	692a      	ldr	r2, [r5, #16]
   82300:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82304:	81ab      	strh	r3, [r5, #12]
   82306:	04db      	lsls	r3, r3, #19
   82308:	6069      	str	r1, [r5, #4]
   8230a:	602a      	str	r2, [r5, #0]
   8230c:	d448      	bmi.n	823a0 <__sflush_r+0xfc>
   8230e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   82310:	f8c8 6000 	str.w	r6, [r8]
   82314:	b319      	cbz	r1, 8235e <__sflush_r+0xba>
   82316:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8231a:	4299      	cmp	r1, r3
   8231c:	d002      	beq.n	82324 <__sflush_r+0x80>
   8231e:	4640      	mov	r0, r8
   82320:	f000 f9da 	bl	826d8 <_free_r>
   82324:	2000      	movs	r0, #0
   82326:	6328      	str	r0, [r5, #48]	; 0x30
   82328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8232c:	692e      	ldr	r6, [r5, #16]
   8232e:	b1b6      	cbz	r6, 8235e <__sflush_r+0xba>
   82330:	0791      	lsls	r1, r2, #30
   82332:	bf18      	it	ne
   82334:	2300      	movne	r3, #0
   82336:	682c      	ldr	r4, [r5, #0]
   82338:	bf08      	it	eq
   8233a:	696b      	ldreq	r3, [r5, #20]
   8233c:	602e      	str	r6, [r5, #0]
   8233e:	1ba4      	subs	r4, r4, r6
   82340:	60ab      	str	r3, [r5, #8]
   82342:	e00a      	b.n	8235a <__sflush_r+0xb6>
   82344:	4623      	mov	r3, r4
   82346:	4632      	mov	r2, r6
   82348:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   8234a:	69e9      	ldr	r1, [r5, #28]
   8234c:	4640      	mov	r0, r8
   8234e:	47b8      	blx	r7
   82350:	2800      	cmp	r0, #0
   82352:	eba4 0400 	sub.w	r4, r4, r0
   82356:	4406      	add	r6, r0
   82358:	dd04      	ble.n	82364 <__sflush_r+0xc0>
   8235a:	2c00      	cmp	r4, #0
   8235c:	dcf2      	bgt.n	82344 <__sflush_r+0xa0>
   8235e:	2000      	movs	r0, #0
   82360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82364:	89ab      	ldrh	r3, [r5, #12]
   82366:	f04f 30ff 	mov.w	r0, #4294967295
   8236a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8236e:	81ab      	strh	r3, [r5, #12]
   82370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82374:	f8d8 4000 	ldr.w	r4, [r8]
   82378:	2c1d      	cmp	r4, #29
   8237a:	d8f3      	bhi.n	82364 <__sflush_r+0xc0>
   8237c:	4b16      	ldr	r3, [pc, #88]	; (823d8 <__sflush_r+0x134>)
   8237e:	40e3      	lsrs	r3, r4
   82380:	43db      	mvns	r3, r3
   82382:	f013 0301 	ands.w	r3, r3, #1
   82386:	d1ed      	bne.n	82364 <__sflush_r+0xc0>
   82388:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   8238c:	6929      	ldr	r1, [r5, #16]
   8238e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   82392:	81aa      	strh	r2, [r5, #12]
   82394:	04d2      	lsls	r2, r2, #19
   82396:	606b      	str	r3, [r5, #4]
   82398:	6029      	str	r1, [r5, #0]
   8239a:	d5b8      	bpl.n	8230e <__sflush_r+0x6a>
   8239c:	2c00      	cmp	r4, #0
   8239e:	d1b6      	bne.n	8230e <__sflush_r+0x6a>
   823a0:	6528      	str	r0, [r5, #80]	; 0x50
   823a2:	e7b4      	b.n	8230e <__sflush_r+0x6a>
   823a4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   823a6:	2a00      	cmp	r2, #0
   823a8:	dc8b      	bgt.n	822c2 <__sflush_r+0x1e>
   823aa:	e7d8      	b.n	8235e <__sflush_r+0xba>
   823ac:	2301      	movs	r3, #1
   823ae:	69e9      	ldr	r1, [r5, #28]
   823b0:	4640      	mov	r0, r8
   823b2:	47a0      	blx	r4
   823b4:	1c43      	adds	r3, r0, #1
   823b6:	4602      	mov	r2, r0
   823b8:	d002      	beq.n	823c0 <__sflush_r+0x11c>
   823ba:	89ab      	ldrh	r3, [r5, #12]
   823bc:	6aac      	ldr	r4, [r5, #40]	; 0x28
   823be:	e78d      	b.n	822dc <__sflush_r+0x38>
   823c0:	f8d8 3000 	ldr.w	r3, [r8]
   823c4:	2b00      	cmp	r3, #0
   823c6:	d0f8      	beq.n	823ba <__sflush_r+0x116>
   823c8:	2b1d      	cmp	r3, #29
   823ca:	d001      	beq.n	823d0 <__sflush_r+0x12c>
   823cc:	2b16      	cmp	r3, #22
   823ce:	d1c9      	bne.n	82364 <__sflush_r+0xc0>
   823d0:	f8c8 6000 	str.w	r6, [r8]
   823d4:	e7c3      	b.n	8235e <__sflush_r+0xba>
   823d6:	bf00      	nop
   823d8:	20400001 	.word	0x20400001

000823dc <_fflush_r>:
   823dc:	b538      	push	{r3, r4, r5, lr}
   823de:	460d      	mov	r5, r1
   823e0:	4604      	mov	r4, r0
   823e2:	b108      	cbz	r0, 823e8 <_fflush_r+0xc>
   823e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   823e6:	b1bb      	cbz	r3, 82418 <_fflush_r+0x3c>
   823e8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   823ec:	b188      	cbz	r0, 82412 <_fflush_r+0x36>
   823ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   823f0:	07db      	lsls	r3, r3, #31
   823f2:	d401      	bmi.n	823f8 <_fflush_r+0x1c>
   823f4:	0581      	lsls	r1, r0, #22
   823f6:	d517      	bpl.n	82428 <_fflush_r+0x4c>
   823f8:	4620      	mov	r0, r4
   823fa:	4629      	mov	r1, r5
   823fc:	f7ff ff52 	bl	822a4 <__sflush_r>
   82400:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   82402:	4604      	mov	r4, r0
   82404:	07da      	lsls	r2, r3, #31
   82406:	d402      	bmi.n	8240e <_fflush_r+0x32>
   82408:	89ab      	ldrh	r3, [r5, #12]
   8240a:	059b      	lsls	r3, r3, #22
   8240c:	d507      	bpl.n	8241e <_fflush_r+0x42>
   8240e:	4620      	mov	r0, r4
   82410:	bd38      	pop	{r3, r4, r5, pc}
   82412:	4604      	mov	r4, r0
   82414:	4620      	mov	r0, r4
   82416:	bd38      	pop	{r3, r4, r5, pc}
   82418:	f000 f838 	bl	8248c <__sinit>
   8241c:	e7e4      	b.n	823e8 <_fflush_r+0xc>
   8241e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   82420:	f000 fbf6 	bl	82c10 <__retarget_lock_release_recursive>
   82424:	4620      	mov	r0, r4
   82426:	bd38      	pop	{r3, r4, r5, pc}
   82428:	6da8      	ldr	r0, [r5, #88]	; 0x58
   8242a:	f000 fbef 	bl	82c0c <__retarget_lock_acquire_recursive>
   8242e:	e7e3      	b.n	823f8 <_fflush_r+0x1c>

00082430 <_cleanup_r>:
   82430:	4901      	ldr	r1, [pc, #4]	; (82438 <_cleanup_r+0x8>)
   82432:	f000 bbb1 	b.w	82b98 <_fwalk_reent>
   82436:	bf00      	nop
   82438:	00083b81 	.word	0x00083b81

0008243c <std.isra.0>:
   8243c:	2300      	movs	r3, #0
   8243e:	b510      	push	{r4, lr}
   82440:	4604      	mov	r4, r0
   82442:	8181      	strh	r1, [r0, #12]
   82444:	81c2      	strh	r2, [r0, #14]
   82446:	6003      	str	r3, [r0, #0]
   82448:	6043      	str	r3, [r0, #4]
   8244a:	6083      	str	r3, [r0, #8]
   8244c:	6643      	str	r3, [r0, #100]	; 0x64
   8244e:	6103      	str	r3, [r0, #16]
   82450:	6143      	str	r3, [r0, #20]
   82452:	6183      	str	r3, [r0, #24]
   82454:	4619      	mov	r1, r3
   82456:	2208      	movs	r2, #8
   82458:	305c      	adds	r0, #92	; 0x5c
   8245a:	f7fe fe89 	bl	81170 <memset>
   8245e:	4807      	ldr	r0, [pc, #28]	; (8247c <std.isra.0+0x40>)
   82460:	4907      	ldr	r1, [pc, #28]	; (82480 <std.isra.0+0x44>)
   82462:	4a08      	ldr	r2, [pc, #32]	; (82484 <std.isra.0+0x48>)
   82464:	4b08      	ldr	r3, [pc, #32]	; (82488 <std.isra.0+0x4c>)
   82466:	6220      	str	r0, [r4, #32]
   82468:	61e4      	str	r4, [r4, #28]
   8246a:	6261      	str	r1, [r4, #36]	; 0x24
   8246c:	62a2      	str	r2, [r4, #40]	; 0x28
   8246e:	62e3      	str	r3, [r4, #44]	; 0x2c
   82470:	f104 0058 	add.w	r0, r4, #88	; 0x58
   82474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82478:	f000 bbc4 	b.w	82c04 <__retarget_lock_init_recursive>
   8247c:	0008386d 	.word	0x0008386d
   82480:	00083891 	.word	0x00083891
   82484:	000838cd 	.word	0x000838cd
   82488:	000838ed 	.word	0x000838ed

0008248c <__sinit>:
   8248c:	b510      	push	{r4, lr}
   8248e:	4604      	mov	r4, r0
   82490:	4814      	ldr	r0, [pc, #80]	; (824e4 <__sinit+0x58>)
   82492:	f000 fbbb 	bl	82c0c <__retarget_lock_acquire_recursive>
   82496:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   82498:	b9fa      	cbnz	r2, 824da <__sinit+0x4e>
   8249a:	2003      	movs	r0, #3
   8249c:	4912      	ldr	r1, [pc, #72]	; (824e8 <__sinit+0x5c>)
   8249e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   824a2:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   824a6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   824aa:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   824ae:	63e1      	str	r1, [r4, #60]	; 0x3c
   824b0:	6860      	ldr	r0, [r4, #4]
   824b2:	2104      	movs	r1, #4
   824b4:	f7ff ffc2 	bl	8243c <std.isra.0>
   824b8:	68a0      	ldr	r0, [r4, #8]
   824ba:	2201      	movs	r2, #1
   824bc:	2109      	movs	r1, #9
   824be:	f7ff ffbd 	bl	8243c <std.isra.0>
   824c2:	68e0      	ldr	r0, [r4, #12]
   824c4:	2202      	movs	r2, #2
   824c6:	2112      	movs	r1, #18
   824c8:	f7ff ffb8 	bl	8243c <std.isra.0>
   824cc:	2301      	movs	r3, #1
   824ce:	4805      	ldr	r0, [pc, #20]	; (824e4 <__sinit+0x58>)
   824d0:	63a3      	str	r3, [r4, #56]	; 0x38
   824d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   824d6:	f000 bb9b 	b.w	82c10 <__retarget_lock_release_recursive>
   824da:	4802      	ldr	r0, [pc, #8]	; (824e4 <__sinit+0x58>)
   824dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   824e0:	f000 bb96 	b.w	82c10 <__retarget_lock_release_recursive>
   824e4:	20070c94 	.word	0x20070c94
   824e8:	00082431 	.word	0x00082431

000824ec <__sfp_lock_acquire>:
   824ec:	4801      	ldr	r0, [pc, #4]	; (824f4 <__sfp_lock_acquire+0x8>)
   824ee:	f000 bb8d 	b.w	82c0c <__retarget_lock_acquire_recursive>
   824f2:	bf00      	nop
   824f4:	20070ca8 	.word	0x20070ca8

000824f8 <__sfp_lock_release>:
   824f8:	4801      	ldr	r0, [pc, #4]	; (82500 <__sfp_lock_release+0x8>)
   824fa:	f000 bb89 	b.w	82c10 <__retarget_lock_release_recursive>
   824fe:	bf00      	nop
   82500:	20070ca8 	.word	0x20070ca8

00082504 <__libc_fini_array>:
   82504:	b538      	push	{r3, r4, r5, lr}
   82506:	4c0a      	ldr	r4, [pc, #40]	; (82530 <__libc_fini_array+0x2c>)
   82508:	4d0a      	ldr	r5, [pc, #40]	; (82534 <__libc_fini_array+0x30>)
   8250a:	1b64      	subs	r4, r4, r5
   8250c:	10a4      	asrs	r4, r4, #2
   8250e:	d00a      	beq.n	82526 <__libc_fini_array+0x22>
   82510:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   82514:	3b01      	subs	r3, #1
   82516:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8251a:	3c01      	subs	r4, #1
   8251c:	f855 3904 	ldr.w	r3, [r5], #-4
   82520:	4798      	blx	r3
   82522:	2c00      	cmp	r4, #0
   82524:	d1f9      	bne.n	8251a <__libc_fini_array+0x16>
   82526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8252a:	f001 be4f 	b.w	841cc <_fini>
   8252e:	bf00      	nop
   82530:	000841dc 	.word	0x000841dc
   82534:	000841d8 	.word	0x000841d8

00082538 <__fputwc>:
   82538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8253c:	b083      	sub	sp, #12
   8253e:	4607      	mov	r7, r0
   82540:	4688      	mov	r8, r1
   82542:	4614      	mov	r4, r2
   82544:	f000 fb50 	bl	82be8 <__locale_mb_cur_max>
   82548:	2801      	cmp	r0, #1
   8254a:	d033      	beq.n	825b4 <__fputwc+0x7c>
   8254c:	4642      	mov	r2, r8
   8254e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   82552:	a901      	add	r1, sp, #4
   82554:	4638      	mov	r0, r7
   82556:	f001 fa53 	bl	83a00 <_wcrtomb_r>
   8255a:	1c42      	adds	r2, r0, #1
   8255c:	4606      	mov	r6, r0
   8255e:	d022      	beq.n	825a6 <__fputwc+0x6e>
   82560:	b390      	cbz	r0, 825c8 <__fputwc+0x90>
   82562:	f89d 1004 	ldrb.w	r1, [sp, #4]
   82566:	2500      	movs	r5, #0
   82568:	f10d 0904 	add.w	r9, sp, #4
   8256c:	e008      	b.n	82580 <__fputwc+0x48>
   8256e:	6823      	ldr	r3, [r4, #0]
   82570:	1c5a      	adds	r2, r3, #1
   82572:	6022      	str	r2, [r4, #0]
   82574:	7019      	strb	r1, [r3, #0]
   82576:	3501      	adds	r5, #1
   82578:	42b5      	cmp	r5, r6
   8257a:	d225      	bcs.n	825c8 <__fputwc+0x90>
   8257c:	f815 1009 	ldrb.w	r1, [r5, r9]
   82580:	68a3      	ldr	r3, [r4, #8]
   82582:	3b01      	subs	r3, #1
   82584:	2b00      	cmp	r3, #0
   82586:	60a3      	str	r3, [r4, #8]
   82588:	daf1      	bge.n	8256e <__fputwc+0x36>
   8258a:	69a2      	ldr	r2, [r4, #24]
   8258c:	4293      	cmp	r3, r2
   8258e:	db01      	blt.n	82594 <__fputwc+0x5c>
   82590:	290a      	cmp	r1, #10
   82592:	d1ec      	bne.n	8256e <__fputwc+0x36>
   82594:	4622      	mov	r2, r4
   82596:	4638      	mov	r0, r7
   82598:	f001 f9da 	bl	83950 <__swbuf_r>
   8259c:	1c43      	adds	r3, r0, #1
   8259e:	d1ea      	bne.n	82576 <__fputwc+0x3e>
   825a0:	b003      	add	sp, #12
   825a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   825a6:	89a3      	ldrh	r3, [r4, #12]
   825a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   825ac:	81a3      	strh	r3, [r4, #12]
   825ae:	b003      	add	sp, #12
   825b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   825b4:	f108 33ff 	add.w	r3, r8, #4294967295
   825b8:	2bfe      	cmp	r3, #254	; 0xfe
   825ba:	d8c7      	bhi.n	8254c <__fputwc+0x14>
   825bc:	fa5f f188 	uxtb.w	r1, r8
   825c0:	4606      	mov	r6, r0
   825c2:	f88d 1004 	strb.w	r1, [sp, #4]
   825c6:	e7ce      	b.n	82566 <__fputwc+0x2e>
   825c8:	4640      	mov	r0, r8
   825ca:	b003      	add	sp, #12
   825cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000825d0 <_fputwc_r>:
   825d0:	b530      	push	{r4, r5, lr}
   825d2:	6e53      	ldr	r3, [r2, #100]	; 0x64
   825d4:	4614      	mov	r4, r2
   825d6:	f013 0f01 	tst.w	r3, #1
   825da:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   825de:	b083      	sub	sp, #12
   825e0:	4605      	mov	r5, r0
   825e2:	b29a      	uxth	r2, r3
   825e4:	d101      	bne.n	825ea <_fputwc_r+0x1a>
   825e6:	0590      	lsls	r0, r2, #22
   825e8:	d51c      	bpl.n	82624 <_fputwc_r+0x54>
   825ea:	0490      	lsls	r0, r2, #18
   825ec:	d406      	bmi.n	825fc <_fputwc_r+0x2c>
   825ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
   825f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   825f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   825f8:	81a3      	strh	r3, [r4, #12]
   825fa:	6662      	str	r2, [r4, #100]	; 0x64
   825fc:	4628      	mov	r0, r5
   825fe:	4622      	mov	r2, r4
   82600:	f7ff ff9a 	bl	82538 <__fputwc>
   82604:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82606:	4605      	mov	r5, r0
   82608:	07da      	lsls	r2, r3, #31
   8260a:	d402      	bmi.n	82612 <_fputwc_r+0x42>
   8260c:	89a3      	ldrh	r3, [r4, #12]
   8260e:	059b      	lsls	r3, r3, #22
   82610:	d502      	bpl.n	82618 <_fputwc_r+0x48>
   82612:	4628      	mov	r0, r5
   82614:	b003      	add	sp, #12
   82616:	bd30      	pop	{r4, r5, pc}
   82618:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8261a:	f000 faf9 	bl	82c10 <__retarget_lock_release_recursive>
   8261e:	4628      	mov	r0, r5
   82620:	b003      	add	sp, #12
   82622:	bd30      	pop	{r4, r5, pc}
   82624:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82626:	9101      	str	r1, [sp, #4]
   82628:	f000 faf0 	bl	82c0c <__retarget_lock_acquire_recursive>
   8262c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82630:	9901      	ldr	r1, [sp, #4]
   82632:	b29a      	uxth	r2, r3
   82634:	e7d9      	b.n	825ea <_fputwc_r+0x1a>
   82636:	bf00      	nop

00082638 <_malloc_trim_r>:
   82638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8263a:	460c      	mov	r4, r1
   8263c:	4f23      	ldr	r7, [pc, #140]	; (826cc <_malloc_trim_r+0x94>)
   8263e:	4606      	mov	r6, r0
   82640:	f000 ff40 	bl	834c4 <__malloc_lock>
   82644:	68bb      	ldr	r3, [r7, #8]
   82646:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8264a:	685d      	ldr	r5, [r3, #4]
   8264c:	310f      	adds	r1, #15
   8264e:	f025 0503 	bic.w	r5, r5, #3
   82652:	4429      	add	r1, r5
   82654:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82658:	f021 010f 	bic.w	r1, r1, #15
   8265c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   82660:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   82664:	db07      	blt.n	82676 <_malloc_trim_r+0x3e>
   82666:	2100      	movs	r1, #0
   82668:	4630      	mov	r0, r6
   8266a:	f001 f8ed 	bl	83848 <_sbrk_r>
   8266e:	68bb      	ldr	r3, [r7, #8]
   82670:	442b      	add	r3, r5
   82672:	4298      	cmp	r0, r3
   82674:	d004      	beq.n	82680 <_malloc_trim_r+0x48>
   82676:	4630      	mov	r0, r6
   82678:	f000 ff2a 	bl	834d0 <__malloc_unlock>
   8267c:	2000      	movs	r0, #0
   8267e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82680:	4261      	negs	r1, r4
   82682:	4630      	mov	r0, r6
   82684:	f001 f8e0 	bl	83848 <_sbrk_r>
   82688:	3001      	adds	r0, #1
   8268a:	d00d      	beq.n	826a8 <_malloc_trim_r+0x70>
   8268c:	4b10      	ldr	r3, [pc, #64]	; (826d0 <_malloc_trim_r+0x98>)
   8268e:	68ba      	ldr	r2, [r7, #8]
   82690:	6819      	ldr	r1, [r3, #0]
   82692:	1b2d      	subs	r5, r5, r4
   82694:	f045 0501 	orr.w	r5, r5, #1
   82698:	4630      	mov	r0, r6
   8269a:	1b09      	subs	r1, r1, r4
   8269c:	6055      	str	r5, [r2, #4]
   8269e:	6019      	str	r1, [r3, #0]
   826a0:	f000 ff16 	bl	834d0 <__malloc_unlock>
   826a4:	2001      	movs	r0, #1
   826a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   826a8:	2100      	movs	r1, #0
   826aa:	4630      	mov	r0, r6
   826ac:	f001 f8cc 	bl	83848 <_sbrk_r>
   826b0:	68ba      	ldr	r2, [r7, #8]
   826b2:	1a83      	subs	r3, r0, r2
   826b4:	2b0f      	cmp	r3, #15
   826b6:	ddde      	ble.n	82676 <_malloc_trim_r+0x3e>
   826b8:	4c06      	ldr	r4, [pc, #24]	; (826d4 <_malloc_trim_r+0x9c>)
   826ba:	4905      	ldr	r1, [pc, #20]	; (826d0 <_malloc_trim_r+0x98>)
   826bc:	6824      	ldr	r4, [r4, #0]
   826be:	f043 0301 	orr.w	r3, r3, #1
   826c2:	1b00      	subs	r0, r0, r4
   826c4:	6053      	str	r3, [r2, #4]
   826c6:	6008      	str	r0, [r1, #0]
   826c8:	e7d5      	b.n	82676 <_malloc_trim_r+0x3e>
   826ca:	bf00      	nop
   826cc:	200706e8 	.word	0x200706e8
   826d0:	20070c28 	.word	0x20070c28
   826d4:	20070af0 	.word	0x20070af0

000826d8 <_free_r>:
   826d8:	2900      	cmp	r1, #0
   826da:	d044      	beq.n	82766 <_free_r+0x8e>
   826dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   826e0:	460d      	mov	r5, r1
   826e2:	4680      	mov	r8, r0
   826e4:	f000 feee 	bl	834c4 <__malloc_lock>
   826e8:	f855 7c04 	ldr.w	r7, [r5, #-4]
   826ec:	4969      	ldr	r1, [pc, #420]	; (82894 <_free_r+0x1bc>)
   826ee:	f1a5 0408 	sub.w	r4, r5, #8
   826f2:	f027 0301 	bic.w	r3, r7, #1
   826f6:	18e2      	adds	r2, r4, r3
   826f8:	688e      	ldr	r6, [r1, #8]
   826fa:	6850      	ldr	r0, [r2, #4]
   826fc:	42b2      	cmp	r2, r6
   826fe:	f020 0003 	bic.w	r0, r0, #3
   82702:	d05e      	beq.n	827c2 <_free_r+0xea>
   82704:	07fe      	lsls	r6, r7, #31
   82706:	6050      	str	r0, [r2, #4]
   82708:	d40b      	bmi.n	82722 <_free_r+0x4a>
   8270a:	f855 7c08 	ldr.w	r7, [r5, #-8]
   8270e:	f101 0e08 	add.w	lr, r1, #8
   82712:	1be4      	subs	r4, r4, r7
   82714:	68a5      	ldr	r5, [r4, #8]
   82716:	443b      	add	r3, r7
   82718:	4575      	cmp	r5, lr
   8271a:	d06d      	beq.n	827f8 <_free_r+0x120>
   8271c:	68e7      	ldr	r7, [r4, #12]
   8271e:	60ef      	str	r7, [r5, #12]
   82720:	60bd      	str	r5, [r7, #8]
   82722:	1815      	adds	r5, r2, r0
   82724:	686d      	ldr	r5, [r5, #4]
   82726:	07ed      	lsls	r5, r5, #31
   82728:	d53e      	bpl.n	827a8 <_free_r+0xd0>
   8272a:	f043 0201 	orr.w	r2, r3, #1
   8272e:	6062      	str	r2, [r4, #4]
   82730:	50e3      	str	r3, [r4, r3]
   82732:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82736:	d217      	bcs.n	82768 <_free_r+0x90>
   82738:	2201      	movs	r2, #1
   8273a:	08db      	lsrs	r3, r3, #3
   8273c:	1098      	asrs	r0, r3, #2
   8273e:	684d      	ldr	r5, [r1, #4]
   82740:	4413      	add	r3, r2
   82742:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   82746:	4082      	lsls	r2, r0
   82748:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   8274c:	432a      	orrs	r2, r5
   8274e:	3808      	subs	r0, #8
   82750:	60e0      	str	r0, [r4, #12]
   82752:	60a7      	str	r7, [r4, #8]
   82754:	604a      	str	r2, [r1, #4]
   82756:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   8275a:	60fc      	str	r4, [r7, #12]
   8275c:	4640      	mov	r0, r8
   8275e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82762:	f000 beb5 	b.w	834d0 <__malloc_unlock>
   82766:	4770      	bx	lr
   82768:	0a5a      	lsrs	r2, r3, #9
   8276a:	2a04      	cmp	r2, #4
   8276c:	d852      	bhi.n	82814 <_free_r+0x13c>
   8276e:	099a      	lsrs	r2, r3, #6
   82770:	f102 0739 	add.w	r7, r2, #57	; 0x39
   82774:	00ff      	lsls	r7, r7, #3
   82776:	f102 0538 	add.w	r5, r2, #56	; 0x38
   8277a:	19c8      	adds	r0, r1, r7
   8277c:	59ca      	ldr	r2, [r1, r7]
   8277e:	3808      	subs	r0, #8
   82780:	4290      	cmp	r0, r2
   82782:	d04f      	beq.n	82824 <_free_r+0x14c>
   82784:	6851      	ldr	r1, [r2, #4]
   82786:	f021 0103 	bic.w	r1, r1, #3
   8278a:	428b      	cmp	r3, r1
   8278c:	d232      	bcs.n	827f4 <_free_r+0x11c>
   8278e:	6892      	ldr	r2, [r2, #8]
   82790:	4290      	cmp	r0, r2
   82792:	d1f7      	bne.n	82784 <_free_r+0xac>
   82794:	68c3      	ldr	r3, [r0, #12]
   82796:	60a0      	str	r0, [r4, #8]
   82798:	60e3      	str	r3, [r4, #12]
   8279a:	609c      	str	r4, [r3, #8]
   8279c:	60c4      	str	r4, [r0, #12]
   8279e:	4640      	mov	r0, r8
   827a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   827a4:	f000 be94 	b.w	834d0 <__malloc_unlock>
   827a8:	6895      	ldr	r5, [r2, #8]
   827aa:	4f3b      	ldr	r7, [pc, #236]	; (82898 <_free_r+0x1c0>)
   827ac:	4403      	add	r3, r0
   827ae:	42bd      	cmp	r5, r7
   827b0:	d040      	beq.n	82834 <_free_r+0x15c>
   827b2:	68d0      	ldr	r0, [r2, #12]
   827b4:	f043 0201 	orr.w	r2, r3, #1
   827b8:	60e8      	str	r0, [r5, #12]
   827ba:	6085      	str	r5, [r0, #8]
   827bc:	6062      	str	r2, [r4, #4]
   827be:	50e3      	str	r3, [r4, r3]
   827c0:	e7b7      	b.n	82732 <_free_r+0x5a>
   827c2:	07ff      	lsls	r7, r7, #31
   827c4:	4403      	add	r3, r0
   827c6:	d407      	bmi.n	827d8 <_free_r+0x100>
   827c8:	f855 5c08 	ldr.w	r5, [r5, #-8]
   827cc:	1b64      	subs	r4, r4, r5
   827ce:	68e2      	ldr	r2, [r4, #12]
   827d0:	68a0      	ldr	r0, [r4, #8]
   827d2:	442b      	add	r3, r5
   827d4:	60c2      	str	r2, [r0, #12]
   827d6:	6090      	str	r0, [r2, #8]
   827d8:	4a30      	ldr	r2, [pc, #192]	; (8289c <_free_r+0x1c4>)
   827da:	f043 0001 	orr.w	r0, r3, #1
   827de:	6812      	ldr	r2, [r2, #0]
   827e0:	6060      	str	r0, [r4, #4]
   827e2:	4293      	cmp	r3, r2
   827e4:	608c      	str	r4, [r1, #8]
   827e6:	d3b9      	bcc.n	8275c <_free_r+0x84>
   827e8:	4b2d      	ldr	r3, [pc, #180]	; (828a0 <_free_r+0x1c8>)
   827ea:	4640      	mov	r0, r8
   827ec:	6819      	ldr	r1, [r3, #0]
   827ee:	f7ff ff23 	bl	82638 <_malloc_trim_r>
   827f2:	e7b3      	b.n	8275c <_free_r+0x84>
   827f4:	4610      	mov	r0, r2
   827f6:	e7cd      	b.n	82794 <_free_r+0xbc>
   827f8:	1811      	adds	r1, r2, r0
   827fa:	6849      	ldr	r1, [r1, #4]
   827fc:	07c9      	lsls	r1, r1, #31
   827fe:	d444      	bmi.n	8288a <_free_r+0x1b2>
   82800:	6891      	ldr	r1, [r2, #8]
   82802:	4403      	add	r3, r0
   82804:	68d2      	ldr	r2, [r2, #12]
   82806:	f043 0001 	orr.w	r0, r3, #1
   8280a:	60ca      	str	r2, [r1, #12]
   8280c:	6091      	str	r1, [r2, #8]
   8280e:	6060      	str	r0, [r4, #4]
   82810:	50e3      	str	r3, [r4, r3]
   82812:	e7a3      	b.n	8275c <_free_r+0x84>
   82814:	2a14      	cmp	r2, #20
   82816:	d816      	bhi.n	82846 <_free_r+0x16e>
   82818:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   8281c:	00ff      	lsls	r7, r7, #3
   8281e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   82822:	e7aa      	b.n	8277a <_free_r+0xa2>
   82824:	2301      	movs	r3, #1
   82826:	10aa      	asrs	r2, r5, #2
   82828:	684d      	ldr	r5, [r1, #4]
   8282a:	4093      	lsls	r3, r2
   8282c:	432b      	orrs	r3, r5
   8282e:	604b      	str	r3, [r1, #4]
   82830:	4603      	mov	r3, r0
   82832:	e7b0      	b.n	82796 <_free_r+0xbe>
   82834:	f043 0201 	orr.w	r2, r3, #1
   82838:	614c      	str	r4, [r1, #20]
   8283a:	610c      	str	r4, [r1, #16]
   8283c:	60e5      	str	r5, [r4, #12]
   8283e:	60a5      	str	r5, [r4, #8]
   82840:	6062      	str	r2, [r4, #4]
   82842:	50e3      	str	r3, [r4, r3]
   82844:	e78a      	b.n	8275c <_free_r+0x84>
   82846:	2a54      	cmp	r2, #84	; 0x54
   82848:	d806      	bhi.n	82858 <_free_r+0x180>
   8284a:	0b1a      	lsrs	r2, r3, #12
   8284c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   82850:	00ff      	lsls	r7, r7, #3
   82852:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   82856:	e790      	b.n	8277a <_free_r+0xa2>
   82858:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8285c:	d806      	bhi.n	8286c <_free_r+0x194>
   8285e:	0bda      	lsrs	r2, r3, #15
   82860:	f102 0778 	add.w	r7, r2, #120	; 0x78
   82864:	00ff      	lsls	r7, r7, #3
   82866:	f102 0577 	add.w	r5, r2, #119	; 0x77
   8286a:	e786      	b.n	8277a <_free_r+0xa2>
   8286c:	f240 5054 	movw	r0, #1364	; 0x554
   82870:	4282      	cmp	r2, r0
   82872:	d806      	bhi.n	82882 <_free_r+0x1aa>
   82874:	0c9a      	lsrs	r2, r3, #18
   82876:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   8287a:	00ff      	lsls	r7, r7, #3
   8287c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   82880:	e77b      	b.n	8277a <_free_r+0xa2>
   82882:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   82886:	257e      	movs	r5, #126	; 0x7e
   82888:	e777      	b.n	8277a <_free_r+0xa2>
   8288a:	f043 0101 	orr.w	r1, r3, #1
   8288e:	6061      	str	r1, [r4, #4]
   82890:	6013      	str	r3, [r2, #0]
   82892:	e763      	b.n	8275c <_free_r+0x84>
   82894:	200706e8 	.word	0x200706e8
   82898:	200706f0 	.word	0x200706f0
   8289c:	20070af4 	.word	0x20070af4
   828a0:	20070c58 	.word	0x20070c58

000828a4 <__sfvwrite_r>:
   828a4:	6893      	ldr	r3, [r2, #8]
   828a6:	2b00      	cmp	r3, #0
   828a8:	d071      	beq.n	8298e <__sfvwrite_r+0xea>
   828aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   828ae:	898b      	ldrh	r3, [r1, #12]
   828b0:	b083      	sub	sp, #12
   828b2:	460c      	mov	r4, r1
   828b4:	0719      	lsls	r1, r3, #28
   828b6:	9000      	str	r0, [sp, #0]
   828b8:	4616      	mov	r6, r2
   828ba:	d525      	bpl.n	82908 <__sfvwrite_r+0x64>
   828bc:	6922      	ldr	r2, [r4, #16]
   828be:	b31a      	cbz	r2, 82908 <__sfvwrite_r+0x64>
   828c0:	f013 0002 	ands.w	r0, r3, #2
   828c4:	6835      	ldr	r5, [r6, #0]
   828c6:	d02b      	beq.n	82920 <__sfvwrite_r+0x7c>
   828c8:	f04f 0900 	mov.w	r9, #0
   828cc:	46b0      	mov	r8, r6
   828ce:	464f      	mov	r7, r9
   828d0:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 82b94 <__sfvwrite_r+0x2f0>
   828d4:	2f00      	cmp	r7, #0
   828d6:	d055      	beq.n	82984 <__sfvwrite_r+0xe0>
   828d8:	4557      	cmp	r7, sl
   828da:	463b      	mov	r3, r7
   828dc:	464a      	mov	r2, r9
   828de:	bf28      	it	cs
   828e0:	4653      	movcs	r3, sl
   828e2:	69e1      	ldr	r1, [r4, #28]
   828e4:	9800      	ldr	r0, [sp, #0]
   828e6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   828e8:	47b0      	blx	r6
   828ea:	2800      	cmp	r0, #0
   828ec:	dd56      	ble.n	8299c <__sfvwrite_r+0xf8>
   828ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
   828f2:	4481      	add	r9, r0
   828f4:	1a1b      	subs	r3, r3, r0
   828f6:	1a3f      	subs	r7, r7, r0
   828f8:	f8c8 3008 	str.w	r3, [r8, #8]
   828fc:	2b00      	cmp	r3, #0
   828fe:	d1e9      	bne.n	828d4 <__sfvwrite_r+0x30>
   82900:	2000      	movs	r0, #0
   82902:	b003      	add	sp, #12
   82904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82908:	4621      	mov	r1, r4
   8290a:	9800      	ldr	r0, [sp, #0]
   8290c:	f7ff fc56 	bl	821bc <__swsetup_r>
   82910:	2800      	cmp	r0, #0
   82912:	f040 8135 	bne.w	82b80 <__sfvwrite_r+0x2dc>
   82916:	89a3      	ldrh	r3, [r4, #12]
   82918:	6835      	ldr	r5, [r6, #0]
   8291a:	f013 0002 	ands.w	r0, r3, #2
   8291e:	d1d3      	bne.n	828c8 <__sfvwrite_r+0x24>
   82920:	f013 0901 	ands.w	r9, r3, #1
   82924:	d144      	bne.n	829b0 <__sfvwrite_r+0x10c>
   82926:	464f      	mov	r7, r9
   82928:	9601      	str	r6, [sp, #4]
   8292a:	b337      	cbz	r7, 8297a <__sfvwrite_r+0xd6>
   8292c:	059a      	lsls	r2, r3, #22
   8292e:	f8d4 8008 	ldr.w	r8, [r4, #8]
   82932:	f140 8085 	bpl.w	82a40 <__sfvwrite_r+0x19c>
   82936:	4547      	cmp	r7, r8
   82938:	46c3      	mov	fp, r8
   8293a:	f0c0 80ad 	bcc.w	82a98 <__sfvwrite_r+0x1f4>
   8293e:	f413 6f90 	tst.w	r3, #1152	; 0x480
   82942:	f040 80ae 	bne.w	82aa2 <__sfvwrite_r+0x1fe>
   82946:	46ba      	mov	sl, r7
   82948:	6820      	ldr	r0, [r4, #0]
   8294a:	465a      	mov	r2, fp
   8294c:	4649      	mov	r1, r9
   8294e:	f000 fd55 	bl	833fc <memmove>
   82952:	68a2      	ldr	r2, [r4, #8]
   82954:	6823      	ldr	r3, [r4, #0]
   82956:	eba2 0208 	sub.w	r2, r2, r8
   8295a:	445b      	add	r3, fp
   8295c:	60a2      	str	r2, [r4, #8]
   8295e:	6023      	str	r3, [r4, #0]
   82960:	9a01      	ldr	r2, [sp, #4]
   82962:	44d1      	add	r9, sl
   82964:	6893      	ldr	r3, [r2, #8]
   82966:	eba7 070a 	sub.w	r7, r7, sl
   8296a:	eba3 030a 	sub.w	r3, r3, sl
   8296e:	6093      	str	r3, [r2, #8]
   82970:	2b00      	cmp	r3, #0
   82972:	d0c5      	beq.n	82900 <__sfvwrite_r+0x5c>
   82974:	89a3      	ldrh	r3, [r4, #12]
   82976:	2f00      	cmp	r7, #0
   82978:	d1d8      	bne.n	8292c <__sfvwrite_r+0x88>
   8297a:	f8d5 9000 	ldr.w	r9, [r5]
   8297e:	686f      	ldr	r7, [r5, #4]
   82980:	3508      	adds	r5, #8
   82982:	e7d2      	b.n	8292a <__sfvwrite_r+0x86>
   82984:	f8d5 9000 	ldr.w	r9, [r5]
   82988:	686f      	ldr	r7, [r5, #4]
   8298a:	3508      	adds	r5, #8
   8298c:	e7a2      	b.n	828d4 <__sfvwrite_r+0x30>
   8298e:	2000      	movs	r0, #0
   82990:	4770      	bx	lr
   82992:	4621      	mov	r1, r4
   82994:	9800      	ldr	r0, [sp, #0]
   82996:	f7ff fd21 	bl	823dc <_fflush_r>
   8299a:	b378      	cbz	r0, 829fc <__sfvwrite_r+0x158>
   8299c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   829a0:	f04f 30ff 	mov.w	r0, #4294967295
   829a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   829a8:	81a3      	strh	r3, [r4, #12]
   829aa:	b003      	add	sp, #12
   829ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   829b0:	4681      	mov	r9, r0
   829b2:	4633      	mov	r3, r6
   829b4:	464e      	mov	r6, r9
   829b6:	46a8      	mov	r8, r5
   829b8:	469a      	mov	sl, r3
   829ba:	464d      	mov	r5, r9
   829bc:	b356      	cbz	r6, 82a14 <__sfvwrite_r+0x170>
   829be:	2800      	cmp	r0, #0
   829c0:	d032      	beq.n	82a28 <__sfvwrite_r+0x184>
   829c2:	45b1      	cmp	r9, r6
   829c4:	46cb      	mov	fp, r9
   829c6:	bf28      	it	cs
   829c8:	46b3      	movcs	fp, r6
   829ca:	6820      	ldr	r0, [r4, #0]
   829cc:	6923      	ldr	r3, [r4, #16]
   829ce:	465f      	mov	r7, fp
   829d0:	4298      	cmp	r0, r3
   829d2:	6962      	ldr	r2, [r4, #20]
   829d4:	d904      	bls.n	829e0 <__sfvwrite_r+0x13c>
   829d6:	68a3      	ldr	r3, [r4, #8]
   829d8:	4413      	add	r3, r2
   829da:	459b      	cmp	fp, r3
   829dc:	f300 80a8 	bgt.w	82b30 <__sfvwrite_r+0x28c>
   829e0:	4593      	cmp	fp, r2
   829e2:	db4d      	blt.n	82a80 <__sfvwrite_r+0x1dc>
   829e4:	4613      	mov	r3, r2
   829e6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   829e8:	462a      	mov	r2, r5
   829ea:	69e1      	ldr	r1, [r4, #28]
   829ec:	9800      	ldr	r0, [sp, #0]
   829ee:	47b8      	blx	r7
   829f0:	1e07      	subs	r7, r0, #0
   829f2:	ddd3      	ble.n	8299c <__sfvwrite_r+0xf8>
   829f4:	ebb9 0907 	subs.w	r9, r9, r7
   829f8:	d0cb      	beq.n	82992 <__sfvwrite_r+0xee>
   829fa:	2001      	movs	r0, #1
   829fc:	f8da 3008 	ldr.w	r3, [sl, #8]
   82a00:	443d      	add	r5, r7
   82a02:	1bdb      	subs	r3, r3, r7
   82a04:	1bf6      	subs	r6, r6, r7
   82a06:	f8ca 3008 	str.w	r3, [sl, #8]
   82a0a:	2b00      	cmp	r3, #0
   82a0c:	f43f af78 	beq.w	82900 <__sfvwrite_r+0x5c>
   82a10:	2e00      	cmp	r6, #0
   82a12:	d1d4      	bne.n	829be <__sfvwrite_r+0x11a>
   82a14:	f108 0308 	add.w	r3, r8, #8
   82a18:	f853 6c04 	ldr.w	r6, [r3, #-4]
   82a1c:	4698      	mov	r8, r3
   82a1e:	f853 5c08 	ldr.w	r5, [r3, #-8]
   82a22:	3308      	adds	r3, #8
   82a24:	2e00      	cmp	r6, #0
   82a26:	d0f7      	beq.n	82a18 <__sfvwrite_r+0x174>
   82a28:	4632      	mov	r2, r6
   82a2a:	210a      	movs	r1, #10
   82a2c:	4628      	mov	r0, r5
   82a2e:	f000 fc29 	bl	83284 <memchr>
   82a32:	2800      	cmp	r0, #0
   82a34:	f000 80a1 	beq.w	82b7a <__sfvwrite_r+0x2d6>
   82a38:	3001      	adds	r0, #1
   82a3a:	eba0 0905 	sub.w	r9, r0, r5
   82a3e:	e7c0      	b.n	829c2 <__sfvwrite_r+0x11e>
   82a40:	6820      	ldr	r0, [r4, #0]
   82a42:	6923      	ldr	r3, [r4, #16]
   82a44:	4298      	cmp	r0, r3
   82a46:	d802      	bhi.n	82a4e <__sfvwrite_r+0x1aa>
   82a48:	6963      	ldr	r3, [r4, #20]
   82a4a:	429f      	cmp	r7, r3
   82a4c:	d25d      	bcs.n	82b0a <__sfvwrite_r+0x266>
   82a4e:	45b8      	cmp	r8, r7
   82a50:	bf28      	it	cs
   82a52:	46b8      	movcs	r8, r7
   82a54:	4649      	mov	r1, r9
   82a56:	4642      	mov	r2, r8
   82a58:	f000 fcd0 	bl	833fc <memmove>
   82a5c:	68a3      	ldr	r3, [r4, #8]
   82a5e:	6822      	ldr	r2, [r4, #0]
   82a60:	eba3 0308 	sub.w	r3, r3, r8
   82a64:	4442      	add	r2, r8
   82a66:	60a3      	str	r3, [r4, #8]
   82a68:	6022      	str	r2, [r4, #0]
   82a6a:	b10b      	cbz	r3, 82a70 <__sfvwrite_r+0x1cc>
   82a6c:	46c2      	mov	sl, r8
   82a6e:	e777      	b.n	82960 <__sfvwrite_r+0xbc>
   82a70:	4621      	mov	r1, r4
   82a72:	9800      	ldr	r0, [sp, #0]
   82a74:	f7ff fcb2 	bl	823dc <_fflush_r>
   82a78:	2800      	cmp	r0, #0
   82a7a:	d18f      	bne.n	8299c <__sfvwrite_r+0xf8>
   82a7c:	46c2      	mov	sl, r8
   82a7e:	e76f      	b.n	82960 <__sfvwrite_r+0xbc>
   82a80:	465a      	mov	r2, fp
   82a82:	4629      	mov	r1, r5
   82a84:	f000 fcba 	bl	833fc <memmove>
   82a88:	68a2      	ldr	r2, [r4, #8]
   82a8a:	6823      	ldr	r3, [r4, #0]
   82a8c:	eba2 020b 	sub.w	r2, r2, fp
   82a90:	445b      	add	r3, fp
   82a92:	60a2      	str	r2, [r4, #8]
   82a94:	6023      	str	r3, [r4, #0]
   82a96:	e7ad      	b.n	829f4 <__sfvwrite_r+0x150>
   82a98:	46b8      	mov	r8, r7
   82a9a:	46ba      	mov	sl, r7
   82a9c:	46bb      	mov	fp, r7
   82a9e:	6820      	ldr	r0, [r4, #0]
   82aa0:	e753      	b.n	8294a <__sfvwrite_r+0xa6>
   82aa2:	6962      	ldr	r2, [r4, #20]
   82aa4:	6820      	ldr	r0, [r4, #0]
   82aa6:	6921      	ldr	r1, [r4, #16]
   82aa8:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   82aac:	eba0 0a01 	sub.w	sl, r0, r1
   82ab0:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   82ab4:	f10a 0001 	add.w	r0, sl, #1
   82ab8:	ea4f 0868 	mov.w	r8, r8, asr #1
   82abc:	4438      	add	r0, r7
   82abe:	4540      	cmp	r0, r8
   82ac0:	4642      	mov	r2, r8
   82ac2:	bf84      	itt	hi
   82ac4:	4680      	movhi	r8, r0
   82ac6:	4642      	movhi	r2, r8
   82ac8:	055b      	lsls	r3, r3, #21
   82aca:	d544      	bpl.n	82b56 <__sfvwrite_r+0x2b2>
   82acc:	4611      	mov	r1, r2
   82ace:	9800      	ldr	r0, [sp, #0]
   82ad0:	f000 f920 	bl	82d14 <_malloc_r>
   82ad4:	4683      	mov	fp, r0
   82ad6:	2800      	cmp	r0, #0
   82ad8:	d055      	beq.n	82b86 <__sfvwrite_r+0x2e2>
   82ada:	4652      	mov	r2, sl
   82adc:	6921      	ldr	r1, [r4, #16]
   82ade:	f000 fc17 	bl	83310 <memcpy>
   82ae2:	89a3      	ldrh	r3, [r4, #12]
   82ae4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   82ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82aec:	81a3      	strh	r3, [r4, #12]
   82aee:	eb0b 000a 	add.w	r0, fp, sl
   82af2:	eba8 030a 	sub.w	r3, r8, sl
   82af6:	f8c4 b010 	str.w	fp, [r4, #16]
   82afa:	f8c4 8014 	str.w	r8, [r4, #20]
   82afe:	6020      	str	r0, [r4, #0]
   82b00:	60a3      	str	r3, [r4, #8]
   82b02:	46b8      	mov	r8, r7
   82b04:	46ba      	mov	sl, r7
   82b06:	46bb      	mov	fp, r7
   82b08:	e71f      	b.n	8294a <__sfvwrite_r+0xa6>
   82b0a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   82b0e:	42ba      	cmp	r2, r7
   82b10:	bf28      	it	cs
   82b12:	463a      	movcs	r2, r7
   82b14:	fb92 f2f3 	sdiv	r2, r2, r3
   82b18:	69e1      	ldr	r1, [r4, #28]
   82b1a:	fb03 f302 	mul.w	r3, r3, r2
   82b1e:	9800      	ldr	r0, [sp, #0]
   82b20:	464a      	mov	r2, r9
   82b22:	6a66      	ldr	r6, [r4, #36]	; 0x24
   82b24:	47b0      	blx	r6
   82b26:	f1b0 0a00 	subs.w	sl, r0, #0
   82b2a:	f73f af19 	bgt.w	82960 <__sfvwrite_r+0xbc>
   82b2e:	e735      	b.n	8299c <__sfvwrite_r+0xf8>
   82b30:	461a      	mov	r2, r3
   82b32:	4629      	mov	r1, r5
   82b34:	9301      	str	r3, [sp, #4]
   82b36:	f000 fc61 	bl	833fc <memmove>
   82b3a:	6822      	ldr	r2, [r4, #0]
   82b3c:	9b01      	ldr	r3, [sp, #4]
   82b3e:	4621      	mov	r1, r4
   82b40:	441a      	add	r2, r3
   82b42:	6022      	str	r2, [r4, #0]
   82b44:	9800      	ldr	r0, [sp, #0]
   82b46:	f7ff fc49 	bl	823dc <_fflush_r>
   82b4a:	9b01      	ldr	r3, [sp, #4]
   82b4c:	2800      	cmp	r0, #0
   82b4e:	f47f af25 	bne.w	8299c <__sfvwrite_r+0xf8>
   82b52:	461f      	mov	r7, r3
   82b54:	e74e      	b.n	829f4 <__sfvwrite_r+0x150>
   82b56:	9800      	ldr	r0, [sp, #0]
   82b58:	f000 fcc0 	bl	834dc <_realloc_r>
   82b5c:	4683      	mov	fp, r0
   82b5e:	2800      	cmp	r0, #0
   82b60:	d1c5      	bne.n	82aee <__sfvwrite_r+0x24a>
   82b62:	9d00      	ldr	r5, [sp, #0]
   82b64:	6921      	ldr	r1, [r4, #16]
   82b66:	4628      	mov	r0, r5
   82b68:	f7ff fdb6 	bl	826d8 <_free_r>
   82b6c:	220c      	movs	r2, #12
   82b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82b72:	602a      	str	r2, [r5, #0]
   82b74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82b78:	e712      	b.n	829a0 <__sfvwrite_r+0xfc>
   82b7a:	f106 0901 	add.w	r9, r6, #1
   82b7e:	e720      	b.n	829c2 <__sfvwrite_r+0x11e>
   82b80:	f04f 30ff 	mov.w	r0, #4294967295
   82b84:	e6bd      	b.n	82902 <__sfvwrite_r+0x5e>
   82b86:	220c      	movs	r2, #12
   82b88:	9900      	ldr	r1, [sp, #0]
   82b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82b8e:	600a      	str	r2, [r1, #0]
   82b90:	e706      	b.n	829a0 <__sfvwrite_r+0xfc>
   82b92:	bf00      	nop
   82b94:	7ffffc00 	.word	0x7ffffc00

00082b98 <_fwalk_reent>:
   82b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82b9c:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   82ba0:	d01e      	beq.n	82be0 <_fwalk_reent+0x48>
   82ba2:	4688      	mov	r8, r1
   82ba4:	4607      	mov	r7, r0
   82ba6:	f04f 0900 	mov.w	r9, #0
   82baa:	6875      	ldr	r5, [r6, #4]
   82bac:	68b4      	ldr	r4, [r6, #8]
   82bae:	3d01      	subs	r5, #1
   82bb0:	d410      	bmi.n	82bd4 <_fwalk_reent+0x3c>
   82bb2:	89a3      	ldrh	r3, [r4, #12]
   82bb4:	3d01      	subs	r5, #1
   82bb6:	2b01      	cmp	r3, #1
   82bb8:	d908      	bls.n	82bcc <_fwalk_reent+0x34>
   82bba:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   82bbe:	3301      	adds	r3, #1
   82bc0:	d004      	beq.n	82bcc <_fwalk_reent+0x34>
   82bc2:	4621      	mov	r1, r4
   82bc4:	4638      	mov	r0, r7
   82bc6:	47c0      	blx	r8
   82bc8:	ea49 0900 	orr.w	r9, r9, r0
   82bcc:	1c6b      	adds	r3, r5, #1
   82bce:	f104 0468 	add.w	r4, r4, #104	; 0x68
   82bd2:	d1ee      	bne.n	82bb2 <_fwalk_reent+0x1a>
   82bd4:	6836      	ldr	r6, [r6, #0]
   82bd6:	2e00      	cmp	r6, #0
   82bd8:	d1e7      	bne.n	82baa <_fwalk_reent+0x12>
   82bda:	4648      	mov	r0, r9
   82bdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82be0:	46b1      	mov	r9, r6
   82be2:	4648      	mov	r0, r9
   82be4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00082be8 <__locale_mb_cur_max>:
   82be8:	4b04      	ldr	r3, [pc, #16]	; (82bfc <__locale_mb_cur_max+0x14>)
   82bea:	4a05      	ldr	r2, [pc, #20]	; (82c00 <__locale_mb_cur_max+0x18>)
   82bec:	681b      	ldr	r3, [r3, #0]
   82bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   82bf0:	2b00      	cmp	r3, #0
   82bf2:	bf08      	it	eq
   82bf4:	4613      	moveq	r3, r2
   82bf6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   82bfa:	4770      	bx	lr
   82bfc:	20070148 	.word	0x20070148
   82c00:	2007057c 	.word	0x2007057c

00082c04 <__retarget_lock_init_recursive>:
   82c04:	4770      	bx	lr
   82c06:	bf00      	nop

00082c08 <__retarget_lock_close_recursive>:
   82c08:	4770      	bx	lr
   82c0a:	bf00      	nop

00082c0c <__retarget_lock_acquire_recursive>:
   82c0c:	4770      	bx	lr
   82c0e:	bf00      	nop

00082c10 <__retarget_lock_release_recursive>:
   82c10:	4770      	bx	lr
   82c12:	bf00      	nop

00082c14 <__swhatbuf_r>:
   82c14:	b570      	push	{r4, r5, r6, lr}
   82c16:	460c      	mov	r4, r1
   82c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82c1c:	b090      	sub	sp, #64	; 0x40
   82c1e:	2900      	cmp	r1, #0
   82c20:	4615      	mov	r5, r2
   82c22:	461e      	mov	r6, r3
   82c24:	db14      	blt.n	82c50 <__swhatbuf_r+0x3c>
   82c26:	aa01      	add	r2, sp, #4
   82c28:	f001 f80c 	bl	83c44 <_fstat_r>
   82c2c:	2800      	cmp	r0, #0
   82c2e:	db0f      	blt.n	82c50 <__swhatbuf_r+0x3c>
   82c30:	9a02      	ldr	r2, [sp, #8]
   82c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82c36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   82c3a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   82c3e:	fab2 f282 	clz	r2, r2
   82c42:	f44f 6000 	mov.w	r0, #2048	; 0x800
   82c46:	0952      	lsrs	r2, r2, #5
   82c48:	6032      	str	r2, [r6, #0]
   82c4a:	602b      	str	r3, [r5, #0]
   82c4c:	b010      	add	sp, #64	; 0x40
   82c4e:	bd70      	pop	{r4, r5, r6, pc}
   82c50:	2300      	movs	r3, #0
   82c52:	89a2      	ldrh	r2, [r4, #12]
   82c54:	6033      	str	r3, [r6, #0]
   82c56:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   82c5a:	d004      	beq.n	82c66 <__swhatbuf_r+0x52>
   82c5c:	2240      	movs	r2, #64	; 0x40
   82c5e:	4618      	mov	r0, r3
   82c60:	602a      	str	r2, [r5, #0]
   82c62:	b010      	add	sp, #64	; 0x40
   82c64:	bd70      	pop	{r4, r5, r6, pc}
   82c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82c6a:	602b      	str	r3, [r5, #0]
   82c6c:	b010      	add	sp, #64	; 0x40
   82c6e:	bd70      	pop	{r4, r5, r6, pc}

00082c70 <__smakebuf_r>:
   82c70:	898a      	ldrh	r2, [r1, #12]
   82c72:	460b      	mov	r3, r1
   82c74:	0792      	lsls	r2, r2, #30
   82c76:	d506      	bpl.n	82c86 <__smakebuf_r+0x16>
   82c78:	2101      	movs	r1, #1
   82c7a:	f103 0243 	add.w	r2, r3, #67	; 0x43
   82c7e:	6159      	str	r1, [r3, #20]
   82c80:	601a      	str	r2, [r3, #0]
   82c82:	611a      	str	r2, [r3, #16]
   82c84:	4770      	bx	lr
   82c86:	b5f0      	push	{r4, r5, r6, r7, lr}
   82c88:	b083      	sub	sp, #12
   82c8a:	ab01      	add	r3, sp, #4
   82c8c:	466a      	mov	r2, sp
   82c8e:	460c      	mov	r4, r1
   82c90:	4606      	mov	r6, r0
   82c92:	f7ff ffbf 	bl	82c14 <__swhatbuf_r>
   82c96:	9900      	ldr	r1, [sp, #0]
   82c98:	4605      	mov	r5, r0
   82c9a:	4630      	mov	r0, r6
   82c9c:	f000 f83a 	bl	82d14 <_malloc_r>
   82ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82ca4:	b1d8      	cbz	r0, 82cde <__smakebuf_r+0x6e>
   82ca6:	e89d 0006 	ldmia.w	sp, {r1, r2}
   82caa:	4f15      	ldr	r7, [pc, #84]	; (82d00 <__smakebuf_r+0x90>)
   82cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82cb0:	63f7      	str	r7, [r6, #60]	; 0x3c
   82cb2:	81a3      	strh	r3, [r4, #12]
   82cb4:	6020      	str	r0, [r4, #0]
   82cb6:	6120      	str	r0, [r4, #16]
   82cb8:	6161      	str	r1, [r4, #20]
   82cba:	b91a      	cbnz	r2, 82cc4 <__smakebuf_r+0x54>
   82cbc:	432b      	orrs	r3, r5
   82cbe:	81a3      	strh	r3, [r4, #12]
   82cc0:	b003      	add	sp, #12
   82cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82cc4:	4630      	mov	r0, r6
   82cc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82cca:	f000 ffcf 	bl	83c6c <_isatty_r>
   82cce:	b1a0      	cbz	r0, 82cfa <__smakebuf_r+0x8a>
   82cd0:	89a3      	ldrh	r3, [r4, #12]
   82cd2:	f023 0303 	bic.w	r3, r3, #3
   82cd6:	f043 0301 	orr.w	r3, r3, #1
   82cda:	b21b      	sxth	r3, r3
   82cdc:	e7ee      	b.n	82cbc <__smakebuf_r+0x4c>
   82cde:	059a      	lsls	r2, r3, #22
   82ce0:	d4ee      	bmi.n	82cc0 <__smakebuf_r+0x50>
   82ce2:	2101      	movs	r1, #1
   82ce4:	f023 0303 	bic.w	r3, r3, #3
   82ce8:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82cec:	f043 0302 	orr.w	r3, r3, #2
   82cf0:	81a3      	strh	r3, [r4, #12]
   82cf2:	6161      	str	r1, [r4, #20]
   82cf4:	6022      	str	r2, [r4, #0]
   82cf6:	6122      	str	r2, [r4, #16]
   82cf8:	e7e2      	b.n	82cc0 <__smakebuf_r+0x50>
   82cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82cfe:	e7dd      	b.n	82cbc <__smakebuf_r+0x4c>
   82d00:	00082431 	.word	0x00082431

00082d04 <malloc>:
   82d04:	4b02      	ldr	r3, [pc, #8]	; (82d10 <malloc+0xc>)
   82d06:	4601      	mov	r1, r0
   82d08:	6818      	ldr	r0, [r3, #0]
   82d0a:	f000 b803 	b.w	82d14 <_malloc_r>
   82d0e:	bf00      	nop
   82d10:	20070148 	.word	0x20070148

00082d14 <_malloc_r>:
   82d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82d18:	f101 060b 	add.w	r6, r1, #11
   82d1c:	2e16      	cmp	r6, #22
   82d1e:	b083      	sub	sp, #12
   82d20:	4605      	mov	r5, r0
   82d22:	f240 809e 	bls.w	82e62 <_malloc_r+0x14e>
   82d26:	f036 0607 	bics.w	r6, r6, #7
   82d2a:	f100 80bd 	bmi.w	82ea8 <_malloc_r+0x194>
   82d2e:	42b1      	cmp	r1, r6
   82d30:	f200 80ba 	bhi.w	82ea8 <_malloc_r+0x194>
   82d34:	f000 fbc6 	bl	834c4 <__malloc_lock>
   82d38:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   82d3c:	f0c0 8285 	bcc.w	8324a <_malloc_r+0x536>
   82d40:	0a73      	lsrs	r3, r6, #9
   82d42:	f000 80b8 	beq.w	82eb6 <_malloc_r+0x1a2>
   82d46:	2b04      	cmp	r3, #4
   82d48:	f200 816c 	bhi.w	83024 <_malloc_r+0x310>
   82d4c:	09b3      	lsrs	r3, r6, #6
   82d4e:	f103 0039 	add.w	r0, r3, #57	; 0x39
   82d52:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   82d56:	00c1      	lsls	r1, r0, #3
   82d58:	4fb8      	ldr	r7, [pc, #736]	; (8303c <_malloc_r+0x328>)
   82d5a:	4439      	add	r1, r7
   82d5c:	684c      	ldr	r4, [r1, #4]
   82d5e:	3908      	subs	r1, #8
   82d60:	42a1      	cmp	r1, r4
   82d62:	d106      	bne.n	82d72 <_malloc_r+0x5e>
   82d64:	e00c      	b.n	82d80 <_malloc_r+0x6c>
   82d66:	2a00      	cmp	r2, #0
   82d68:	f280 80ab 	bge.w	82ec2 <_malloc_r+0x1ae>
   82d6c:	68e4      	ldr	r4, [r4, #12]
   82d6e:	42a1      	cmp	r1, r4
   82d70:	d006      	beq.n	82d80 <_malloc_r+0x6c>
   82d72:	6863      	ldr	r3, [r4, #4]
   82d74:	f023 0303 	bic.w	r3, r3, #3
   82d78:	1b9a      	subs	r2, r3, r6
   82d7a:	2a0f      	cmp	r2, #15
   82d7c:	ddf3      	ble.n	82d66 <_malloc_r+0x52>
   82d7e:	4670      	mov	r0, lr
   82d80:	693c      	ldr	r4, [r7, #16]
   82d82:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 83050 <_malloc_r+0x33c>
   82d86:	4574      	cmp	r4, lr
   82d88:	f000 819e 	beq.w	830c8 <_malloc_r+0x3b4>
   82d8c:	6863      	ldr	r3, [r4, #4]
   82d8e:	f023 0303 	bic.w	r3, r3, #3
   82d92:	1b9a      	subs	r2, r3, r6
   82d94:	2a0f      	cmp	r2, #15
   82d96:	f300 8183 	bgt.w	830a0 <_malloc_r+0x38c>
   82d9a:	2a00      	cmp	r2, #0
   82d9c:	f8c7 e014 	str.w	lr, [r7, #20]
   82da0:	f8c7 e010 	str.w	lr, [r7, #16]
   82da4:	f280 8091 	bge.w	82eca <_malloc_r+0x1b6>
   82da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82dac:	f080 8154 	bcs.w	83058 <_malloc_r+0x344>
   82db0:	2201      	movs	r2, #1
   82db2:	08db      	lsrs	r3, r3, #3
   82db4:	6879      	ldr	r1, [r7, #4]
   82db6:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   82dba:	4413      	add	r3, r2
   82dbc:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   82dc0:	fa02 f20c 	lsl.w	r2, r2, ip
   82dc4:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   82dc8:	430a      	orrs	r2, r1
   82dca:	f1ac 0108 	sub.w	r1, ip, #8
   82dce:	60e1      	str	r1, [r4, #12]
   82dd0:	f8c4 8008 	str.w	r8, [r4, #8]
   82dd4:	607a      	str	r2, [r7, #4]
   82dd6:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   82dda:	f8c8 400c 	str.w	r4, [r8, #12]
   82dde:	2401      	movs	r4, #1
   82de0:	1083      	asrs	r3, r0, #2
   82de2:	409c      	lsls	r4, r3
   82de4:	4294      	cmp	r4, r2
   82de6:	d87d      	bhi.n	82ee4 <_malloc_r+0x1d0>
   82de8:	4214      	tst	r4, r2
   82dea:	d106      	bne.n	82dfa <_malloc_r+0xe6>
   82dec:	f020 0003 	bic.w	r0, r0, #3
   82df0:	0064      	lsls	r4, r4, #1
   82df2:	4214      	tst	r4, r2
   82df4:	f100 0004 	add.w	r0, r0, #4
   82df8:	d0fa      	beq.n	82df0 <_malloc_r+0xdc>
   82dfa:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   82dfe:	46cc      	mov	ip, r9
   82e00:	4680      	mov	r8, r0
   82e02:	f8dc 300c 	ldr.w	r3, [ip, #12]
   82e06:	459c      	cmp	ip, r3
   82e08:	d107      	bne.n	82e1a <_malloc_r+0x106>
   82e0a:	e15f      	b.n	830cc <_malloc_r+0x3b8>
   82e0c:	2a00      	cmp	r2, #0
   82e0e:	f280 816d 	bge.w	830ec <_malloc_r+0x3d8>
   82e12:	68db      	ldr	r3, [r3, #12]
   82e14:	459c      	cmp	ip, r3
   82e16:	f000 8159 	beq.w	830cc <_malloc_r+0x3b8>
   82e1a:	6859      	ldr	r1, [r3, #4]
   82e1c:	f021 0103 	bic.w	r1, r1, #3
   82e20:	1b8a      	subs	r2, r1, r6
   82e22:	2a0f      	cmp	r2, #15
   82e24:	ddf2      	ble.n	82e0c <_malloc_r+0xf8>
   82e26:	68dc      	ldr	r4, [r3, #12]
   82e28:	f8d3 c008 	ldr.w	ip, [r3, #8]
   82e2c:	f046 0801 	orr.w	r8, r6, #1
   82e30:	4628      	mov	r0, r5
   82e32:	441e      	add	r6, r3
   82e34:	f042 0501 	orr.w	r5, r2, #1
   82e38:	f8c3 8004 	str.w	r8, [r3, #4]
   82e3c:	f8cc 400c 	str.w	r4, [ip, #12]
   82e40:	f8c4 c008 	str.w	ip, [r4, #8]
   82e44:	617e      	str	r6, [r7, #20]
   82e46:	613e      	str	r6, [r7, #16]
   82e48:	f8c6 e00c 	str.w	lr, [r6, #12]
   82e4c:	f8c6 e008 	str.w	lr, [r6, #8]
   82e50:	6075      	str	r5, [r6, #4]
   82e52:	505a      	str	r2, [r3, r1]
   82e54:	9300      	str	r3, [sp, #0]
   82e56:	f000 fb3b 	bl	834d0 <__malloc_unlock>
   82e5a:	9b00      	ldr	r3, [sp, #0]
   82e5c:	f103 0408 	add.w	r4, r3, #8
   82e60:	e01e      	b.n	82ea0 <_malloc_r+0x18c>
   82e62:	2910      	cmp	r1, #16
   82e64:	d820      	bhi.n	82ea8 <_malloc_r+0x194>
   82e66:	f000 fb2d 	bl	834c4 <__malloc_lock>
   82e6a:	2610      	movs	r6, #16
   82e6c:	2318      	movs	r3, #24
   82e6e:	2002      	movs	r0, #2
   82e70:	4f72      	ldr	r7, [pc, #456]	; (8303c <_malloc_r+0x328>)
   82e72:	443b      	add	r3, r7
   82e74:	685c      	ldr	r4, [r3, #4]
   82e76:	f1a3 0208 	sub.w	r2, r3, #8
   82e7a:	4294      	cmp	r4, r2
   82e7c:	f000 812f 	beq.w	830de <_malloc_r+0x3ca>
   82e80:	6863      	ldr	r3, [r4, #4]
   82e82:	68e1      	ldr	r1, [r4, #12]
   82e84:	f023 0303 	bic.w	r3, r3, #3
   82e88:	4423      	add	r3, r4
   82e8a:	685a      	ldr	r2, [r3, #4]
   82e8c:	68a6      	ldr	r6, [r4, #8]
   82e8e:	f042 0201 	orr.w	r2, r2, #1
   82e92:	60f1      	str	r1, [r6, #12]
   82e94:	4628      	mov	r0, r5
   82e96:	608e      	str	r6, [r1, #8]
   82e98:	605a      	str	r2, [r3, #4]
   82e9a:	f000 fb19 	bl	834d0 <__malloc_unlock>
   82e9e:	3408      	adds	r4, #8
   82ea0:	4620      	mov	r0, r4
   82ea2:	b003      	add	sp, #12
   82ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82ea8:	2400      	movs	r4, #0
   82eaa:	230c      	movs	r3, #12
   82eac:	4620      	mov	r0, r4
   82eae:	602b      	str	r3, [r5, #0]
   82eb0:	b003      	add	sp, #12
   82eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82eb6:	2040      	movs	r0, #64	; 0x40
   82eb8:	f44f 7100 	mov.w	r1, #512	; 0x200
   82ebc:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   82ec0:	e74a      	b.n	82d58 <_malloc_r+0x44>
   82ec2:	4423      	add	r3, r4
   82ec4:	685a      	ldr	r2, [r3, #4]
   82ec6:	68e1      	ldr	r1, [r4, #12]
   82ec8:	e7e0      	b.n	82e8c <_malloc_r+0x178>
   82eca:	4423      	add	r3, r4
   82ecc:	685a      	ldr	r2, [r3, #4]
   82ece:	4628      	mov	r0, r5
   82ed0:	f042 0201 	orr.w	r2, r2, #1
   82ed4:	605a      	str	r2, [r3, #4]
   82ed6:	3408      	adds	r4, #8
   82ed8:	f000 fafa 	bl	834d0 <__malloc_unlock>
   82edc:	4620      	mov	r0, r4
   82ede:	b003      	add	sp, #12
   82ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82ee4:	68bc      	ldr	r4, [r7, #8]
   82ee6:	6863      	ldr	r3, [r4, #4]
   82ee8:	f023 0803 	bic.w	r8, r3, #3
   82eec:	45b0      	cmp	r8, r6
   82eee:	d304      	bcc.n	82efa <_malloc_r+0x1e6>
   82ef0:	eba8 0306 	sub.w	r3, r8, r6
   82ef4:	2b0f      	cmp	r3, #15
   82ef6:	f300 8085 	bgt.w	83004 <_malloc_r+0x2f0>
   82efa:	f8df 9158 	ldr.w	r9, [pc, #344]	; 83054 <_malloc_r+0x340>
   82efe:	4b50      	ldr	r3, [pc, #320]	; (83040 <_malloc_r+0x32c>)
   82f00:	f8d9 2000 	ldr.w	r2, [r9]
   82f04:	681b      	ldr	r3, [r3, #0]
   82f06:	3201      	adds	r2, #1
   82f08:	4433      	add	r3, r6
   82f0a:	eb04 0a08 	add.w	sl, r4, r8
   82f0e:	f000 8154 	beq.w	831ba <_malloc_r+0x4a6>
   82f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   82f16:	330f      	adds	r3, #15
   82f18:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   82f1c:	f02b 0b0f 	bic.w	fp, fp, #15
   82f20:	4659      	mov	r1, fp
   82f22:	4628      	mov	r0, r5
   82f24:	f000 fc90 	bl	83848 <_sbrk_r>
   82f28:	1c41      	adds	r1, r0, #1
   82f2a:	4602      	mov	r2, r0
   82f2c:	f000 80fb 	beq.w	83126 <_malloc_r+0x412>
   82f30:	4582      	cmp	sl, r0
   82f32:	f200 80f6 	bhi.w	83122 <_malloc_r+0x40e>
   82f36:	4b43      	ldr	r3, [pc, #268]	; (83044 <_malloc_r+0x330>)
   82f38:	6819      	ldr	r1, [r3, #0]
   82f3a:	4459      	add	r1, fp
   82f3c:	6019      	str	r1, [r3, #0]
   82f3e:	f000 814c 	beq.w	831da <_malloc_r+0x4c6>
   82f42:	f8d9 0000 	ldr.w	r0, [r9]
   82f46:	3001      	adds	r0, #1
   82f48:	bf1b      	ittet	ne
   82f4a:	eba2 0a0a 	subne.w	sl, r2, sl
   82f4e:	4451      	addne	r1, sl
   82f50:	f8c9 2000 	streq.w	r2, [r9]
   82f54:	6019      	strne	r1, [r3, #0]
   82f56:	f012 0107 	ands.w	r1, r2, #7
   82f5a:	f000 8114 	beq.w	83186 <_malloc_r+0x472>
   82f5e:	f1c1 0008 	rsb	r0, r1, #8
   82f62:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   82f66:	4402      	add	r2, r0
   82f68:	3108      	adds	r1, #8
   82f6a:	eb02 090b 	add.w	r9, r2, fp
   82f6e:	f3c9 090b 	ubfx	r9, r9, #0, #12
   82f72:	eba1 0909 	sub.w	r9, r1, r9
   82f76:	4649      	mov	r1, r9
   82f78:	4628      	mov	r0, r5
   82f7a:	9301      	str	r3, [sp, #4]
   82f7c:	9200      	str	r2, [sp, #0]
   82f7e:	f000 fc63 	bl	83848 <_sbrk_r>
   82f82:	1c43      	adds	r3, r0, #1
   82f84:	e89d 000c 	ldmia.w	sp, {r2, r3}
   82f88:	f000 8142 	beq.w	83210 <_malloc_r+0x4fc>
   82f8c:	1a80      	subs	r0, r0, r2
   82f8e:	4448      	add	r0, r9
   82f90:	f040 0001 	orr.w	r0, r0, #1
   82f94:	6819      	ldr	r1, [r3, #0]
   82f96:	42bc      	cmp	r4, r7
   82f98:	4449      	add	r1, r9
   82f9a:	60ba      	str	r2, [r7, #8]
   82f9c:	6019      	str	r1, [r3, #0]
   82f9e:	6050      	str	r0, [r2, #4]
   82fa0:	d017      	beq.n	82fd2 <_malloc_r+0x2be>
   82fa2:	f1b8 0f0f 	cmp.w	r8, #15
   82fa6:	f240 80fa 	bls.w	8319e <_malloc_r+0x48a>
   82faa:	f04f 0c05 	mov.w	ip, #5
   82fae:	6862      	ldr	r2, [r4, #4]
   82fb0:	f1a8 000c 	sub.w	r0, r8, #12
   82fb4:	f020 0007 	bic.w	r0, r0, #7
   82fb8:	f002 0201 	and.w	r2, r2, #1
   82fbc:	eb04 0e00 	add.w	lr, r4, r0
   82fc0:	4302      	orrs	r2, r0
   82fc2:	280f      	cmp	r0, #15
   82fc4:	6062      	str	r2, [r4, #4]
   82fc6:	f8ce c004 	str.w	ip, [lr, #4]
   82fca:	f8ce c008 	str.w	ip, [lr, #8]
   82fce:	f200 8116 	bhi.w	831fe <_malloc_r+0x4ea>
   82fd2:	4b1d      	ldr	r3, [pc, #116]	; (83048 <_malloc_r+0x334>)
   82fd4:	68bc      	ldr	r4, [r7, #8]
   82fd6:	681a      	ldr	r2, [r3, #0]
   82fd8:	4291      	cmp	r1, r2
   82fda:	bf88      	it	hi
   82fdc:	6019      	strhi	r1, [r3, #0]
   82fde:	4b1b      	ldr	r3, [pc, #108]	; (8304c <_malloc_r+0x338>)
   82fe0:	681a      	ldr	r2, [r3, #0]
   82fe2:	4291      	cmp	r1, r2
   82fe4:	6862      	ldr	r2, [r4, #4]
   82fe6:	bf88      	it	hi
   82fe8:	6019      	strhi	r1, [r3, #0]
   82fea:	f022 0203 	bic.w	r2, r2, #3
   82fee:	4296      	cmp	r6, r2
   82ff0:	eba2 0306 	sub.w	r3, r2, r6
   82ff4:	d801      	bhi.n	82ffa <_malloc_r+0x2e6>
   82ff6:	2b0f      	cmp	r3, #15
   82ff8:	dc04      	bgt.n	83004 <_malloc_r+0x2f0>
   82ffa:	4628      	mov	r0, r5
   82ffc:	f000 fa68 	bl	834d0 <__malloc_unlock>
   83000:	2400      	movs	r4, #0
   83002:	e74d      	b.n	82ea0 <_malloc_r+0x18c>
   83004:	f046 0201 	orr.w	r2, r6, #1
   83008:	f043 0301 	orr.w	r3, r3, #1
   8300c:	4426      	add	r6, r4
   8300e:	6062      	str	r2, [r4, #4]
   83010:	4628      	mov	r0, r5
   83012:	60be      	str	r6, [r7, #8]
   83014:	3408      	adds	r4, #8
   83016:	6073      	str	r3, [r6, #4]
   83018:	f000 fa5a 	bl	834d0 <__malloc_unlock>
   8301c:	4620      	mov	r0, r4
   8301e:	b003      	add	sp, #12
   83020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83024:	2b14      	cmp	r3, #20
   83026:	d970      	bls.n	8310a <_malloc_r+0x3f6>
   83028:	2b54      	cmp	r3, #84	; 0x54
   8302a:	f200 80a2 	bhi.w	83172 <_malloc_r+0x45e>
   8302e:	0b33      	lsrs	r3, r6, #12
   83030:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   83034:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   83038:	00c1      	lsls	r1, r0, #3
   8303a:	e68d      	b.n	82d58 <_malloc_r+0x44>
   8303c:	200706e8 	.word	0x200706e8
   83040:	20070c58 	.word	0x20070c58
   83044:	20070c28 	.word	0x20070c28
   83048:	20070c50 	.word	0x20070c50
   8304c:	20070c54 	.word	0x20070c54
   83050:	200706f0 	.word	0x200706f0
   83054:	20070af0 	.word	0x20070af0
   83058:	0a5a      	lsrs	r2, r3, #9
   8305a:	2a04      	cmp	r2, #4
   8305c:	d95b      	bls.n	83116 <_malloc_r+0x402>
   8305e:	2a14      	cmp	r2, #20
   83060:	f200 80ae 	bhi.w	831c0 <_malloc_r+0x4ac>
   83064:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   83068:	00c9      	lsls	r1, r1, #3
   8306a:	325b      	adds	r2, #91	; 0x5b
   8306c:	eb07 0c01 	add.w	ip, r7, r1
   83070:	5879      	ldr	r1, [r7, r1]
   83072:	f1ac 0c08 	sub.w	ip, ip, #8
   83076:	458c      	cmp	ip, r1
   83078:	f000 8088 	beq.w	8318c <_malloc_r+0x478>
   8307c:	684a      	ldr	r2, [r1, #4]
   8307e:	f022 0203 	bic.w	r2, r2, #3
   83082:	4293      	cmp	r3, r2
   83084:	d273      	bcs.n	8316e <_malloc_r+0x45a>
   83086:	6889      	ldr	r1, [r1, #8]
   83088:	458c      	cmp	ip, r1
   8308a:	d1f7      	bne.n	8307c <_malloc_r+0x368>
   8308c:	f8dc 300c 	ldr.w	r3, [ip, #12]
   83090:	687a      	ldr	r2, [r7, #4]
   83092:	60e3      	str	r3, [r4, #12]
   83094:	f8c4 c008 	str.w	ip, [r4, #8]
   83098:	609c      	str	r4, [r3, #8]
   8309a:	f8cc 400c 	str.w	r4, [ip, #12]
   8309e:	e69e      	b.n	82dde <_malloc_r+0xca>
   830a0:	f046 0c01 	orr.w	ip, r6, #1
   830a4:	f042 0101 	orr.w	r1, r2, #1
   830a8:	4426      	add	r6, r4
   830aa:	f8c4 c004 	str.w	ip, [r4, #4]
   830ae:	4628      	mov	r0, r5
   830b0:	617e      	str	r6, [r7, #20]
   830b2:	613e      	str	r6, [r7, #16]
   830b4:	f8c6 e00c 	str.w	lr, [r6, #12]
   830b8:	f8c6 e008 	str.w	lr, [r6, #8]
   830bc:	6071      	str	r1, [r6, #4]
   830be:	50e2      	str	r2, [r4, r3]
   830c0:	f000 fa06 	bl	834d0 <__malloc_unlock>
   830c4:	3408      	adds	r4, #8
   830c6:	e6eb      	b.n	82ea0 <_malloc_r+0x18c>
   830c8:	687a      	ldr	r2, [r7, #4]
   830ca:	e688      	b.n	82dde <_malloc_r+0xca>
   830cc:	f108 0801 	add.w	r8, r8, #1
   830d0:	f018 0f03 	tst.w	r8, #3
   830d4:	f10c 0c08 	add.w	ip, ip, #8
   830d8:	f47f ae93 	bne.w	82e02 <_malloc_r+0xee>
   830dc:	e02d      	b.n	8313a <_malloc_r+0x426>
   830de:	68dc      	ldr	r4, [r3, #12]
   830e0:	42a3      	cmp	r3, r4
   830e2:	bf08      	it	eq
   830e4:	3002      	addeq	r0, #2
   830e6:	f43f ae4b 	beq.w	82d80 <_malloc_r+0x6c>
   830ea:	e6c9      	b.n	82e80 <_malloc_r+0x16c>
   830ec:	461c      	mov	r4, r3
   830ee:	4419      	add	r1, r3
   830f0:	684a      	ldr	r2, [r1, #4]
   830f2:	68db      	ldr	r3, [r3, #12]
   830f4:	f854 6f08 	ldr.w	r6, [r4, #8]!
   830f8:	f042 0201 	orr.w	r2, r2, #1
   830fc:	604a      	str	r2, [r1, #4]
   830fe:	4628      	mov	r0, r5
   83100:	60f3      	str	r3, [r6, #12]
   83102:	609e      	str	r6, [r3, #8]
   83104:	f000 f9e4 	bl	834d0 <__malloc_unlock>
   83108:	e6ca      	b.n	82ea0 <_malloc_r+0x18c>
   8310a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8310e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   83112:	00c1      	lsls	r1, r0, #3
   83114:	e620      	b.n	82d58 <_malloc_r+0x44>
   83116:	099a      	lsrs	r2, r3, #6
   83118:	f102 0139 	add.w	r1, r2, #57	; 0x39
   8311c:	00c9      	lsls	r1, r1, #3
   8311e:	3238      	adds	r2, #56	; 0x38
   83120:	e7a4      	b.n	8306c <_malloc_r+0x358>
   83122:	42bc      	cmp	r4, r7
   83124:	d054      	beq.n	831d0 <_malloc_r+0x4bc>
   83126:	68bc      	ldr	r4, [r7, #8]
   83128:	6862      	ldr	r2, [r4, #4]
   8312a:	f022 0203 	bic.w	r2, r2, #3
   8312e:	e75e      	b.n	82fee <_malloc_r+0x2da>
   83130:	f859 3908 	ldr.w	r3, [r9], #-8
   83134:	4599      	cmp	r9, r3
   83136:	f040 8086 	bne.w	83246 <_malloc_r+0x532>
   8313a:	f010 0f03 	tst.w	r0, #3
   8313e:	f100 30ff 	add.w	r0, r0, #4294967295
   83142:	d1f5      	bne.n	83130 <_malloc_r+0x41c>
   83144:	687b      	ldr	r3, [r7, #4]
   83146:	ea23 0304 	bic.w	r3, r3, r4
   8314a:	607b      	str	r3, [r7, #4]
   8314c:	0064      	lsls	r4, r4, #1
   8314e:	429c      	cmp	r4, r3
   83150:	f63f aec8 	bhi.w	82ee4 <_malloc_r+0x1d0>
   83154:	2c00      	cmp	r4, #0
   83156:	f43f aec5 	beq.w	82ee4 <_malloc_r+0x1d0>
   8315a:	421c      	tst	r4, r3
   8315c:	4640      	mov	r0, r8
   8315e:	f47f ae4c 	bne.w	82dfa <_malloc_r+0xe6>
   83162:	0064      	lsls	r4, r4, #1
   83164:	421c      	tst	r4, r3
   83166:	f100 0004 	add.w	r0, r0, #4
   8316a:	d0fa      	beq.n	83162 <_malloc_r+0x44e>
   8316c:	e645      	b.n	82dfa <_malloc_r+0xe6>
   8316e:	468c      	mov	ip, r1
   83170:	e78c      	b.n	8308c <_malloc_r+0x378>
   83172:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   83176:	d815      	bhi.n	831a4 <_malloc_r+0x490>
   83178:	0bf3      	lsrs	r3, r6, #15
   8317a:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8317e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   83182:	00c1      	lsls	r1, r0, #3
   83184:	e5e8      	b.n	82d58 <_malloc_r+0x44>
   83186:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8318a:	e6ee      	b.n	82f6a <_malloc_r+0x256>
   8318c:	2101      	movs	r1, #1
   8318e:	687b      	ldr	r3, [r7, #4]
   83190:	1092      	asrs	r2, r2, #2
   83192:	fa01 f202 	lsl.w	r2, r1, r2
   83196:	431a      	orrs	r2, r3
   83198:	607a      	str	r2, [r7, #4]
   8319a:	4663      	mov	r3, ip
   8319c:	e779      	b.n	83092 <_malloc_r+0x37e>
   8319e:	2301      	movs	r3, #1
   831a0:	6053      	str	r3, [r2, #4]
   831a2:	e72a      	b.n	82ffa <_malloc_r+0x2e6>
   831a4:	f240 5254 	movw	r2, #1364	; 0x554
   831a8:	4293      	cmp	r3, r2
   831aa:	d822      	bhi.n	831f2 <_malloc_r+0x4de>
   831ac:	0cb3      	lsrs	r3, r6, #18
   831ae:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   831b2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   831b6:	00c1      	lsls	r1, r0, #3
   831b8:	e5ce      	b.n	82d58 <_malloc_r+0x44>
   831ba:	f103 0b10 	add.w	fp, r3, #16
   831be:	e6af      	b.n	82f20 <_malloc_r+0x20c>
   831c0:	2a54      	cmp	r2, #84	; 0x54
   831c2:	d829      	bhi.n	83218 <_malloc_r+0x504>
   831c4:	0b1a      	lsrs	r2, r3, #12
   831c6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   831ca:	00c9      	lsls	r1, r1, #3
   831cc:	326e      	adds	r2, #110	; 0x6e
   831ce:	e74d      	b.n	8306c <_malloc_r+0x358>
   831d0:	4b20      	ldr	r3, [pc, #128]	; (83254 <_malloc_r+0x540>)
   831d2:	6819      	ldr	r1, [r3, #0]
   831d4:	4459      	add	r1, fp
   831d6:	6019      	str	r1, [r3, #0]
   831d8:	e6b3      	b.n	82f42 <_malloc_r+0x22e>
   831da:	f3ca 000b 	ubfx	r0, sl, #0, #12
   831de:	2800      	cmp	r0, #0
   831e0:	f47f aeaf 	bne.w	82f42 <_malloc_r+0x22e>
   831e4:	eb08 030b 	add.w	r3, r8, fp
   831e8:	68ba      	ldr	r2, [r7, #8]
   831ea:	f043 0301 	orr.w	r3, r3, #1
   831ee:	6053      	str	r3, [r2, #4]
   831f0:	e6ef      	b.n	82fd2 <_malloc_r+0x2be>
   831f2:	207f      	movs	r0, #127	; 0x7f
   831f4:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   831f8:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   831fc:	e5ac      	b.n	82d58 <_malloc_r+0x44>
   831fe:	f104 0108 	add.w	r1, r4, #8
   83202:	4628      	mov	r0, r5
   83204:	9300      	str	r3, [sp, #0]
   83206:	f7ff fa67 	bl	826d8 <_free_r>
   8320a:	9b00      	ldr	r3, [sp, #0]
   8320c:	6819      	ldr	r1, [r3, #0]
   8320e:	e6e0      	b.n	82fd2 <_malloc_r+0x2be>
   83210:	2001      	movs	r0, #1
   83212:	f04f 0900 	mov.w	r9, #0
   83216:	e6bd      	b.n	82f94 <_malloc_r+0x280>
   83218:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8321c:	d805      	bhi.n	8322a <_malloc_r+0x516>
   8321e:	0bda      	lsrs	r2, r3, #15
   83220:	f102 0178 	add.w	r1, r2, #120	; 0x78
   83224:	00c9      	lsls	r1, r1, #3
   83226:	3277      	adds	r2, #119	; 0x77
   83228:	e720      	b.n	8306c <_malloc_r+0x358>
   8322a:	f240 5154 	movw	r1, #1364	; 0x554
   8322e:	428a      	cmp	r2, r1
   83230:	d805      	bhi.n	8323e <_malloc_r+0x52a>
   83232:	0c9a      	lsrs	r2, r3, #18
   83234:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   83238:	00c9      	lsls	r1, r1, #3
   8323a:	327c      	adds	r2, #124	; 0x7c
   8323c:	e716      	b.n	8306c <_malloc_r+0x358>
   8323e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   83242:	227e      	movs	r2, #126	; 0x7e
   83244:	e712      	b.n	8306c <_malloc_r+0x358>
   83246:	687b      	ldr	r3, [r7, #4]
   83248:	e780      	b.n	8314c <_malloc_r+0x438>
   8324a:	08f0      	lsrs	r0, r6, #3
   8324c:	f106 0308 	add.w	r3, r6, #8
   83250:	e60e      	b.n	82e70 <_malloc_r+0x15c>
   83252:	bf00      	nop
   83254:	20070c28 	.word	0x20070c28

00083258 <__ascii_mbtowc>:
   83258:	b082      	sub	sp, #8
   8325a:	b149      	cbz	r1, 83270 <__ascii_mbtowc+0x18>
   8325c:	b15a      	cbz	r2, 83276 <__ascii_mbtowc+0x1e>
   8325e:	b16b      	cbz	r3, 8327c <__ascii_mbtowc+0x24>
   83260:	7813      	ldrb	r3, [r2, #0]
   83262:	600b      	str	r3, [r1, #0]
   83264:	7812      	ldrb	r2, [r2, #0]
   83266:	1c10      	adds	r0, r2, #0
   83268:	bf18      	it	ne
   8326a:	2001      	movne	r0, #1
   8326c:	b002      	add	sp, #8
   8326e:	4770      	bx	lr
   83270:	a901      	add	r1, sp, #4
   83272:	2a00      	cmp	r2, #0
   83274:	d1f3      	bne.n	8325e <__ascii_mbtowc+0x6>
   83276:	4610      	mov	r0, r2
   83278:	b002      	add	sp, #8
   8327a:	4770      	bx	lr
   8327c:	f06f 0001 	mvn.w	r0, #1
   83280:	e7f4      	b.n	8326c <__ascii_mbtowc+0x14>
   83282:	bf00      	nop

00083284 <memchr>:
   83284:	0783      	lsls	r3, r0, #30
   83286:	b470      	push	{r4, r5, r6}
   83288:	b2cd      	uxtb	r5, r1
   8328a:	d03d      	beq.n	83308 <memchr+0x84>
   8328c:	1e54      	subs	r4, r2, #1
   8328e:	b30a      	cbz	r2, 832d4 <memchr+0x50>
   83290:	7803      	ldrb	r3, [r0, #0]
   83292:	42ab      	cmp	r3, r5
   83294:	d01f      	beq.n	832d6 <memchr+0x52>
   83296:	1c43      	adds	r3, r0, #1
   83298:	e005      	b.n	832a6 <memchr+0x22>
   8329a:	f114 34ff 	adds.w	r4, r4, #4294967295
   8329e:	d319      	bcc.n	832d4 <memchr+0x50>
   832a0:	7802      	ldrb	r2, [r0, #0]
   832a2:	42aa      	cmp	r2, r5
   832a4:	d017      	beq.n	832d6 <memchr+0x52>
   832a6:	f013 0f03 	tst.w	r3, #3
   832aa:	4618      	mov	r0, r3
   832ac:	f103 0301 	add.w	r3, r3, #1
   832b0:	d1f3      	bne.n	8329a <memchr+0x16>
   832b2:	2c03      	cmp	r4, #3
   832b4:	d811      	bhi.n	832da <memchr+0x56>
   832b6:	b34c      	cbz	r4, 8330c <memchr+0x88>
   832b8:	7803      	ldrb	r3, [r0, #0]
   832ba:	42ab      	cmp	r3, r5
   832bc:	d00b      	beq.n	832d6 <memchr+0x52>
   832be:	4404      	add	r4, r0
   832c0:	1c43      	adds	r3, r0, #1
   832c2:	e002      	b.n	832ca <memchr+0x46>
   832c4:	7802      	ldrb	r2, [r0, #0]
   832c6:	42aa      	cmp	r2, r5
   832c8:	d005      	beq.n	832d6 <memchr+0x52>
   832ca:	429c      	cmp	r4, r3
   832cc:	4618      	mov	r0, r3
   832ce:	f103 0301 	add.w	r3, r3, #1
   832d2:	d1f7      	bne.n	832c4 <memchr+0x40>
   832d4:	2000      	movs	r0, #0
   832d6:	bc70      	pop	{r4, r5, r6}
   832d8:	4770      	bx	lr
   832da:	0209      	lsls	r1, r1, #8
   832dc:	b289      	uxth	r1, r1
   832de:	4329      	orrs	r1, r5
   832e0:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   832e4:	6803      	ldr	r3, [r0, #0]
   832e6:	4606      	mov	r6, r0
   832e8:	404b      	eors	r3, r1
   832ea:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   832ee:	ea22 0303 	bic.w	r3, r2, r3
   832f2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   832f6:	f100 0004 	add.w	r0, r0, #4
   832fa:	d103      	bne.n	83304 <memchr+0x80>
   832fc:	3c04      	subs	r4, #4
   832fe:	2c03      	cmp	r4, #3
   83300:	d8f0      	bhi.n	832e4 <memchr+0x60>
   83302:	e7d8      	b.n	832b6 <memchr+0x32>
   83304:	4630      	mov	r0, r6
   83306:	e7d7      	b.n	832b8 <memchr+0x34>
   83308:	4614      	mov	r4, r2
   8330a:	e7d2      	b.n	832b2 <memchr+0x2e>
   8330c:	4620      	mov	r0, r4
   8330e:	e7e2      	b.n	832d6 <memchr+0x52>

00083310 <memcpy>:
   83310:	4684      	mov	ip, r0
   83312:	ea41 0300 	orr.w	r3, r1, r0
   83316:	f013 0303 	ands.w	r3, r3, #3
   8331a:	d149      	bne.n	833b0 <memcpy+0xa0>
   8331c:	3a40      	subs	r2, #64	; 0x40
   8331e:	d323      	bcc.n	83368 <memcpy+0x58>
   83320:	680b      	ldr	r3, [r1, #0]
   83322:	6003      	str	r3, [r0, #0]
   83324:	684b      	ldr	r3, [r1, #4]
   83326:	6043      	str	r3, [r0, #4]
   83328:	688b      	ldr	r3, [r1, #8]
   8332a:	6083      	str	r3, [r0, #8]
   8332c:	68cb      	ldr	r3, [r1, #12]
   8332e:	60c3      	str	r3, [r0, #12]
   83330:	690b      	ldr	r3, [r1, #16]
   83332:	6103      	str	r3, [r0, #16]
   83334:	694b      	ldr	r3, [r1, #20]
   83336:	6143      	str	r3, [r0, #20]
   83338:	698b      	ldr	r3, [r1, #24]
   8333a:	6183      	str	r3, [r0, #24]
   8333c:	69cb      	ldr	r3, [r1, #28]
   8333e:	61c3      	str	r3, [r0, #28]
   83340:	6a0b      	ldr	r3, [r1, #32]
   83342:	6203      	str	r3, [r0, #32]
   83344:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   83346:	6243      	str	r3, [r0, #36]	; 0x24
   83348:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8334a:	6283      	str	r3, [r0, #40]	; 0x28
   8334c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8334e:	62c3      	str	r3, [r0, #44]	; 0x2c
   83350:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83352:	6303      	str	r3, [r0, #48]	; 0x30
   83354:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   83356:	6343      	str	r3, [r0, #52]	; 0x34
   83358:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8335a:	6383      	str	r3, [r0, #56]	; 0x38
   8335c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8335e:	63c3      	str	r3, [r0, #60]	; 0x3c
   83360:	3040      	adds	r0, #64	; 0x40
   83362:	3140      	adds	r1, #64	; 0x40
   83364:	3a40      	subs	r2, #64	; 0x40
   83366:	d2db      	bcs.n	83320 <memcpy+0x10>
   83368:	3230      	adds	r2, #48	; 0x30
   8336a:	d30b      	bcc.n	83384 <memcpy+0x74>
   8336c:	680b      	ldr	r3, [r1, #0]
   8336e:	6003      	str	r3, [r0, #0]
   83370:	684b      	ldr	r3, [r1, #4]
   83372:	6043      	str	r3, [r0, #4]
   83374:	688b      	ldr	r3, [r1, #8]
   83376:	6083      	str	r3, [r0, #8]
   83378:	68cb      	ldr	r3, [r1, #12]
   8337a:	60c3      	str	r3, [r0, #12]
   8337c:	3010      	adds	r0, #16
   8337e:	3110      	adds	r1, #16
   83380:	3a10      	subs	r2, #16
   83382:	d2f3      	bcs.n	8336c <memcpy+0x5c>
   83384:	320c      	adds	r2, #12
   83386:	d305      	bcc.n	83394 <memcpy+0x84>
   83388:	f851 3b04 	ldr.w	r3, [r1], #4
   8338c:	f840 3b04 	str.w	r3, [r0], #4
   83390:	3a04      	subs	r2, #4
   83392:	d2f9      	bcs.n	83388 <memcpy+0x78>
   83394:	3204      	adds	r2, #4
   83396:	d008      	beq.n	833aa <memcpy+0x9a>
   83398:	07d2      	lsls	r2, r2, #31
   8339a:	bf1c      	itt	ne
   8339c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   833a0:	f800 3b01 	strbne.w	r3, [r0], #1
   833a4:	d301      	bcc.n	833aa <memcpy+0x9a>
   833a6:	880b      	ldrh	r3, [r1, #0]
   833a8:	8003      	strh	r3, [r0, #0]
   833aa:	4660      	mov	r0, ip
   833ac:	4770      	bx	lr
   833ae:	bf00      	nop
   833b0:	2a08      	cmp	r2, #8
   833b2:	d313      	bcc.n	833dc <memcpy+0xcc>
   833b4:	078b      	lsls	r3, r1, #30
   833b6:	d0b1      	beq.n	8331c <memcpy+0xc>
   833b8:	f010 0303 	ands.w	r3, r0, #3
   833bc:	d0ae      	beq.n	8331c <memcpy+0xc>
   833be:	f1c3 0304 	rsb	r3, r3, #4
   833c2:	1ad2      	subs	r2, r2, r3
   833c4:	07db      	lsls	r3, r3, #31
   833c6:	bf1c      	itt	ne
   833c8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   833cc:	f800 3b01 	strbne.w	r3, [r0], #1
   833d0:	d3a4      	bcc.n	8331c <memcpy+0xc>
   833d2:	f831 3b02 	ldrh.w	r3, [r1], #2
   833d6:	f820 3b02 	strh.w	r3, [r0], #2
   833da:	e79f      	b.n	8331c <memcpy+0xc>
   833dc:	3a04      	subs	r2, #4
   833de:	d3d9      	bcc.n	83394 <memcpy+0x84>
   833e0:	3a01      	subs	r2, #1
   833e2:	f811 3b01 	ldrb.w	r3, [r1], #1
   833e6:	f800 3b01 	strb.w	r3, [r0], #1
   833ea:	d2f9      	bcs.n	833e0 <memcpy+0xd0>
   833ec:	780b      	ldrb	r3, [r1, #0]
   833ee:	7003      	strb	r3, [r0, #0]
   833f0:	784b      	ldrb	r3, [r1, #1]
   833f2:	7043      	strb	r3, [r0, #1]
   833f4:	788b      	ldrb	r3, [r1, #2]
   833f6:	7083      	strb	r3, [r0, #2]
   833f8:	4660      	mov	r0, ip
   833fa:	4770      	bx	lr

000833fc <memmove>:
   833fc:	4288      	cmp	r0, r1
   833fe:	b5f0      	push	{r4, r5, r6, r7, lr}
   83400:	d90d      	bls.n	8341e <memmove+0x22>
   83402:	188b      	adds	r3, r1, r2
   83404:	4298      	cmp	r0, r3
   83406:	d20a      	bcs.n	8341e <memmove+0x22>
   83408:	1884      	adds	r4, r0, r2
   8340a:	2a00      	cmp	r2, #0
   8340c:	d051      	beq.n	834b2 <memmove+0xb6>
   8340e:	4622      	mov	r2, r4
   83410:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   83414:	4299      	cmp	r1, r3
   83416:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8341a:	d1f9      	bne.n	83410 <memmove+0x14>
   8341c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8341e:	2a0f      	cmp	r2, #15
   83420:	d948      	bls.n	834b4 <memmove+0xb8>
   83422:	ea41 0300 	orr.w	r3, r1, r0
   83426:	079b      	lsls	r3, r3, #30
   83428:	d146      	bne.n	834b8 <memmove+0xbc>
   8342a:	4615      	mov	r5, r2
   8342c:	f100 0410 	add.w	r4, r0, #16
   83430:	f101 0310 	add.w	r3, r1, #16
   83434:	f853 6c10 	ldr.w	r6, [r3, #-16]
   83438:	3d10      	subs	r5, #16
   8343a:	f844 6c10 	str.w	r6, [r4, #-16]
   8343e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   83442:	2d0f      	cmp	r5, #15
   83444:	f844 6c0c 	str.w	r6, [r4, #-12]
   83448:	f853 6c08 	ldr.w	r6, [r3, #-8]
   8344c:	f104 0410 	add.w	r4, r4, #16
   83450:	f844 6c18 	str.w	r6, [r4, #-24]
   83454:	f853 6c04 	ldr.w	r6, [r3, #-4]
   83458:	f103 0310 	add.w	r3, r3, #16
   8345c:	f844 6c14 	str.w	r6, [r4, #-20]
   83460:	d8e8      	bhi.n	83434 <memmove+0x38>
   83462:	f1a2 0310 	sub.w	r3, r2, #16
   83466:	f023 030f 	bic.w	r3, r3, #15
   8346a:	f002 0e0f 	and.w	lr, r2, #15
   8346e:	3310      	adds	r3, #16
   83470:	f1be 0f03 	cmp.w	lr, #3
   83474:	4419      	add	r1, r3
   83476:	4403      	add	r3, r0
   83478:	d921      	bls.n	834be <memmove+0xc2>
   8347a:	460e      	mov	r6, r1
   8347c:	4674      	mov	r4, lr
   8347e:	1f1d      	subs	r5, r3, #4
   83480:	f856 7b04 	ldr.w	r7, [r6], #4
   83484:	3c04      	subs	r4, #4
   83486:	2c03      	cmp	r4, #3
   83488:	f845 7f04 	str.w	r7, [r5, #4]!
   8348c:	d8f8      	bhi.n	83480 <memmove+0x84>
   8348e:	f1ae 0404 	sub.w	r4, lr, #4
   83492:	f024 0403 	bic.w	r4, r4, #3
   83496:	3404      	adds	r4, #4
   83498:	4421      	add	r1, r4
   8349a:	4423      	add	r3, r4
   8349c:	f002 0203 	and.w	r2, r2, #3
   834a0:	b162      	cbz	r2, 834bc <memmove+0xc0>
   834a2:	3b01      	subs	r3, #1
   834a4:	440a      	add	r2, r1
   834a6:	f811 4b01 	ldrb.w	r4, [r1], #1
   834aa:	428a      	cmp	r2, r1
   834ac:	f803 4f01 	strb.w	r4, [r3, #1]!
   834b0:	d1f9      	bne.n	834a6 <memmove+0xaa>
   834b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   834b4:	4603      	mov	r3, r0
   834b6:	e7f3      	b.n	834a0 <memmove+0xa4>
   834b8:	4603      	mov	r3, r0
   834ba:	e7f2      	b.n	834a2 <memmove+0xa6>
   834bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   834be:	4672      	mov	r2, lr
   834c0:	e7ee      	b.n	834a0 <memmove+0xa4>
   834c2:	bf00      	nop

000834c4 <__malloc_lock>:
   834c4:	4801      	ldr	r0, [pc, #4]	; (834cc <__malloc_lock+0x8>)
   834c6:	f7ff bba1 	b.w	82c0c <__retarget_lock_acquire_recursive>
   834ca:	bf00      	nop
   834cc:	20070c98 	.word	0x20070c98

000834d0 <__malloc_unlock>:
   834d0:	4801      	ldr	r0, [pc, #4]	; (834d8 <__malloc_unlock+0x8>)
   834d2:	f7ff bb9d 	b.w	82c10 <__retarget_lock_release_recursive>
   834d6:	bf00      	nop
   834d8:	20070c98 	.word	0x20070c98

000834dc <_realloc_r>:
   834dc:	2900      	cmp	r1, #0
   834de:	f000 8094 	beq.w	8360a <_realloc_r+0x12e>
   834e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   834e6:	460c      	mov	r4, r1
   834e8:	4615      	mov	r5, r2
   834ea:	b083      	sub	sp, #12
   834ec:	4680      	mov	r8, r0
   834ee:	f105 060b 	add.w	r6, r5, #11
   834f2:	f7ff ffe7 	bl	834c4 <__malloc_lock>
   834f6:	f854 ec04 	ldr.w	lr, [r4, #-4]
   834fa:	2e16      	cmp	r6, #22
   834fc:	f02e 0703 	bic.w	r7, lr, #3
   83500:	f1a4 0908 	sub.w	r9, r4, #8
   83504:	d83c      	bhi.n	83580 <_realloc_r+0xa4>
   83506:	2210      	movs	r2, #16
   83508:	4616      	mov	r6, r2
   8350a:	42b5      	cmp	r5, r6
   8350c:	d83d      	bhi.n	8358a <_realloc_r+0xae>
   8350e:	4297      	cmp	r7, r2
   83510:	da43      	bge.n	8359a <_realloc_r+0xbe>
   83512:	4bc6      	ldr	r3, [pc, #792]	; (8382c <_realloc_r+0x350>)
   83514:	eb09 0007 	add.w	r0, r9, r7
   83518:	6899      	ldr	r1, [r3, #8]
   8351a:	4288      	cmp	r0, r1
   8351c:	f000 80c3 	beq.w	836a6 <_realloc_r+0x1ca>
   83520:	6843      	ldr	r3, [r0, #4]
   83522:	f023 0101 	bic.w	r1, r3, #1
   83526:	4401      	add	r1, r0
   83528:	6849      	ldr	r1, [r1, #4]
   8352a:	07c9      	lsls	r1, r1, #31
   8352c:	d54d      	bpl.n	835ca <_realloc_r+0xee>
   8352e:	f01e 0f01 	tst.w	lr, #1
   83532:	f000 809b 	beq.w	8366c <_realloc_r+0x190>
   83536:	4629      	mov	r1, r5
   83538:	4640      	mov	r0, r8
   8353a:	f7ff fbeb 	bl	82d14 <_malloc_r>
   8353e:	4605      	mov	r5, r0
   83540:	2800      	cmp	r0, #0
   83542:	d03b      	beq.n	835bc <_realloc_r+0xe0>
   83544:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83548:	f1a0 0208 	sub.w	r2, r0, #8
   8354c:	f023 0301 	bic.w	r3, r3, #1
   83550:	444b      	add	r3, r9
   83552:	429a      	cmp	r2, r3
   83554:	f000 812b 	beq.w	837ae <_realloc_r+0x2d2>
   83558:	1f3a      	subs	r2, r7, #4
   8355a:	2a24      	cmp	r2, #36	; 0x24
   8355c:	f200 8118 	bhi.w	83790 <_realloc_r+0x2b4>
   83560:	2a13      	cmp	r2, #19
   83562:	f200 80eb 	bhi.w	8373c <_realloc_r+0x260>
   83566:	4603      	mov	r3, r0
   83568:	4622      	mov	r2, r4
   8356a:	6811      	ldr	r1, [r2, #0]
   8356c:	6019      	str	r1, [r3, #0]
   8356e:	6851      	ldr	r1, [r2, #4]
   83570:	6059      	str	r1, [r3, #4]
   83572:	6892      	ldr	r2, [r2, #8]
   83574:	609a      	str	r2, [r3, #8]
   83576:	4621      	mov	r1, r4
   83578:	4640      	mov	r0, r8
   8357a:	f7ff f8ad 	bl	826d8 <_free_r>
   8357e:	e01d      	b.n	835bc <_realloc_r+0xe0>
   83580:	f026 0607 	bic.w	r6, r6, #7
   83584:	2e00      	cmp	r6, #0
   83586:	4632      	mov	r2, r6
   83588:	dabf      	bge.n	8350a <_realloc_r+0x2e>
   8358a:	2500      	movs	r5, #0
   8358c:	230c      	movs	r3, #12
   8358e:	4628      	mov	r0, r5
   83590:	f8c8 3000 	str.w	r3, [r8]
   83594:	b003      	add	sp, #12
   83596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8359a:	4625      	mov	r5, r4
   8359c:	1bbb      	subs	r3, r7, r6
   8359e:	2b0f      	cmp	r3, #15
   835a0:	f8d9 2004 	ldr.w	r2, [r9, #4]
   835a4:	d81d      	bhi.n	835e2 <_realloc_r+0x106>
   835a6:	f002 0201 	and.w	r2, r2, #1
   835aa:	433a      	orrs	r2, r7
   835ac:	eb09 0107 	add.w	r1, r9, r7
   835b0:	f8c9 2004 	str.w	r2, [r9, #4]
   835b4:	684b      	ldr	r3, [r1, #4]
   835b6:	f043 0301 	orr.w	r3, r3, #1
   835ba:	604b      	str	r3, [r1, #4]
   835bc:	4640      	mov	r0, r8
   835be:	f7ff ff87 	bl	834d0 <__malloc_unlock>
   835c2:	4628      	mov	r0, r5
   835c4:	b003      	add	sp, #12
   835c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   835ca:	f023 0303 	bic.w	r3, r3, #3
   835ce:	18f9      	adds	r1, r7, r3
   835d0:	4291      	cmp	r1, r2
   835d2:	db1d      	blt.n	83610 <_realloc_r+0x134>
   835d4:	68c3      	ldr	r3, [r0, #12]
   835d6:	6882      	ldr	r2, [r0, #8]
   835d8:	4625      	mov	r5, r4
   835da:	60d3      	str	r3, [r2, #12]
   835dc:	460f      	mov	r7, r1
   835de:	609a      	str	r2, [r3, #8]
   835e0:	e7dc      	b.n	8359c <_realloc_r+0xc0>
   835e2:	f002 0201 	and.w	r2, r2, #1
   835e6:	eb09 0106 	add.w	r1, r9, r6
   835ea:	f043 0301 	orr.w	r3, r3, #1
   835ee:	4332      	orrs	r2, r6
   835f0:	f8c9 2004 	str.w	r2, [r9, #4]
   835f4:	444f      	add	r7, r9
   835f6:	604b      	str	r3, [r1, #4]
   835f8:	687b      	ldr	r3, [r7, #4]
   835fa:	3108      	adds	r1, #8
   835fc:	f043 0301 	orr.w	r3, r3, #1
   83600:	607b      	str	r3, [r7, #4]
   83602:	4640      	mov	r0, r8
   83604:	f7ff f868 	bl	826d8 <_free_r>
   83608:	e7d8      	b.n	835bc <_realloc_r+0xe0>
   8360a:	4611      	mov	r1, r2
   8360c:	f7ff bb82 	b.w	82d14 <_malloc_r>
   83610:	f01e 0f01 	tst.w	lr, #1
   83614:	d18f      	bne.n	83536 <_realloc_r+0x5a>
   83616:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8361a:	eba9 0a01 	sub.w	sl, r9, r1
   8361e:	f8da 1004 	ldr.w	r1, [sl, #4]
   83622:	f021 0103 	bic.w	r1, r1, #3
   83626:	440b      	add	r3, r1
   83628:	443b      	add	r3, r7
   8362a:	4293      	cmp	r3, r2
   8362c:	db26      	blt.n	8367c <_realloc_r+0x1a0>
   8362e:	4655      	mov	r5, sl
   83630:	68c1      	ldr	r1, [r0, #12]
   83632:	6880      	ldr	r0, [r0, #8]
   83634:	1f3a      	subs	r2, r7, #4
   83636:	60c1      	str	r1, [r0, #12]
   83638:	6088      	str	r0, [r1, #8]
   8363a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8363e:	f8da 100c 	ldr.w	r1, [sl, #12]
   83642:	2a24      	cmp	r2, #36	; 0x24
   83644:	60c1      	str	r1, [r0, #12]
   83646:	6088      	str	r0, [r1, #8]
   83648:	d826      	bhi.n	83698 <_realloc_r+0x1bc>
   8364a:	2a13      	cmp	r2, #19
   8364c:	f240 8081 	bls.w	83752 <_realloc_r+0x276>
   83650:	6821      	ldr	r1, [r4, #0]
   83652:	2a1b      	cmp	r2, #27
   83654:	f8ca 1008 	str.w	r1, [sl, #8]
   83658:	6861      	ldr	r1, [r4, #4]
   8365a:	f8ca 100c 	str.w	r1, [sl, #12]
   8365e:	f200 80ad 	bhi.w	837bc <_realloc_r+0x2e0>
   83662:	f104 0008 	add.w	r0, r4, #8
   83666:	f10a 0210 	add.w	r2, sl, #16
   8366a:	e074      	b.n	83756 <_realloc_r+0x27a>
   8366c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83670:	eba9 0a03 	sub.w	sl, r9, r3
   83674:	f8da 1004 	ldr.w	r1, [sl, #4]
   83678:	f021 0103 	bic.w	r1, r1, #3
   8367c:	187b      	adds	r3, r7, r1
   8367e:	4293      	cmp	r3, r2
   83680:	f6ff af59 	blt.w	83536 <_realloc_r+0x5a>
   83684:	4655      	mov	r5, sl
   83686:	f8da 100c 	ldr.w	r1, [sl, #12]
   8368a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8368e:	1f3a      	subs	r2, r7, #4
   83690:	2a24      	cmp	r2, #36	; 0x24
   83692:	60c1      	str	r1, [r0, #12]
   83694:	6088      	str	r0, [r1, #8]
   83696:	d9d8      	bls.n	8364a <_realloc_r+0x16e>
   83698:	4621      	mov	r1, r4
   8369a:	4628      	mov	r0, r5
   8369c:	461f      	mov	r7, r3
   8369e:	46d1      	mov	r9, sl
   836a0:	f7ff feac 	bl	833fc <memmove>
   836a4:	e77a      	b.n	8359c <_realloc_r+0xc0>
   836a6:	6841      	ldr	r1, [r0, #4]
   836a8:	f106 0010 	add.w	r0, r6, #16
   836ac:	f021 0b03 	bic.w	fp, r1, #3
   836b0:	44bb      	add	fp, r7
   836b2:	4583      	cmp	fp, r0
   836b4:	da58      	bge.n	83768 <_realloc_r+0x28c>
   836b6:	f01e 0f01 	tst.w	lr, #1
   836ba:	f47f af3c 	bne.w	83536 <_realloc_r+0x5a>
   836be:	f854 1c08 	ldr.w	r1, [r4, #-8]
   836c2:	eba9 0a01 	sub.w	sl, r9, r1
   836c6:	f8da 1004 	ldr.w	r1, [sl, #4]
   836ca:	f021 0103 	bic.w	r1, r1, #3
   836ce:	448b      	add	fp, r1
   836d0:	4558      	cmp	r0, fp
   836d2:	dcd3      	bgt.n	8367c <_realloc_r+0x1a0>
   836d4:	4655      	mov	r5, sl
   836d6:	f8da 100c 	ldr.w	r1, [sl, #12]
   836da:	f855 0f08 	ldr.w	r0, [r5, #8]!
   836de:	1f3a      	subs	r2, r7, #4
   836e0:	2a24      	cmp	r2, #36	; 0x24
   836e2:	60c1      	str	r1, [r0, #12]
   836e4:	6088      	str	r0, [r1, #8]
   836e6:	f200 808d 	bhi.w	83804 <_realloc_r+0x328>
   836ea:	2a13      	cmp	r2, #19
   836ec:	f240 8087 	bls.w	837fe <_realloc_r+0x322>
   836f0:	6821      	ldr	r1, [r4, #0]
   836f2:	2a1b      	cmp	r2, #27
   836f4:	f8ca 1008 	str.w	r1, [sl, #8]
   836f8:	6861      	ldr	r1, [r4, #4]
   836fa:	f8ca 100c 	str.w	r1, [sl, #12]
   836fe:	f200 8088 	bhi.w	83812 <_realloc_r+0x336>
   83702:	f104 0108 	add.w	r1, r4, #8
   83706:	f10a 0210 	add.w	r2, sl, #16
   8370a:	6808      	ldr	r0, [r1, #0]
   8370c:	6010      	str	r0, [r2, #0]
   8370e:	6848      	ldr	r0, [r1, #4]
   83710:	6050      	str	r0, [r2, #4]
   83712:	6889      	ldr	r1, [r1, #8]
   83714:	6091      	str	r1, [r2, #8]
   83716:	ebab 0206 	sub.w	r2, fp, r6
   8371a:	eb0a 0106 	add.w	r1, sl, r6
   8371e:	f042 0201 	orr.w	r2, r2, #1
   83722:	6099      	str	r1, [r3, #8]
   83724:	604a      	str	r2, [r1, #4]
   83726:	f8da 3004 	ldr.w	r3, [sl, #4]
   8372a:	4640      	mov	r0, r8
   8372c:	f003 0301 	and.w	r3, r3, #1
   83730:	431e      	orrs	r6, r3
   83732:	f8ca 6004 	str.w	r6, [sl, #4]
   83736:	f7ff fecb 	bl	834d0 <__malloc_unlock>
   8373a:	e742      	b.n	835c2 <_realloc_r+0xe6>
   8373c:	6823      	ldr	r3, [r4, #0]
   8373e:	2a1b      	cmp	r2, #27
   83740:	6003      	str	r3, [r0, #0]
   83742:	6863      	ldr	r3, [r4, #4]
   83744:	6043      	str	r3, [r0, #4]
   83746:	d827      	bhi.n	83798 <_realloc_r+0x2bc>
   83748:	f100 0308 	add.w	r3, r0, #8
   8374c:	f104 0208 	add.w	r2, r4, #8
   83750:	e70b      	b.n	8356a <_realloc_r+0x8e>
   83752:	4620      	mov	r0, r4
   83754:	462a      	mov	r2, r5
   83756:	6801      	ldr	r1, [r0, #0]
   83758:	461f      	mov	r7, r3
   8375a:	6011      	str	r1, [r2, #0]
   8375c:	6841      	ldr	r1, [r0, #4]
   8375e:	46d1      	mov	r9, sl
   83760:	6051      	str	r1, [r2, #4]
   83762:	6883      	ldr	r3, [r0, #8]
   83764:	6093      	str	r3, [r2, #8]
   83766:	e719      	b.n	8359c <_realloc_r+0xc0>
   83768:	ebab 0b06 	sub.w	fp, fp, r6
   8376c:	eb09 0106 	add.w	r1, r9, r6
   83770:	f04b 0201 	orr.w	r2, fp, #1
   83774:	6099      	str	r1, [r3, #8]
   83776:	604a      	str	r2, [r1, #4]
   83778:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8377c:	4640      	mov	r0, r8
   8377e:	f003 0301 	and.w	r3, r3, #1
   83782:	431e      	orrs	r6, r3
   83784:	f844 6c04 	str.w	r6, [r4, #-4]
   83788:	f7ff fea2 	bl	834d0 <__malloc_unlock>
   8378c:	4625      	mov	r5, r4
   8378e:	e718      	b.n	835c2 <_realloc_r+0xe6>
   83790:	4621      	mov	r1, r4
   83792:	f7ff fe33 	bl	833fc <memmove>
   83796:	e6ee      	b.n	83576 <_realloc_r+0x9a>
   83798:	68a3      	ldr	r3, [r4, #8]
   8379a:	2a24      	cmp	r2, #36	; 0x24
   8379c:	6083      	str	r3, [r0, #8]
   8379e:	68e3      	ldr	r3, [r4, #12]
   837a0:	60c3      	str	r3, [r0, #12]
   837a2:	d018      	beq.n	837d6 <_realloc_r+0x2fa>
   837a4:	f100 0310 	add.w	r3, r0, #16
   837a8:	f104 0210 	add.w	r2, r4, #16
   837ac:	e6dd      	b.n	8356a <_realloc_r+0x8e>
   837ae:	f850 3c04 	ldr.w	r3, [r0, #-4]
   837b2:	4625      	mov	r5, r4
   837b4:	f023 0303 	bic.w	r3, r3, #3
   837b8:	441f      	add	r7, r3
   837ba:	e6ef      	b.n	8359c <_realloc_r+0xc0>
   837bc:	68a1      	ldr	r1, [r4, #8]
   837be:	2a24      	cmp	r2, #36	; 0x24
   837c0:	f8ca 1010 	str.w	r1, [sl, #16]
   837c4:	68e1      	ldr	r1, [r4, #12]
   837c6:	f8ca 1014 	str.w	r1, [sl, #20]
   837ca:	d00d      	beq.n	837e8 <_realloc_r+0x30c>
   837cc:	f104 0010 	add.w	r0, r4, #16
   837d0:	f10a 0218 	add.w	r2, sl, #24
   837d4:	e7bf      	b.n	83756 <_realloc_r+0x27a>
   837d6:	6922      	ldr	r2, [r4, #16]
   837d8:	f100 0318 	add.w	r3, r0, #24
   837dc:	6102      	str	r2, [r0, #16]
   837de:	6961      	ldr	r1, [r4, #20]
   837e0:	f104 0218 	add.w	r2, r4, #24
   837e4:	6141      	str	r1, [r0, #20]
   837e6:	e6c0      	b.n	8356a <_realloc_r+0x8e>
   837e8:	6922      	ldr	r2, [r4, #16]
   837ea:	f104 0018 	add.w	r0, r4, #24
   837ee:	f8ca 2018 	str.w	r2, [sl, #24]
   837f2:	6961      	ldr	r1, [r4, #20]
   837f4:	f10a 0220 	add.w	r2, sl, #32
   837f8:	f8ca 101c 	str.w	r1, [sl, #28]
   837fc:	e7ab      	b.n	83756 <_realloc_r+0x27a>
   837fe:	4621      	mov	r1, r4
   83800:	462a      	mov	r2, r5
   83802:	e782      	b.n	8370a <_realloc_r+0x22e>
   83804:	4621      	mov	r1, r4
   83806:	4628      	mov	r0, r5
   83808:	9301      	str	r3, [sp, #4]
   8380a:	f7ff fdf7 	bl	833fc <memmove>
   8380e:	9b01      	ldr	r3, [sp, #4]
   83810:	e781      	b.n	83716 <_realloc_r+0x23a>
   83812:	68a1      	ldr	r1, [r4, #8]
   83814:	2a24      	cmp	r2, #36	; 0x24
   83816:	f8ca 1010 	str.w	r1, [sl, #16]
   8381a:	68e1      	ldr	r1, [r4, #12]
   8381c:	f8ca 1014 	str.w	r1, [sl, #20]
   83820:	d006      	beq.n	83830 <_realloc_r+0x354>
   83822:	f104 0110 	add.w	r1, r4, #16
   83826:	f10a 0218 	add.w	r2, sl, #24
   8382a:	e76e      	b.n	8370a <_realloc_r+0x22e>
   8382c:	200706e8 	.word	0x200706e8
   83830:	6922      	ldr	r2, [r4, #16]
   83832:	f104 0118 	add.w	r1, r4, #24
   83836:	f8ca 2018 	str.w	r2, [sl, #24]
   8383a:	6960      	ldr	r0, [r4, #20]
   8383c:	f10a 0220 	add.w	r2, sl, #32
   83840:	f8ca 001c 	str.w	r0, [sl, #28]
   83844:	e761      	b.n	8370a <_realloc_r+0x22e>
   83846:	bf00      	nop

00083848 <_sbrk_r>:
   83848:	b538      	push	{r3, r4, r5, lr}
   8384a:	2300      	movs	r3, #0
   8384c:	4c06      	ldr	r4, [pc, #24]	; (83868 <_sbrk_r+0x20>)
   8384e:	4605      	mov	r5, r0
   83850:	4608      	mov	r0, r1
   83852:	6023      	str	r3, [r4, #0]
   83854:	f7fd fb96 	bl	80f84 <_sbrk>
   83858:	1c43      	adds	r3, r0, #1
   8385a:	d000      	beq.n	8385e <_sbrk_r+0x16>
   8385c:	bd38      	pop	{r3, r4, r5, pc}
   8385e:	6823      	ldr	r3, [r4, #0]
   83860:	2b00      	cmp	r3, #0
   83862:	d0fb      	beq.n	8385c <_sbrk_r+0x14>
   83864:	602b      	str	r3, [r5, #0]
   83866:	bd38      	pop	{r3, r4, r5, pc}
   83868:	20070cac 	.word	0x20070cac

0008386c <__sread>:
   8386c:	b510      	push	{r4, lr}
   8386e:	460c      	mov	r4, r1
   83870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83874:	f000 fa22 	bl	83cbc <_read_r>
   83878:	2800      	cmp	r0, #0
   8387a:	db03      	blt.n	83884 <__sread+0x18>
   8387c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8387e:	4403      	add	r3, r0
   83880:	6523      	str	r3, [r4, #80]	; 0x50
   83882:	bd10      	pop	{r4, pc}
   83884:	89a3      	ldrh	r3, [r4, #12]
   83886:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8388a:	81a3      	strh	r3, [r4, #12]
   8388c:	bd10      	pop	{r4, pc}
   8388e:	bf00      	nop

00083890 <__swrite>:
   83890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83894:	460c      	mov	r4, r1
   83896:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8389a:	461f      	mov	r7, r3
   8389c:	05cb      	lsls	r3, r1, #23
   8389e:	4616      	mov	r6, r2
   838a0:	4605      	mov	r5, r0
   838a2:	d507      	bpl.n	838b4 <__swrite+0x24>
   838a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   838a8:	2302      	movs	r3, #2
   838aa:	2200      	movs	r2, #0
   838ac:	f000 f9f0 	bl	83c90 <_lseek_r>
   838b0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   838b4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   838b8:	81a1      	strh	r1, [r4, #12]
   838ba:	463b      	mov	r3, r7
   838bc:	4632      	mov	r2, r6
   838be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   838c2:	4628      	mov	r0, r5
   838c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   838c8:	f000 b8d0 	b.w	83a6c <_write_r>

000838cc <__sseek>:
   838cc:	b510      	push	{r4, lr}
   838ce:	460c      	mov	r4, r1
   838d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   838d4:	f000 f9dc 	bl	83c90 <_lseek_r>
   838d8:	89a3      	ldrh	r3, [r4, #12]
   838da:	1c42      	adds	r2, r0, #1
   838dc:	bf0e      	itee	eq
   838de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   838e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   838e6:	6520      	strne	r0, [r4, #80]	; 0x50
   838e8:	81a3      	strh	r3, [r4, #12]
   838ea:	bd10      	pop	{r4, pc}

000838ec <__sclose>:
   838ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   838f0:	f000 b934 	b.w	83b5c <_close_r>

000838f4 <strlen>:
   838f4:	f020 0103 	bic.w	r1, r0, #3
   838f8:	f010 0003 	ands.w	r0, r0, #3
   838fc:	f1c0 0000 	rsb	r0, r0, #0
   83900:	f851 3b04 	ldr.w	r3, [r1], #4
   83904:	f100 0c04 	add.w	ip, r0, #4
   83908:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8390c:	f06f 0200 	mvn.w	r2, #0
   83910:	bf1c      	itt	ne
   83912:	fa22 f20c 	lsrne.w	r2, r2, ip
   83916:	4313      	orrne	r3, r2
   83918:	f04f 0c01 	mov.w	ip, #1
   8391c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   83920:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   83924:	eba3 020c 	sub.w	r2, r3, ip
   83928:	ea22 0203 	bic.w	r2, r2, r3
   8392c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   83930:	bf04      	itt	eq
   83932:	f851 3b04 	ldreq.w	r3, [r1], #4
   83936:	3004      	addeq	r0, #4
   83938:	d0f4      	beq.n	83924 <strlen+0x30>
   8393a:	f1c2 0100 	rsb	r1, r2, #0
   8393e:	ea02 0201 	and.w	r2, r2, r1
   83942:	fab2 f282 	clz	r2, r2
   83946:	f1c2 021f 	rsb	r2, r2, #31
   8394a:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   8394e:	4770      	bx	lr

00083950 <__swbuf_r>:
   83950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83952:	460d      	mov	r5, r1
   83954:	4614      	mov	r4, r2
   83956:	4606      	mov	r6, r0
   83958:	b110      	cbz	r0, 83960 <__swbuf_r+0x10>
   8395a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8395c:	2b00      	cmp	r3, #0
   8395e:	d04b      	beq.n	839f8 <__swbuf_r+0xa8>
   83960:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   83964:	69a3      	ldr	r3, [r4, #24]
   83966:	b291      	uxth	r1, r2
   83968:	0708      	lsls	r0, r1, #28
   8396a:	60a3      	str	r3, [r4, #8]
   8396c:	d539      	bpl.n	839e2 <__swbuf_r+0x92>
   8396e:	6923      	ldr	r3, [r4, #16]
   83970:	2b00      	cmp	r3, #0
   83972:	d036      	beq.n	839e2 <__swbuf_r+0x92>
   83974:	b2ed      	uxtb	r5, r5
   83976:	0489      	lsls	r1, r1, #18
   83978:	462f      	mov	r7, r5
   8397a:	d515      	bpl.n	839a8 <__swbuf_r+0x58>
   8397c:	6822      	ldr	r2, [r4, #0]
   8397e:	6961      	ldr	r1, [r4, #20]
   83980:	1ad3      	subs	r3, r2, r3
   83982:	428b      	cmp	r3, r1
   83984:	da1c      	bge.n	839c0 <__swbuf_r+0x70>
   83986:	3301      	adds	r3, #1
   83988:	68a1      	ldr	r1, [r4, #8]
   8398a:	1c50      	adds	r0, r2, #1
   8398c:	3901      	subs	r1, #1
   8398e:	60a1      	str	r1, [r4, #8]
   83990:	6020      	str	r0, [r4, #0]
   83992:	7015      	strb	r5, [r2, #0]
   83994:	6962      	ldr	r2, [r4, #20]
   83996:	429a      	cmp	r2, r3
   83998:	d01a      	beq.n	839d0 <__swbuf_r+0x80>
   8399a:	89a3      	ldrh	r3, [r4, #12]
   8399c:	07db      	lsls	r3, r3, #31
   8399e:	d501      	bpl.n	839a4 <__swbuf_r+0x54>
   839a0:	2d0a      	cmp	r5, #10
   839a2:	d015      	beq.n	839d0 <__swbuf_r+0x80>
   839a4:	4638      	mov	r0, r7
   839a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   839a8:	6e61      	ldr	r1, [r4, #100]	; 0x64
   839aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   839ae:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   839b2:	81a2      	strh	r2, [r4, #12]
   839b4:	6822      	ldr	r2, [r4, #0]
   839b6:	6661      	str	r1, [r4, #100]	; 0x64
   839b8:	6961      	ldr	r1, [r4, #20]
   839ba:	1ad3      	subs	r3, r2, r3
   839bc:	428b      	cmp	r3, r1
   839be:	dbe2      	blt.n	83986 <__swbuf_r+0x36>
   839c0:	4621      	mov	r1, r4
   839c2:	4630      	mov	r0, r6
   839c4:	f7fe fd0a 	bl	823dc <_fflush_r>
   839c8:	b940      	cbnz	r0, 839dc <__swbuf_r+0x8c>
   839ca:	2301      	movs	r3, #1
   839cc:	6822      	ldr	r2, [r4, #0]
   839ce:	e7db      	b.n	83988 <__swbuf_r+0x38>
   839d0:	4621      	mov	r1, r4
   839d2:	4630      	mov	r0, r6
   839d4:	f7fe fd02 	bl	823dc <_fflush_r>
   839d8:	2800      	cmp	r0, #0
   839da:	d0e3      	beq.n	839a4 <__swbuf_r+0x54>
   839dc:	f04f 37ff 	mov.w	r7, #4294967295
   839e0:	e7e0      	b.n	839a4 <__swbuf_r+0x54>
   839e2:	4621      	mov	r1, r4
   839e4:	4630      	mov	r0, r6
   839e6:	f7fe fbe9 	bl	821bc <__swsetup_r>
   839ea:	2800      	cmp	r0, #0
   839ec:	d1f6      	bne.n	839dc <__swbuf_r+0x8c>
   839ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   839f2:	6923      	ldr	r3, [r4, #16]
   839f4:	b291      	uxth	r1, r2
   839f6:	e7bd      	b.n	83974 <__swbuf_r+0x24>
   839f8:	f7fe fd48 	bl	8248c <__sinit>
   839fc:	e7b0      	b.n	83960 <__swbuf_r+0x10>
   839fe:	bf00      	nop

00083a00 <_wcrtomb_r>:
   83a00:	b5f0      	push	{r4, r5, r6, r7, lr}
   83a02:	4606      	mov	r6, r0
   83a04:	b085      	sub	sp, #20
   83a06:	461f      	mov	r7, r3
   83a08:	b189      	cbz	r1, 83a2e <_wcrtomb_r+0x2e>
   83a0a:	4c10      	ldr	r4, [pc, #64]	; (83a4c <_wcrtomb_r+0x4c>)
   83a0c:	4d10      	ldr	r5, [pc, #64]	; (83a50 <_wcrtomb_r+0x50>)
   83a0e:	6824      	ldr	r4, [r4, #0]
   83a10:	6b64      	ldr	r4, [r4, #52]	; 0x34
   83a12:	2c00      	cmp	r4, #0
   83a14:	bf08      	it	eq
   83a16:	462c      	moveq	r4, r5
   83a18:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   83a1c:	47a0      	blx	r4
   83a1e:	1c43      	adds	r3, r0, #1
   83a20:	d103      	bne.n	83a2a <_wcrtomb_r+0x2a>
   83a22:	2200      	movs	r2, #0
   83a24:	238a      	movs	r3, #138	; 0x8a
   83a26:	603a      	str	r2, [r7, #0]
   83a28:	6033      	str	r3, [r6, #0]
   83a2a:	b005      	add	sp, #20
   83a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83a2e:	460c      	mov	r4, r1
   83a30:	4a06      	ldr	r2, [pc, #24]	; (83a4c <_wcrtomb_r+0x4c>)
   83a32:	4d07      	ldr	r5, [pc, #28]	; (83a50 <_wcrtomb_r+0x50>)
   83a34:	6811      	ldr	r1, [r2, #0]
   83a36:	4622      	mov	r2, r4
   83a38:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   83a3a:	a901      	add	r1, sp, #4
   83a3c:	2c00      	cmp	r4, #0
   83a3e:	bf08      	it	eq
   83a40:	462c      	moveq	r4, r5
   83a42:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   83a46:	47a0      	blx	r4
   83a48:	e7e9      	b.n	83a1e <_wcrtomb_r+0x1e>
   83a4a:	bf00      	nop
   83a4c:	20070148 	.word	0x20070148
   83a50:	2007057c 	.word	0x2007057c

00083a54 <__ascii_wctomb>:
   83a54:	b119      	cbz	r1, 83a5e <__ascii_wctomb+0xa>
   83a56:	2aff      	cmp	r2, #255	; 0xff
   83a58:	d803      	bhi.n	83a62 <__ascii_wctomb+0xe>
   83a5a:	700a      	strb	r2, [r1, #0]
   83a5c:	2101      	movs	r1, #1
   83a5e:	4608      	mov	r0, r1
   83a60:	4770      	bx	lr
   83a62:	238a      	movs	r3, #138	; 0x8a
   83a64:	f04f 31ff 	mov.w	r1, #4294967295
   83a68:	6003      	str	r3, [r0, #0]
   83a6a:	e7f8      	b.n	83a5e <__ascii_wctomb+0xa>

00083a6c <_write_r>:
   83a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83a6e:	460e      	mov	r6, r1
   83a70:	2500      	movs	r5, #0
   83a72:	4c08      	ldr	r4, [pc, #32]	; (83a94 <_write_r+0x28>)
   83a74:	4611      	mov	r1, r2
   83a76:	4607      	mov	r7, r0
   83a78:	461a      	mov	r2, r3
   83a7a:	4630      	mov	r0, r6
   83a7c:	6025      	str	r5, [r4, #0]
   83a7e:	f7fc fbf1 	bl	80264 <_write>
   83a82:	1c43      	adds	r3, r0, #1
   83a84:	d000      	beq.n	83a88 <_write_r+0x1c>
   83a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83a88:	6823      	ldr	r3, [r4, #0]
   83a8a:	2b00      	cmp	r3, #0
   83a8c:	d0fb      	beq.n	83a86 <_write_r+0x1a>
   83a8e:	603b      	str	r3, [r7, #0]
   83a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83a92:	bf00      	nop
   83a94:	20070cac 	.word	0x20070cac

00083a98 <__register_exitproc>:
   83a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83a9c:	4d2c      	ldr	r5, [pc, #176]	; (83b50 <__register_exitproc+0xb8>)
   83a9e:	4606      	mov	r6, r0
   83aa0:	6828      	ldr	r0, [r5, #0]
   83aa2:	4698      	mov	r8, r3
   83aa4:	460f      	mov	r7, r1
   83aa6:	4691      	mov	r9, r2
   83aa8:	f7ff f8b0 	bl	82c0c <__retarget_lock_acquire_recursive>
   83aac:	4b29      	ldr	r3, [pc, #164]	; (83b54 <__register_exitproc+0xbc>)
   83aae:	681c      	ldr	r4, [r3, #0]
   83ab0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   83ab4:	2b00      	cmp	r3, #0
   83ab6:	d03e      	beq.n	83b36 <__register_exitproc+0x9e>
   83ab8:	685a      	ldr	r2, [r3, #4]
   83aba:	2a1f      	cmp	r2, #31
   83abc:	dc1c      	bgt.n	83af8 <__register_exitproc+0x60>
   83abe:	f102 0e01 	add.w	lr, r2, #1
   83ac2:	b176      	cbz	r6, 83ae2 <__register_exitproc+0x4a>
   83ac4:	2101      	movs	r1, #1
   83ac6:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   83aca:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   83ace:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   83ad2:	4091      	lsls	r1, r2
   83ad4:	4308      	orrs	r0, r1
   83ad6:	2e02      	cmp	r6, #2
   83ad8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   83adc:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   83ae0:	d023      	beq.n	83b2a <__register_exitproc+0x92>
   83ae2:	3202      	adds	r2, #2
   83ae4:	f8c3 e004 	str.w	lr, [r3, #4]
   83ae8:	6828      	ldr	r0, [r5, #0]
   83aea:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   83aee:	f7ff f88f 	bl	82c10 <__retarget_lock_release_recursive>
   83af2:	2000      	movs	r0, #0
   83af4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83af8:	4b17      	ldr	r3, [pc, #92]	; (83b58 <__register_exitproc+0xc0>)
   83afa:	b30b      	cbz	r3, 83b40 <__register_exitproc+0xa8>
   83afc:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83b00:	f7ff f900 	bl	82d04 <malloc>
   83b04:	4603      	mov	r3, r0
   83b06:	b1d8      	cbz	r0, 83b40 <__register_exitproc+0xa8>
   83b08:	2000      	movs	r0, #0
   83b0a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   83b0e:	f04f 0e01 	mov.w	lr, #1
   83b12:	6058      	str	r0, [r3, #4]
   83b14:	6019      	str	r1, [r3, #0]
   83b16:	4602      	mov	r2, r0
   83b18:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   83b1c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   83b20:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   83b24:	2e00      	cmp	r6, #0
   83b26:	d0dc      	beq.n	83ae2 <__register_exitproc+0x4a>
   83b28:	e7cc      	b.n	83ac4 <__register_exitproc+0x2c>
   83b2a:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   83b2e:	4301      	orrs	r1, r0
   83b30:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   83b34:	e7d5      	b.n	83ae2 <__register_exitproc+0x4a>
   83b36:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   83b3a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   83b3e:	e7bb      	b.n	83ab8 <__register_exitproc+0x20>
   83b40:	6828      	ldr	r0, [r5, #0]
   83b42:	f7ff f865 	bl	82c10 <__retarget_lock_release_recursive>
   83b46:	f04f 30ff 	mov.w	r0, #4294967295
   83b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83b4e:	bf00      	nop
   83b50:	20070578 	.word	0x20070578
   83b54:	00084028 	.word	0x00084028
   83b58:	00082d05 	.word	0x00082d05

00083b5c <_close_r>:
   83b5c:	b538      	push	{r3, r4, r5, lr}
   83b5e:	2300      	movs	r3, #0
   83b60:	4c06      	ldr	r4, [pc, #24]	; (83b7c <_close_r+0x20>)
   83b62:	4605      	mov	r5, r0
   83b64:	4608      	mov	r0, r1
   83b66:	6023      	str	r3, [r4, #0]
   83b68:	f7fd fa28 	bl	80fbc <_close>
   83b6c:	1c43      	adds	r3, r0, #1
   83b6e:	d000      	beq.n	83b72 <_close_r+0x16>
   83b70:	bd38      	pop	{r3, r4, r5, pc}
   83b72:	6823      	ldr	r3, [r4, #0]
   83b74:	2b00      	cmp	r3, #0
   83b76:	d0fb      	beq.n	83b70 <_close_r+0x14>
   83b78:	602b      	str	r3, [r5, #0]
   83b7a:	bd38      	pop	{r3, r4, r5, pc}
   83b7c:	20070cac 	.word	0x20070cac

00083b80 <_fclose_r>:
   83b80:	b570      	push	{r4, r5, r6, lr}
   83b82:	b159      	cbz	r1, 83b9c <_fclose_r+0x1c>
   83b84:	4605      	mov	r5, r0
   83b86:	460c      	mov	r4, r1
   83b88:	b110      	cbz	r0, 83b90 <_fclose_r+0x10>
   83b8a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83b8c:	2b00      	cmp	r3, #0
   83b8e:	d03c      	beq.n	83c0a <_fclose_r+0x8a>
   83b90:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83b92:	07d8      	lsls	r0, r3, #31
   83b94:	d505      	bpl.n	83ba2 <_fclose_r+0x22>
   83b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83b9a:	b92b      	cbnz	r3, 83ba8 <_fclose_r+0x28>
   83b9c:	2600      	movs	r6, #0
   83b9e:	4630      	mov	r0, r6
   83ba0:	bd70      	pop	{r4, r5, r6, pc}
   83ba2:	89a3      	ldrh	r3, [r4, #12]
   83ba4:	0599      	lsls	r1, r3, #22
   83ba6:	d53c      	bpl.n	83c22 <_fclose_r+0xa2>
   83ba8:	4621      	mov	r1, r4
   83baa:	4628      	mov	r0, r5
   83bac:	f7fe fb7a 	bl	822a4 <__sflush_r>
   83bb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83bb2:	4606      	mov	r6, r0
   83bb4:	b133      	cbz	r3, 83bc4 <_fclose_r+0x44>
   83bb6:	69e1      	ldr	r1, [r4, #28]
   83bb8:	4628      	mov	r0, r5
   83bba:	4798      	blx	r3
   83bbc:	2800      	cmp	r0, #0
   83bbe:	bfb8      	it	lt
   83bc0:	f04f 36ff 	movlt.w	r6, #4294967295
   83bc4:	89a3      	ldrh	r3, [r4, #12]
   83bc6:	061a      	lsls	r2, r3, #24
   83bc8:	d422      	bmi.n	83c10 <_fclose_r+0x90>
   83bca:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83bcc:	b141      	cbz	r1, 83be0 <_fclose_r+0x60>
   83bce:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83bd2:	4299      	cmp	r1, r3
   83bd4:	d002      	beq.n	83bdc <_fclose_r+0x5c>
   83bd6:	4628      	mov	r0, r5
   83bd8:	f7fe fd7e 	bl	826d8 <_free_r>
   83bdc:	2300      	movs	r3, #0
   83bde:	6323      	str	r3, [r4, #48]	; 0x30
   83be0:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83be2:	b121      	cbz	r1, 83bee <_fclose_r+0x6e>
   83be4:	4628      	mov	r0, r5
   83be6:	f7fe fd77 	bl	826d8 <_free_r>
   83bea:	2300      	movs	r3, #0
   83bec:	6463      	str	r3, [r4, #68]	; 0x44
   83bee:	f7fe fc7d 	bl	824ec <__sfp_lock_acquire>
   83bf2:	2200      	movs	r2, #0
   83bf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83bf6:	81a2      	strh	r2, [r4, #12]
   83bf8:	07db      	lsls	r3, r3, #31
   83bfa:	d50e      	bpl.n	83c1a <_fclose_r+0x9a>
   83bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83bfe:	f7ff f803 	bl	82c08 <__retarget_lock_close_recursive>
   83c02:	f7fe fc79 	bl	824f8 <__sfp_lock_release>
   83c06:	4630      	mov	r0, r6
   83c08:	bd70      	pop	{r4, r5, r6, pc}
   83c0a:	f7fe fc3f 	bl	8248c <__sinit>
   83c0e:	e7bf      	b.n	83b90 <_fclose_r+0x10>
   83c10:	6921      	ldr	r1, [r4, #16]
   83c12:	4628      	mov	r0, r5
   83c14:	f7fe fd60 	bl	826d8 <_free_r>
   83c18:	e7d7      	b.n	83bca <_fclose_r+0x4a>
   83c1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83c1c:	f7fe fff8 	bl	82c10 <__retarget_lock_release_recursive>
   83c20:	e7ec      	b.n	83bfc <_fclose_r+0x7c>
   83c22:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83c24:	f7fe fff2 	bl	82c0c <__retarget_lock_acquire_recursive>
   83c28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83c2c:	2b00      	cmp	r3, #0
   83c2e:	d1bb      	bne.n	83ba8 <_fclose_r+0x28>
   83c30:	6e66      	ldr	r6, [r4, #100]	; 0x64
   83c32:	f016 0601 	ands.w	r6, r6, #1
   83c36:	d1b1      	bne.n	83b9c <_fclose_r+0x1c>
   83c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83c3a:	f7fe ffe9 	bl	82c10 <__retarget_lock_release_recursive>
   83c3e:	4630      	mov	r0, r6
   83c40:	bd70      	pop	{r4, r5, r6, pc}
   83c42:	bf00      	nop

00083c44 <_fstat_r>:
   83c44:	b570      	push	{r4, r5, r6, lr}
   83c46:	460d      	mov	r5, r1
   83c48:	2300      	movs	r3, #0
   83c4a:	4c07      	ldr	r4, [pc, #28]	; (83c68 <_fstat_r+0x24>)
   83c4c:	4606      	mov	r6, r0
   83c4e:	4611      	mov	r1, r2
   83c50:	4628      	mov	r0, r5
   83c52:	6023      	str	r3, [r4, #0]
   83c54:	f7fd f9b5 	bl	80fc2 <_fstat>
   83c58:	1c43      	adds	r3, r0, #1
   83c5a:	d000      	beq.n	83c5e <_fstat_r+0x1a>
   83c5c:	bd70      	pop	{r4, r5, r6, pc}
   83c5e:	6823      	ldr	r3, [r4, #0]
   83c60:	2b00      	cmp	r3, #0
   83c62:	d0fb      	beq.n	83c5c <_fstat_r+0x18>
   83c64:	6033      	str	r3, [r6, #0]
   83c66:	bd70      	pop	{r4, r5, r6, pc}
   83c68:	20070cac 	.word	0x20070cac

00083c6c <_isatty_r>:
   83c6c:	b538      	push	{r3, r4, r5, lr}
   83c6e:	2300      	movs	r3, #0
   83c70:	4c06      	ldr	r4, [pc, #24]	; (83c8c <_isatty_r+0x20>)
   83c72:	4605      	mov	r5, r0
   83c74:	4608      	mov	r0, r1
   83c76:	6023      	str	r3, [r4, #0]
   83c78:	f7fd f9a8 	bl	80fcc <_isatty>
   83c7c:	1c43      	adds	r3, r0, #1
   83c7e:	d000      	beq.n	83c82 <_isatty_r+0x16>
   83c80:	bd38      	pop	{r3, r4, r5, pc}
   83c82:	6823      	ldr	r3, [r4, #0]
   83c84:	2b00      	cmp	r3, #0
   83c86:	d0fb      	beq.n	83c80 <_isatty_r+0x14>
   83c88:	602b      	str	r3, [r5, #0]
   83c8a:	bd38      	pop	{r3, r4, r5, pc}
   83c8c:	20070cac 	.word	0x20070cac

00083c90 <_lseek_r>:
   83c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83c92:	460e      	mov	r6, r1
   83c94:	2500      	movs	r5, #0
   83c96:	4c08      	ldr	r4, [pc, #32]	; (83cb8 <_lseek_r+0x28>)
   83c98:	4611      	mov	r1, r2
   83c9a:	4607      	mov	r7, r0
   83c9c:	461a      	mov	r2, r3
   83c9e:	4630      	mov	r0, r6
   83ca0:	6025      	str	r5, [r4, #0]
   83ca2:	f7fd f995 	bl	80fd0 <_lseek>
   83ca6:	1c43      	adds	r3, r0, #1
   83ca8:	d000      	beq.n	83cac <_lseek_r+0x1c>
   83caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83cac:	6823      	ldr	r3, [r4, #0]
   83cae:	2b00      	cmp	r3, #0
   83cb0:	d0fb      	beq.n	83caa <_lseek_r+0x1a>
   83cb2:	603b      	str	r3, [r7, #0]
   83cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83cb6:	bf00      	nop
   83cb8:	20070cac 	.word	0x20070cac

00083cbc <_read_r>:
   83cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83cbe:	460e      	mov	r6, r1
   83cc0:	2500      	movs	r5, #0
   83cc2:	4c08      	ldr	r4, [pc, #32]	; (83ce4 <_read_r+0x28>)
   83cc4:	4611      	mov	r1, r2
   83cc6:	4607      	mov	r7, r0
   83cc8:	461a      	mov	r2, r3
   83cca:	4630      	mov	r0, r6
   83ccc:	6025      	str	r5, [r4, #0]
   83cce:	f7fc faab 	bl	80228 <_read>
   83cd2:	1c43      	adds	r3, r0, #1
   83cd4:	d000      	beq.n	83cd8 <_read_r+0x1c>
   83cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83cd8:	6823      	ldr	r3, [r4, #0]
   83cda:	2b00      	cmp	r3, #0
   83cdc:	d0fb      	beq.n	83cd6 <_read_r+0x1a>
   83cde:	603b      	str	r3, [r7, #0]
   83ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83ce2:	bf00      	nop
   83ce4:	20070cac 	.word	0x20070cac

00083ce8 <__aeabi_uldivmod>:
   83ce8:	b953      	cbnz	r3, 83d00 <__aeabi_uldivmod+0x18>
   83cea:	b94a      	cbnz	r2, 83d00 <__aeabi_uldivmod+0x18>
   83cec:	2900      	cmp	r1, #0
   83cee:	bf08      	it	eq
   83cf0:	2800      	cmpeq	r0, #0
   83cf2:	bf1c      	itt	ne
   83cf4:	f04f 31ff 	movne.w	r1, #4294967295
   83cf8:	f04f 30ff 	movne.w	r0, #4294967295
   83cfc:	f000 b97a 	b.w	83ff4 <__aeabi_idiv0>
   83d00:	f1ad 0c08 	sub.w	ip, sp, #8
   83d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   83d08:	f000 f806 	bl	83d18 <__udivmoddi4>
   83d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
   83d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   83d14:	b004      	add	sp, #16
   83d16:	4770      	bx	lr

00083d18 <__udivmoddi4>:
   83d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83d1c:	468c      	mov	ip, r1
   83d1e:	460e      	mov	r6, r1
   83d20:	4604      	mov	r4, r0
   83d22:	9d08      	ldr	r5, [sp, #32]
   83d24:	2b00      	cmp	r3, #0
   83d26:	d150      	bne.n	83dca <__udivmoddi4+0xb2>
   83d28:	428a      	cmp	r2, r1
   83d2a:	4617      	mov	r7, r2
   83d2c:	d96c      	bls.n	83e08 <__udivmoddi4+0xf0>
   83d2e:	fab2 fe82 	clz	lr, r2
   83d32:	f1be 0f00 	cmp.w	lr, #0
   83d36:	d00b      	beq.n	83d50 <__udivmoddi4+0x38>
   83d38:	f1ce 0c20 	rsb	ip, lr, #32
   83d3c:	fa01 f60e 	lsl.w	r6, r1, lr
   83d40:	fa20 fc0c 	lsr.w	ip, r0, ip
   83d44:	fa02 f70e 	lsl.w	r7, r2, lr
   83d48:	ea4c 0c06 	orr.w	ip, ip, r6
   83d4c:	fa00 f40e 	lsl.w	r4, r0, lr
   83d50:	0c3a      	lsrs	r2, r7, #16
   83d52:	fbbc f9f2 	udiv	r9, ip, r2
   83d56:	b2bb      	uxth	r3, r7
   83d58:	fb02 cc19 	mls	ip, r2, r9, ip
   83d5c:	fb09 fa03 	mul.w	sl, r9, r3
   83d60:	ea4f 4814 	mov.w	r8, r4, lsr #16
   83d64:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   83d68:	45b2      	cmp	sl, r6
   83d6a:	d90a      	bls.n	83d82 <__udivmoddi4+0x6a>
   83d6c:	19f6      	adds	r6, r6, r7
   83d6e:	f109 31ff 	add.w	r1, r9, #4294967295
   83d72:	f080 8125 	bcs.w	83fc0 <__udivmoddi4+0x2a8>
   83d76:	45b2      	cmp	sl, r6
   83d78:	f240 8122 	bls.w	83fc0 <__udivmoddi4+0x2a8>
   83d7c:	f1a9 0902 	sub.w	r9, r9, #2
   83d80:	443e      	add	r6, r7
   83d82:	eba6 060a 	sub.w	r6, r6, sl
   83d86:	fbb6 f0f2 	udiv	r0, r6, r2
   83d8a:	fb02 6610 	mls	r6, r2, r0, r6
   83d8e:	fb00 f303 	mul.w	r3, r0, r3
   83d92:	b2a4      	uxth	r4, r4
   83d94:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   83d98:	42a3      	cmp	r3, r4
   83d9a:	d909      	bls.n	83db0 <__udivmoddi4+0x98>
   83d9c:	19e4      	adds	r4, r4, r7
   83d9e:	f100 32ff 	add.w	r2, r0, #4294967295
   83da2:	f080 810b 	bcs.w	83fbc <__udivmoddi4+0x2a4>
   83da6:	42a3      	cmp	r3, r4
   83da8:	f240 8108 	bls.w	83fbc <__udivmoddi4+0x2a4>
   83dac:	3802      	subs	r0, #2
   83dae:	443c      	add	r4, r7
   83db0:	2100      	movs	r1, #0
   83db2:	1ae4      	subs	r4, r4, r3
   83db4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   83db8:	2d00      	cmp	r5, #0
   83dba:	d062      	beq.n	83e82 <__udivmoddi4+0x16a>
   83dbc:	2300      	movs	r3, #0
   83dbe:	fa24 f40e 	lsr.w	r4, r4, lr
   83dc2:	602c      	str	r4, [r5, #0]
   83dc4:	606b      	str	r3, [r5, #4]
   83dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83dca:	428b      	cmp	r3, r1
   83dcc:	d907      	bls.n	83dde <__udivmoddi4+0xc6>
   83dce:	2d00      	cmp	r5, #0
   83dd0:	d055      	beq.n	83e7e <__udivmoddi4+0x166>
   83dd2:	2100      	movs	r1, #0
   83dd4:	e885 0041 	stmia.w	r5, {r0, r6}
   83dd8:	4608      	mov	r0, r1
   83dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83dde:	fab3 f183 	clz	r1, r3
   83de2:	2900      	cmp	r1, #0
   83de4:	f040 808f 	bne.w	83f06 <__udivmoddi4+0x1ee>
   83de8:	42b3      	cmp	r3, r6
   83dea:	d302      	bcc.n	83df2 <__udivmoddi4+0xda>
   83dec:	4282      	cmp	r2, r0
   83dee:	f200 80fc 	bhi.w	83fea <__udivmoddi4+0x2d2>
   83df2:	1a84      	subs	r4, r0, r2
   83df4:	eb66 0603 	sbc.w	r6, r6, r3
   83df8:	2001      	movs	r0, #1
   83dfa:	46b4      	mov	ip, r6
   83dfc:	2d00      	cmp	r5, #0
   83dfe:	d040      	beq.n	83e82 <__udivmoddi4+0x16a>
   83e00:	e885 1010 	stmia.w	r5, {r4, ip}
   83e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83e08:	b912      	cbnz	r2, 83e10 <__udivmoddi4+0xf8>
   83e0a:	2701      	movs	r7, #1
   83e0c:	fbb7 f7f2 	udiv	r7, r7, r2
   83e10:	fab7 fe87 	clz	lr, r7
   83e14:	f1be 0f00 	cmp.w	lr, #0
   83e18:	d135      	bne.n	83e86 <__udivmoddi4+0x16e>
   83e1a:	2101      	movs	r1, #1
   83e1c:	1bf6      	subs	r6, r6, r7
   83e1e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83e22:	fa1f f887 	uxth.w	r8, r7
   83e26:	fbb6 f2fc 	udiv	r2, r6, ip
   83e2a:	fb0c 6612 	mls	r6, ip, r2, r6
   83e2e:	fb08 f002 	mul.w	r0, r8, r2
   83e32:	0c23      	lsrs	r3, r4, #16
   83e34:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   83e38:	42b0      	cmp	r0, r6
   83e3a:	d907      	bls.n	83e4c <__udivmoddi4+0x134>
   83e3c:	19f6      	adds	r6, r6, r7
   83e3e:	f102 33ff 	add.w	r3, r2, #4294967295
   83e42:	d202      	bcs.n	83e4a <__udivmoddi4+0x132>
   83e44:	42b0      	cmp	r0, r6
   83e46:	f200 80d2 	bhi.w	83fee <__udivmoddi4+0x2d6>
   83e4a:	461a      	mov	r2, r3
   83e4c:	1a36      	subs	r6, r6, r0
   83e4e:	fbb6 f0fc 	udiv	r0, r6, ip
   83e52:	fb0c 6610 	mls	r6, ip, r0, r6
   83e56:	fb08 f800 	mul.w	r8, r8, r0
   83e5a:	b2a3      	uxth	r3, r4
   83e5c:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   83e60:	45a0      	cmp	r8, r4
   83e62:	d907      	bls.n	83e74 <__udivmoddi4+0x15c>
   83e64:	19e4      	adds	r4, r4, r7
   83e66:	f100 33ff 	add.w	r3, r0, #4294967295
   83e6a:	d202      	bcs.n	83e72 <__udivmoddi4+0x15a>
   83e6c:	45a0      	cmp	r8, r4
   83e6e:	f200 80b9 	bhi.w	83fe4 <__udivmoddi4+0x2cc>
   83e72:	4618      	mov	r0, r3
   83e74:	eba4 0408 	sub.w	r4, r4, r8
   83e78:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   83e7c:	e79c      	b.n	83db8 <__udivmoddi4+0xa0>
   83e7e:	4629      	mov	r1, r5
   83e80:	4628      	mov	r0, r5
   83e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83e86:	fa07 f70e 	lsl.w	r7, r7, lr
   83e8a:	f1ce 0320 	rsb	r3, lr, #32
   83e8e:	fa26 f203 	lsr.w	r2, r6, r3
   83e92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83e96:	fbb2 f1fc 	udiv	r1, r2, ip
   83e9a:	fa1f f887 	uxth.w	r8, r7
   83e9e:	fb0c 2211 	mls	r2, ip, r1, r2
   83ea2:	fa06 f60e 	lsl.w	r6, r6, lr
   83ea6:	fa20 f303 	lsr.w	r3, r0, r3
   83eaa:	fb01 f908 	mul.w	r9, r1, r8
   83eae:	4333      	orrs	r3, r6
   83eb0:	0c1e      	lsrs	r6, r3, #16
   83eb2:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   83eb6:	45b1      	cmp	r9, r6
   83eb8:	fa00 f40e 	lsl.w	r4, r0, lr
   83ebc:	d909      	bls.n	83ed2 <__udivmoddi4+0x1ba>
   83ebe:	19f6      	adds	r6, r6, r7
   83ec0:	f101 32ff 	add.w	r2, r1, #4294967295
   83ec4:	f080 808c 	bcs.w	83fe0 <__udivmoddi4+0x2c8>
   83ec8:	45b1      	cmp	r9, r6
   83eca:	f240 8089 	bls.w	83fe0 <__udivmoddi4+0x2c8>
   83ece:	3902      	subs	r1, #2
   83ed0:	443e      	add	r6, r7
   83ed2:	eba6 0609 	sub.w	r6, r6, r9
   83ed6:	fbb6 f0fc 	udiv	r0, r6, ip
   83eda:	fb0c 6210 	mls	r2, ip, r0, r6
   83ede:	fb00 f908 	mul.w	r9, r0, r8
   83ee2:	b29e      	uxth	r6, r3
   83ee4:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   83ee8:	45b1      	cmp	r9, r6
   83eea:	d907      	bls.n	83efc <__udivmoddi4+0x1e4>
   83eec:	19f6      	adds	r6, r6, r7
   83eee:	f100 33ff 	add.w	r3, r0, #4294967295
   83ef2:	d271      	bcs.n	83fd8 <__udivmoddi4+0x2c0>
   83ef4:	45b1      	cmp	r9, r6
   83ef6:	d96f      	bls.n	83fd8 <__udivmoddi4+0x2c0>
   83ef8:	3802      	subs	r0, #2
   83efa:	443e      	add	r6, r7
   83efc:	eba6 0609 	sub.w	r6, r6, r9
   83f00:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   83f04:	e78f      	b.n	83e26 <__udivmoddi4+0x10e>
   83f06:	f1c1 0720 	rsb	r7, r1, #32
   83f0a:	fa22 f807 	lsr.w	r8, r2, r7
   83f0e:	408b      	lsls	r3, r1
   83f10:	ea48 0303 	orr.w	r3, r8, r3
   83f14:	fa26 f407 	lsr.w	r4, r6, r7
   83f18:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   83f1c:	fbb4 f9fe 	udiv	r9, r4, lr
   83f20:	fa1f fc83 	uxth.w	ip, r3
   83f24:	fb0e 4419 	mls	r4, lr, r9, r4
   83f28:	408e      	lsls	r6, r1
   83f2a:	fa20 f807 	lsr.w	r8, r0, r7
   83f2e:	fb09 fa0c 	mul.w	sl, r9, ip
   83f32:	ea48 0806 	orr.w	r8, r8, r6
   83f36:	ea4f 4618 	mov.w	r6, r8, lsr #16
   83f3a:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   83f3e:	45a2      	cmp	sl, r4
   83f40:	fa02 f201 	lsl.w	r2, r2, r1
   83f44:	fa00 f601 	lsl.w	r6, r0, r1
   83f48:	d908      	bls.n	83f5c <__udivmoddi4+0x244>
   83f4a:	18e4      	adds	r4, r4, r3
   83f4c:	f109 30ff 	add.w	r0, r9, #4294967295
   83f50:	d244      	bcs.n	83fdc <__udivmoddi4+0x2c4>
   83f52:	45a2      	cmp	sl, r4
   83f54:	d942      	bls.n	83fdc <__udivmoddi4+0x2c4>
   83f56:	f1a9 0902 	sub.w	r9, r9, #2
   83f5a:	441c      	add	r4, r3
   83f5c:	eba4 040a 	sub.w	r4, r4, sl
   83f60:	fbb4 f0fe 	udiv	r0, r4, lr
   83f64:	fb0e 4410 	mls	r4, lr, r0, r4
   83f68:	fb00 fc0c 	mul.w	ip, r0, ip
   83f6c:	fa1f f888 	uxth.w	r8, r8
   83f70:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   83f74:	45a4      	cmp	ip, r4
   83f76:	d907      	bls.n	83f88 <__udivmoddi4+0x270>
   83f78:	18e4      	adds	r4, r4, r3
   83f7a:	f100 3eff 	add.w	lr, r0, #4294967295
   83f7e:	d229      	bcs.n	83fd4 <__udivmoddi4+0x2bc>
   83f80:	45a4      	cmp	ip, r4
   83f82:	d927      	bls.n	83fd4 <__udivmoddi4+0x2bc>
   83f84:	3802      	subs	r0, #2
   83f86:	441c      	add	r4, r3
   83f88:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   83f8c:	fba0 8902 	umull	r8, r9, r0, r2
   83f90:	eba4 0c0c 	sub.w	ip, r4, ip
   83f94:	45cc      	cmp	ip, r9
   83f96:	46c2      	mov	sl, r8
   83f98:	46ce      	mov	lr, r9
   83f9a:	d315      	bcc.n	83fc8 <__udivmoddi4+0x2b0>
   83f9c:	d012      	beq.n	83fc4 <__udivmoddi4+0x2ac>
   83f9e:	b155      	cbz	r5, 83fb6 <__udivmoddi4+0x29e>
   83fa0:	ebb6 030a 	subs.w	r3, r6, sl
   83fa4:	eb6c 060e 	sbc.w	r6, ip, lr
   83fa8:	fa06 f707 	lsl.w	r7, r6, r7
   83fac:	40cb      	lsrs	r3, r1
   83fae:	431f      	orrs	r7, r3
   83fb0:	40ce      	lsrs	r6, r1
   83fb2:	602f      	str	r7, [r5, #0]
   83fb4:	606e      	str	r6, [r5, #4]
   83fb6:	2100      	movs	r1, #0
   83fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83fbc:	4610      	mov	r0, r2
   83fbe:	e6f7      	b.n	83db0 <__udivmoddi4+0x98>
   83fc0:	4689      	mov	r9, r1
   83fc2:	e6de      	b.n	83d82 <__udivmoddi4+0x6a>
   83fc4:	4546      	cmp	r6, r8
   83fc6:	d2ea      	bcs.n	83f9e <__udivmoddi4+0x286>
   83fc8:	ebb8 0a02 	subs.w	sl, r8, r2
   83fcc:	eb69 0e03 	sbc.w	lr, r9, r3
   83fd0:	3801      	subs	r0, #1
   83fd2:	e7e4      	b.n	83f9e <__udivmoddi4+0x286>
   83fd4:	4670      	mov	r0, lr
   83fd6:	e7d7      	b.n	83f88 <__udivmoddi4+0x270>
   83fd8:	4618      	mov	r0, r3
   83fda:	e78f      	b.n	83efc <__udivmoddi4+0x1e4>
   83fdc:	4681      	mov	r9, r0
   83fde:	e7bd      	b.n	83f5c <__udivmoddi4+0x244>
   83fe0:	4611      	mov	r1, r2
   83fe2:	e776      	b.n	83ed2 <__udivmoddi4+0x1ba>
   83fe4:	3802      	subs	r0, #2
   83fe6:	443c      	add	r4, r7
   83fe8:	e744      	b.n	83e74 <__udivmoddi4+0x15c>
   83fea:	4608      	mov	r0, r1
   83fec:	e706      	b.n	83dfc <__udivmoddi4+0xe4>
   83fee:	3a02      	subs	r2, #2
   83ff0:	443e      	add	r6, r7
   83ff2:	e72b      	b.n	83e4c <__udivmoddi4+0x134>

00083ff4 <__aeabi_idiv0>:
   83ff4:	4770      	bx	lr
   83ff6:	bf00      	nop
   83ff8:	736e6f43 	.word	0x736e6f43
   83ffc:	20656c6f 	.word	0x20656c6f
   84000:	64616572 	.word	0x64616572
   84004:	00000a79 	.word	0x00000a79
   84008:	3d3d3d3d 	.word	0x3d3d3d3d
   8400c:	3d3d3d3d 	.word	0x3d3d3d3d
   84010:	3d3d3d3d 	.word	0x3d3d3d3d
   84014:	00000a3d 	.word	0x00000a3d
   84018:	0c040800 	.word	0x0c040800
   8401c:	0e060a02 	.word	0x0e060a02
   84020:	0d050901 	.word	0x0d050901
   84024:	0f070b03 	.word	0x0f070b03

00084028 <_global_impure_ptr>:
   84028:	20070150 33323130 37363534 62613938     P.. 0123456789ab
   84038:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
   84048:	76757473 7a797877 00000000 33323130     stuvwxyz....0123
   84058:	37363534 42413938 46454443 00000000     456789ABCDEF....
   84068:	33323130 37363534 62613938 66656463     0123456789abcdef
   84078:	00000000 6c756e28 0000296c              ....(null)..

00084084 <blanks.7217>:
   84084:	20202020 20202020 20202020 20202020                     

00084094 <zeroes.7218>:
   84094:	30303030 30303030 30303030 30303030     0000000000000000
   840a4:	00000043 49534f50 00000058 0000002e     C...POSIX.......

000840b4 <_ctype_>:
   840b4:	20202000 20202020 28282020 20282828     .         ((((( 
   840c4:	20202020 20202020 20202020 20202020                     
   840d4:	10108820 10101010 10101010 10101010      ...............
   840e4:	04040410 04040404 10040404 10101010     ................
   840f4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   84104:	01010101 01010101 01010101 10101010     ................
   84114:	42421010 42424242 02020202 02020202     ..BBBBBB........
   84124:	02020202 02020202 02020202 10101010     ................
   84134:	00000020 00000000 00000000 00000000      ...............
	...

000841b8 <_init>:
   841b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   841ba:	bf00      	nop
   841bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   841be:	bc08      	pop	{r3}
   841c0:	469e      	mov	lr, r3
   841c2:	4770      	bx	lr

000841c4 <__init_array_start>:
   841c4:	00082285 	.word	0x00082285

000841c8 <__frame_dummy_init_array_entry>:
   841c8:	00080119                                ....

000841cc <_fini>:
   841cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   841ce:	bf00      	nop
   841d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   841d2:	bc08      	pop	{r3}
   841d4:	469e      	mov	lr, r3
   841d6:	4770      	bx	lr

000841d8 <__fini_array_start>:
   841d8:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <g_interrupt_enabled>:
2007012c:	00000001                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900                                ..=.

20070134 <test1>:
20070134:	00000001                                ....

20070138 <test2>:
20070138:	00000100                                ....

2007013c <test3>:
2007013c:	00010000                                ....

20070140 <test4>:
20070140:	01000000                                ....

20070144 <testaddr>:
20070144:	00010001                                ....

20070148 <_impure_ptr>:
20070148:	20070150 00000000                       P.. ....

20070150 <impure_data>:
20070150:	00000000 2007043c 200704a4 2007050c     ....<.. ... ... 
	...
200701f8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070208:	0005deec 0000000b 00000000 00000000     ................
	...

20070578 <__atexit_recursive_mutex>:
20070578:	20070c88                                ... 

2007057c <__global_locale>:
2007057c:	00000043 00000000 00000000 00000000     C...............
	...
2007059c:	00000043 00000000 00000000 00000000     C...............
	...
200705bc:	00000043 00000000 00000000 00000000     C...............
	...
200705dc:	00000043 00000000 00000000 00000000     C...............
	...
200705fc:	00000043 00000000 00000000 00000000     C...............
	...
2007061c:	00000043 00000000 00000000 00000000     C...............
	...
2007063c:	00000043 00000000 00000000 00000000     C...............
	...
2007065c:	00083a55 00083259 00000000 000840b4     U:..Y2.......@..
2007066c:	000840b0 00084064 00084064 00084064     .@..d@..d@..d@..
2007067c:	00084064 00084064 00084064 00084064     d@..d@..d@..d@..
2007068c:	00084064 00084064 ffffffff ffffffff     d@..d@..........
2007069c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706c4:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200706e8 <__malloc_av_>:
	...
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 
200709a0:	20070998 20070998 200709a0 200709a0     ... ... ... ... 
200709b0:	200709a8 200709a8 200709b0 200709b0     ... ... ... ... 
200709c0:	200709b8 200709b8 200709c0 200709c0     ... ... ... ... 
200709d0:	200709c8 200709c8 200709d0 200709d0     ... ... ... ... 
200709e0:	200709d8 200709d8 200709e0 200709e0     ... ... ... ... 
200709f0:	200709e8 200709e8 200709f0 200709f0     ... ... ... ... 
20070a00:	200709f8 200709f8 20070a00 20070a00     ... ... ... ... 
20070a10:	20070a08 20070a08 20070a10 20070a10     ... ... ... ... 
20070a20:	20070a18 20070a18 20070a20 20070a20     ... ...  ..  .. 
20070a30:	20070a28 20070a28 20070a30 20070a30     (.. (.. 0.. 0.. 
20070a40:	20070a38 20070a38 20070a40 20070a40     8.. 8.. @.. @.. 
20070a50:	20070a48 20070a48 20070a50 20070a50     H.. H.. P.. P.. 
20070a60:	20070a58 20070a58 20070a60 20070a60     X.. X.. `.. `.. 
20070a70:	20070a68 20070a68 20070a70 20070a70     h.. h.. p.. p.. 
20070a80:	20070a78 20070a78 20070a80 20070a80     x.. x.. ... ... 
20070a90:	20070a88 20070a88 20070a90 20070a90     ... ... ... ... 
20070aa0:	20070a98 20070a98 20070aa0 20070aa0     ... ... ... ... 
20070ab0:	20070aa8 20070aa8 20070ab0 20070ab0     ... ... ... ... 
20070ac0:	20070ab8 20070ab8 20070ac0 20070ac0     ... ... ... ... 
20070ad0:	20070ac8 20070ac8 20070ad0 20070ad0     ... ... ... ... 
20070ae0:	20070ad8 20070ad8 20070ae0 20070ae0     ... ... ... ... 

20070af0 <__malloc_sbrk_base>:
20070af0:	ffffffff                                ....

20070af4 <__malloc_trim_threshold>:
20070af4:	00020000                                ....
