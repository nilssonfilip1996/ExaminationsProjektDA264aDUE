
ExaminationsprojektDA264aDUE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000580c  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008580c  0008580c  0001580c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b10  20070000  00085814  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000004e4  20070b10  00086328  00020b10  2**3
                  ALLOC
  4 .stack        00002004  20070ff4  0008680c  00020b10  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020b10  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b39  2**0
                  CONTENTS, READONLY
  7 .debug_info   00021bdb  00000000  00000000  00020b92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004d12  00000000  00000000  0004276d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000067dc  00000000  00000000  0004747f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000e18  00000000  00000000  0004dc5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d08  00000000  00000000  0004ea73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001dad5  00000000  00000000  0004f77b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00018225  00000000  00000000  0006d250  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006711b  00000000  00000000  00085475  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002de0  00000000  00000000  000ec590  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	f8 2f 07 20 11 13 08 00 0d 13 08 00 0d 13 08 00     ./. ............
   80010:	0d 13 08 00 0d 13 08 00 0d 13 08 00 00 00 00 00     ................
	...
   8002c:	0d 13 08 00 0d 13 08 00 00 00 00 00 0d 13 08 00     ................
   8003c:	0d 13 08 00 0d 13 08 00 0d 13 08 00 0d 13 08 00     ................
   8004c:	0d 13 08 00 0d 13 08 00 0d 13 08 00 0d 13 08 00     ................
   8005c:	0d 13 08 00 0d 13 08 00 0d 13 08 00 00 00 00 00     ................
   8006c:	81 11 08 00 95 11 08 00 a9 11 08 00 bd 11 08 00     ................
	...
   80084:	71 05 08 00 0d 13 08 00 0d 13 08 00 0d 13 08 00     q...............
   80094:	0d 13 08 00 0d 13 08 00 0d 13 08 00 0d 13 08 00     ................
   800a4:	00 00 00 00 0d 13 08 00 61 0c 08 00 0d 13 08 00     ........a.......
   800b4:	0d 13 08 00 0d 13 08 00 0d 13 08 00 0d 13 08 00     ................
   800c4:	0d 13 08 00 0d 13 08 00 0d 13 08 00 0d 13 08 00     ................
   800d4:	0d 13 08 00 0d 13 08 00 0d 13 08 00 0d 13 08 00     ................
   800e4:	0d 13 08 00 0d 13 08 00 0d 13 08 00 0d 13 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070b10 	.word	0x20070b10
   80110:	00000000 	.word	0x00000000
   80114:	00085814 	.word	0x00085814

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00085814 	.word	0x00085814
   80154:	20070b14 	.word	0x20070b14
   80158:	00085814 	.word	0x00085814
   8015c:	00000000 	.word	0x00000000

00080160 <adc_setup>:
#include <asf.h>
#include "adcdac.h"


void adc_setup()
{
   80160:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_ADC);
   80162:	2025      	movs	r0, #37	; 0x25
   80164:	4b0e      	ldr	r3, [pc, #56]	; (801a0 <adc_setup+0x40>)
   80166:	4798      	blx	r3
	adc_init(ADC, sysclk_get_main_hz(), 20000000, 0);		//Configure for maximum frequency @ 84 MHz, CHECK THIS!!
   80168:	4c0e      	ldr	r4, [pc, #56]	; (801a4 <adc_setup+0x44>)
   8016a:	2300      	movs	r3, #0
   8016c:	4a0e      	ldr	r2, [pc, #56]	; (801a8 <adc_setup+0x48>)
   8016e:	490f      	ldr	r1, [pc, #60]	; (801ac <adc_setup+0x4c>)
   80170:	4620      	mov	r0, r4
   80172:	4d0f      	ldr	r5, [pc, #60]	; (801b0 <adc_setup+0x50>)
   80174:	47a8      	blx	r5
	adc_configure_timing(ADC, 0, 0, 0);
   80176:	2300      	movs	r3, #0
   80178:	461a      	mov	r2, r3
   8017a:	4619      	mov	r1, r3
   8017c:	4620      	mov	r0, r4
   8017e:	4d0d      	ldr	r5, [pc, #52]	; (801b4 <adc_setup+0x54>)
   80180:	47a8      	blx	r5
	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);
   80182:	2100      	movs	r1, #0
   80184:	4620      	mov	r0, r4
   80186:	4b0c      	ldr	r3, [pc, #48]	; (801b8 <adc_setup+0x58>)
   80188:	4798      	blx	r3
	adc_enable_channel(ADC, ADC_CHANNEL_10);				//PB17 - AD8 for Arduino
   8018a:	210a      	movs	r1, #10
   8018c:	4620      	mov	r0, r4
   8018e:	4b0b      	ldr	r3, [pc, #44]	; (801bc <adc_setup+0x5c>)
   80190:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);			//trigg just by software
   80192:	2200      	movs	r2, #0
   80194:	4611      	mov	r1, r2
   80196:	4620      	mov	r0, r4
   80198:	4b09      	ldr	r3, [pc, #36]	; (801c0 <adc_setup+0x60>)
   8019a:	4798      	blx	r3
   8019c:	bd38      	pop	{r3, r4, r5, pc}
   8019e:	bf00      	nop
   801a0:	000812b9 	.word	0x000812b9
   801a4:	400c0000 	.word	0x400c0000
   801a8:	01312d00 	.word	0x01312d00
   801ac:	0a037a00 	.word	0x0a037a00
   801b0:	0008039d 	.word	0x0008039d
   801b4:	000803ef 	.word	0x000803ef
   801b8:	000803d1 	.word	0x000803d1
   801bc:	00080411 	.word	0x00080411
   801c0:	000803e1 	.word	0x000803e1

000801c4 <dac_setup>:
}




void dac_setup() {
   801c4:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_DACC);
   801c6:	2026      	movs	r0, #38	; 0x26
   801c8:	4b0c      	ldr	r3, [pc, #48]	; (801fc <dac_setup+0x38>)
   801ca:	4798      	blx	r3
	dacc_reset(DACC);
   801cc:	4c0c      	ldr	r4, [pc, #48]	; (80200 <dac_setup+0x3c>)
   801ce:	4620      	mov	r0, r4
   801d0:	4b0c      	ldr	r3, [pc, #48]	; (80204 <dac_setup+0x40>)
   801d2:	4798      	blx	r3
	dacc_set_transfer_mode(DACC, 0);
   801d4:	2100      	movs	r1, #0
   801d6:	4620      	mov	r0, r4
   801d8:	4b0b      	ldr	r3, [pc, #44]	; (80208 <dac_setup+0x44>)
   801da:	4798      	blx	r3
	dacc_set_timing(DACC,1,1,0);			//1 is shortest refresh period, 1 max. speed, 0 startup time
   801dc:	2300      	movs	r3, #0
   801de:	2201      	movs	r2, #1
   801e0:	4611      	mov	r1, r2
   801e2:	4620      	mov	r0, r4
   801e4:	4d09      	ldr	r5, [pc, #36]	; (8020c <dac_setup+0x48>)
   801e6:	47a8      	blx	r5
	
	dacc_set_channel_selection(DACC,1);		//Channel DAC1
   801e8:	2101      	movs	r1, #1
   801ea:	4620      	mov	r0, r4
   801ec:	4b08      	ldr	r3, [pc, #32]	; (80210 <dac_setup+0x4c>)
   801ee:	4798      	blx	r3
	dacc_enable_channel(DACC, 1);			//enable DAC1
   801f0:	2101      	movs	r1, #1
   801f2:	4620      	mov	r0, r4
   801f4:	4b07      	ldr	r3, [pc, #28]	; (80214 <dac_setup+0x50>)
   801f6:	4798      	blx	r3
   801f8:	bd38      	pop	{r3, r4, r5, pc}
   801fa:	bf00      	nop
   801fc:	000812b9 	.word	0x000812b9
   80200:	400c8000 	.word	0x400c8000
   80204:	00080423 	.word	0x00080423
   80208:	00080429 	.word	0x00080429
   8020c:	0008045d 	.word	0x0008045d
   80210:	00080445 	.word	0x00080445
   80214:	0008048b 	.word	0x0008048b

00080218 <adc_get_value>:
}

uint32_t adc_get_value(void) {
   80218:	b538      	push	{r3, r4, r5, lr}
	adc_start(ADC);
   8021a:	4807      	ldr	r0, [pc, #28]	; (80238 <adc_get_value+0x20>)
   8021c:	4b07      	ldr	r3, [pc, #28]	; (8023c <adc_get_value+0x24>)
   8021e:	4798      	blx	r3
	while((adc_get_status(ADC) & 0x1<<24)==0);  //Wait until DRDY get high
   80220:	4d05      	ldr	r5, [pc, #20]	; (80238 <adc_get_value+0x20>)
   80222:	4c07      	ldr	r4, [pc, #28]	; (80240 <adc_get_value+0x28>)
   80224:	4628      	mov	r0, r5
   80226:	47a0      	blx	r4
   80228:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   8022c:	d0fa      	beq.n	80224 <adc_get_value+0xc>
	return adc_get_latest_value(ADC);
   8022e:	4802      	ldr	r0, [pc, #8]	; (80238 <adc_get_value+0x20>)
   80230:	4b04      	ldr	r3, [pc, #16]	; (80244 <adc_get_value+0x2c>)
   80232:	4798      	blx	r3
   80234:	bd38      	pop	{r3, r4, r5, pc}
   80236:	bf00      	nop
   80238:	400c0000 	.word	0x400c0000
   8023c:	0008040b 	.word	0x0008040b
   80240:	0008041f 	.word	0x0008041f
   80244:	0008041b 	.word	0x0008041b

00080248 <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   80248:	2a00      	cmp	r2, #0
   8024a:	d051      	beq.n	802f0 <usart_serial_read_packet+0xa8>
{
   8024c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80250:	b083      	sub	sp, #12
   80252:	4605      	mov	r5, r0
   80254:	460c      	mov	r4, r1
   80256:	4692      	mov	sl, r2
   80258:	448a      	add	sl, r1

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8025a:	4f26      	ldr	r7, [pc, #152]	; (802f4 <usart_serial_read_packet+0xac>)
		while (uart_read((Uart*)p_usart, data));
   8025c:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80308 <usart_serial_read_packet+0xc0>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80260:	4e25      	ldr	r6, [pc, #148]	; (802f8 <usart_serial_read_packet+0xb0>)
   80262:	e01d      	b.n	802a0 <usart_serial_read_packet+0x58>
		while (uart_read((Uart*)p_usart, data));
   80264:	4621      	mov	r1, r4
   80266:	4638      	mov	r0, r7
   80268:	47c8      	blx	r9
   8026a:	2800      	cmp	r0, #0
   8026c:	d1fa      	bne.n	80264 <usart_serial_read_packet+0x1c>
   8026e:	e021      	b.n	802b4 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   80270:	469b      	mov	fp, r3
   80272:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8030c <usart_serial_read_packet+0xc4>
   80276:	a901      	add	r1, sp, #4
   80278:	4658      	mov	r0, fp
   8027a:	47c0      	blx	r8
   8027c:	2800      	cmp	r0, #0
   8027e:	d1fa      	bne.n	80276 <usart_serial_read_packet+0x2e>
		*data = (uint8_t)(val & 0xFF);
   80280:	9b01      	ldr	r3, [sp, #4]
   80282:	7023      	strb	r3, [r4, #0]
   80284:	e019      	b.n	802ba <usart_serial_read_packet+0x72>
		while (usart_read(p_usart, &val));
   80286:	469b      	mov	fp, r3
   80288:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8030c <usart_serial_read_packet+0xc4>
   8028c:	a901      	add	r1, sp, #4
   8028e:	4658      	mov	r0, fp
   80290:	47c0      	blx	r8
   80292:	2800      	cmp	r0, #0
   80294:	d1fa      	bne.n	8028c <usart_serial_read_packet+0x44>
		*data = (uint8_t)(val & 0xFF);
   80296:	9b01      	ldr	r3, [sp, #4]
   80298:	7023      	strb	r3, [r4, #0]
		usart_serial_getchar(usart, data);
		len--;
		data++;
   8029a:	3401      	adds	r4, #1
	while (len) {
   8029c:	4554      	cmp	r4, sl
   8029e:	d023      	beq.n	802e8 <usart_serial_read_packet+0xa0>
	uint32_t val = 0;
   802a0:	2300      	movs	r3, #0
   802a2:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   802a4:	42bd      	cmp	r5, r7
   802a6:	d0dd      	beq.n	80264 <usart_serial_read_packet+0x1c>
	if (USART0 == p_usart) {
   802a8:	4b14      	ldr	r3, [pc, #80]	; (802fc <usart_serial_read_packet+0xb4>)
   802aa:	429d      	cmp	r5, r3
   802ac:	d0e0      	beq.n	80270 <usart_serial_read_packet+0x28>
	if (USART1 == p_usart) {
   802ae:	4b14      	ldr	r3, [pc, #80]	; (80300 <usart_serial_read_packet+0xb8>)
   802b0:	429d      	cmp	r5, r3
   802b2:	d0e8      	beq.n	80286 <usart_serial_read_packet+0x3e>
	if (USART2 == p_usart) {
   802b4:	4b13      	ldr	r3, [pc, #76]	; (80304 <usart_serial_read_packet+0xbc>)
   802b6:	429d      	cmp	r5, r3
   802b8:	d00b      	beq.n	802d2 <usart_serial_read_packet+0x8a>
	if (USART3 == p_usart) {
   802ba:	42b5      	cmp	r5, r6
   802bc:	d1ed      	bne.n	8029a <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   802be:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8030c <usart_serial_read_packet+0xc4>
   802c2:	a901      	add	r1, sp, #4
   802c4:	4630      	mov	r0, r6
   802c6:	47c0      	blx	r8
   802c8:	2800      	cmp	r0, #0
   802ca:	d1fa      	bne.n	802c2 <usart_serial_read_packet+0x7a>
		*data = (uint8_t)(val & 0xFF);
   802cc:	9b01      	ldr	r3, [sp, #4]
   802ce:	7023      	strb	r3, [r4, #0]
   802d0:	e7e3      	b.n	8029a <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   802d2:	469b      	mov	fp, r3
   802d4:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8030c <usart_serial_read_packet+0xc4>
   802d8:	a901      	add	r1, sp, #4
   802da:	4658      	mov	r0, fp
   802dc:	47c0      	blx	r8
   802de:	2800      	cmp	r0, #0
   802e0:	d1fa      	bne.n	802d8 <usart_serial_read_packet+0x90>
		*data = (uint8_t)(val & 0xFF);
   802e2:	9b01      	ldr	r3, [sp, #4]
   802e4:	7023      	strb	r3, [r4, #0]
   802e6:	e7d8      	b.n	8029a <usart_serial_read_packet+0x52>
	}
	return STATUS_OK;
}
   802e8:	2000      	movs	r0, #0
   802ea:	b003      	add	sp, #12
   802ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   802f0:	2000      	movs	r0, #0
   802f2:	4770      	bx	lr
   802f4:	400e0800 	.word	0x400e0800
   802f8:	400a4000 	.word	0x400a4000
   802fc:	40098000 	.word	0x40098000
   80300:	4009c000 	.word	0x4009c000
   80304:	400a0000 	.word	0x400a0000
   80308:	00080533 	.word	0x00080533
   8030c:	00080559 	.word	0x00080559

00080310 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   80314:	b980      	cbnz	r0, 80338 <_read+0x28>
   80316:	460c      	mov	r4, r1
   80318:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   8031a:	2a00      	cmp	r2, #0
   8031c:	dd0f      	ble.n	8033e <_read+0x2e>
   8031e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80320:	4e08      	ldr	r6, [pc, #32]	; (80344 <_read+0x34>)
   80322:	4d09      	ldr	r5, [pc, #36]	; (80348 <_read+0x38>)
   80324:	6830      	ldr	r0, [r6, #0]
   80326:	4621      	mov	r1, r4
   80328:	682b      	ldr	r3, [r5, #0]
   8032a:	4798      	blx	r3
		ptr++;
   8032c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   8032e:	42bc      	cmp	r4, r7
   80330:	d1f8      	bne.n	80324 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   80332:	4640      	mov	r0, r8
   80334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80338:	f04f 38ff 	mov.w	r8, #4294967295
   8033c:	e7f9      	b.n	80332 <_read+0x22>
	for (; len > 0; --len) {
   8033e:	4680      	mov	r8, r0
   80340:	e7f7      	b.n	80332 <_read+0x22>
   80342:	bf00      	nop
   80344:	20070fa8 	.word	0x20070fa8
   80348:	20070fa0 	.word	0x20070fa0

0008034c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   8034c:	3801      	subs	r0, #1
   8034e:	2802      	cmp	r0, #2
   80350:	d815      	bhi.n	8037e <_write+0x32>
{
   80352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80356:	460e      	mov	r6, r1
   80358:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   8035a:	b19a      	cbz	r2, 80384 <_write+0x38>
   8035c:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8035e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 80398 <_write+0x4c>
   80362:	4f0c      	ldr	r7, [pc, #48]	; (80394 <_write+0x48>)
   80364:	f8d8 0000 	ldr.w	r0, [r8]
   80368:	f815 1b01 	ldrb.w	r1, [r5], #1
   8036c:	683b      	ldr	r3, [r7, #0]
   8036e:	4798      	blx	r3
   80370:	2800      	cmp	r0, #0
   80372:	db0a      	blt.n	8038a <_write+0x3e>
   80374:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   80376:	3c01      	subs	r4, #1
   80378:	d1f4      	bne.n	80364 <_write+0x18>
   8037a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   8037e:	f04f 30ff 	mov.w	r0, #4294967295
   80382:	4770      	bx	lr
	for (; len != 0; --len) {
   80384:	4610      	mov	r0, r2
   80386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   8038a:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   8038e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80392:	bf00      	nop
   80394:	20070fa4 	.word	0x20070fa4
   80398:	20070fa8 	.word	0x20070fa8

0008039c <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   8039c:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   8039e:	2401      	movs	r4, #1
   803a0:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   803a2:	2400      	movs	r4, #0
   803a4:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   803a6:	f240 2502 	movw	r5, #514	; 0x202
   803aa:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   803ae:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   803b2:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   803b6:	6845      	ldr	r5, [r0, #4]
	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   803b8:	0052      	lsls	r2, r2, #1
   803ba:	fbb1 f2f2 	udiv	r2, r1, r2
   803be:	3a01      	subs	r2, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   803c0:	0212      	lsls	r2, r2, #8
   803c2:	b292      	uxth	r2, r2
   803c4:	432b      	orrs	r3, r5
   803c6:	431a      	orrs	r2, r3
   803c8:	6042      	str	r2, [r0, #4]
	return 0;
}
   803ca:	4620      	mov	r0, r4
   803cc:	bc30      	pop	{r4, r5}
   803ce:	4770      	bx	lr

000803d0 <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
   803d0:	6843      	ldr	r3, [r0, #4]
   803d2:	f023 0310 	bic.w	r3, r3, #16
   803d6:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
   803d8:	6843      	ldr	r3, [r0, #4]
   803da:	4319      	orrs	r1, r3
   803dc:	6041      	str	r1, [r0, #4]
   803de:	4770      	bx	lr

000803e0 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   803e0:	6843      	ldr	r3, [r0, #4]
   803e2:	01d2      	lsls	r2, r2, #7
   803e4:	b2d2      	uxtb	r2, r2
   803e6:	4319      	orrs	r1, r3
   803e8:	430a      	orrs	r2, r1
   803ea:	6042      	str	r2, [r0, #4]
   803ec:	4770      	bx	lr

000803ee <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   803ee:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   803f0:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   803f2:	0609      	lsls	r1, r1, #24
   803f4:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   803f8:	4321      	orrs	r1, r4
   803fa:	430a      	orrs	r2, r1
   803fc:	0719      	lsls	r1, r3, #28
   803fe:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
   80402:	4311      	orrs	r1, r2
   80404:	6041      	str	r1, [r0, #4]
}
   80406:	bc10      	pop	{r4}
   80408:	4770      	bx	lr

0008040a <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   8040a:	2302      	movs	r3, #2
   8040c:	6003      	str	r3, [r0, #0]
   8040e:	4770      	bx	lr

00080410 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   80410:	2301      	movs	r3, #1
   80412:	fa03 f101 	lsl.w	r1, r3, r1
   80416:	6101      	str	r1, [r0, #16]
   80418:	4770      	bx	lr

0008041a <adc_get_latest_value>:
 *
 * \return ADC latest value.
 */
uint32_t adc_get_latest_value(const Adc *p_adc)
{
	return p_adc->ADC_LCDR;
   8041a:	6a00      	ldr	r0, [r0, #32]
}
   8041c:	4770      	bx	lr

0008041e <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
   8041e:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
   80420:	4770      	bx	lr

00080422 <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
   80422:	2301      	movs	r3, #1
   80424:	6003      	str	r3, [r0, #0]
   80426:	4770      	bx	lr

00080428 <dacc_set_transfer_mode>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_transfer_mode(Dacc *p_dacc, uint32_t ul_mode)
{
	if (ul_mode) {
   80428:	b929      	cbnz	r1, 80436 <dacc_set_transfer_mode+0xe>
		p_dacc->DACC_MR |= DACC_MR_ONE;
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#elif (SAMV70 || SAMV71 || SAME70 || SAMS70)
		p_dacc->DACC_MR = ul_mode;
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
   8042a:	6843      	ldr	r3, [r0, #4]
   8042c:	f023 0310 	bic.w	r3, r3, #16
   80430:	6043      	str	r3, [r0, #4]
#endif
	}
	return DACC_RC_OK;
}
   80432:	2000      	movs	r0, #0
   80434:	4770      	bx	lr
		p_dacc->DACC_MR |= DACC_MR_WORD_WORD;
   80436:	6843      	ldr	r3, [r0, #4]
   80438:	f043 0310 	orr.w	r3, r3, #16
   8043c:	6043      	str	r3, [r0, #4]
   8043e:	e7f8      	b.n	80432 <dacc_set_transfer_mode+0xa>

00080440 <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value.
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data)
{
	p_dacc->DACC_CDR = ul_data;
   80440:	6201      	str	r1, [r0, #32]
   80442:	4770      	bx	lr

00080444 <dacc_set_channel_selection>:
 *
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
   80444:	6843      	ldr	r3, [r0, #4]
	if (ul_channel > MAX_CH_NB) {
   80446:	2901      	cmp	r1, #1
   80448:	d901      	bls.n	8044e <dacc_set_channel_selection+0xa>
		return DACC_RC_INVALID_PARAM;
   8044a:	2001      	movs	r0, #1
	mr &= ~(DACC_MR_TAG);
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
	p_dacc->DACC_MR = mr;

	return DACC_RC_OK;
}
   8044c:	4770      	bx	lr
	mr &= ~(DACC_MR_TAG);
   8044e:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
   80452:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	p_dacc->DACC_MR = mr;
   80456:	6041      	str	r1, [r0, #4]
	return DACC_RC_OK;
   80458:	2000      	movs	r0, #0
   8045a:	4770      	bx	lr

0008045c <dacc_set_timing>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_timing(Dacc *p_dacc,
		uint32_t ul_refresh, uint32_t ul_maxs, uint32_t ul_startup)
{
   8045c:	b410      	push	{r4}
	uint32_t mr = p_dacc->DACC_MR
   8045e:	6844      	ldr	r4, [r0, #4]
   80460:	f024 547c 	bic.w	r4, r4, #1056964608	; 0x3f000000
   80464:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
	& (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
	mr |= DACC_MR_REFRESH(ul_refresh);
   80468:	0209      	lsls	r1, r1, #8
   8046a:	b289      	uxth	r1, r1
   8046c:	4321      	orrs	r1, r4
	if (ul_maxs) {
   8046e:	b94a      	cbnz	r2, 80484 <dacc_set_timing+0x28>
		mr |= DACC_MR_MAXS;
		} else {
		mr &= ~DACC_MR_MAXS;
   80470:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
	}
	mr |= (DACC_MR_STARTUP_Msk & ((ul_startup) << DACC_MR_STARTUP_Pos));
   80474:	061b      	lsls	r3, r3, #24
   80476:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
   8047a:	430b      	orrs	r3, r1

	p_dacc->DACC_MR = mr;
   8047c:	6043      	str	r3, [r0, #4]
	return DACC_RC_OK;
}
   8047e:	2000      	movs	r0, #0
   80480:	bc10      	pop	{r4}
   80482:	4770      	bx	lr
		mr |= DACC_MR_MAXS;
   80484:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
   80488:	e7f4      	b.n	80474 <dacc_set_timing+0x18>

0008048a <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
   8048a:	2901      	cmp	r1, #1
   8048c:	d901      	bls.n	80492 <dacc_enable_channel+0x8>
		return DACC_RC_INVALID_PARAM;
   8048e:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
   80490:	4770      	bx	lr
	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
   80492:	2301      	movs	r3, #1
   80494:	fa03 f101 	lsl.w	r1, r3, r1
   80498:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
   8049a:	2000      	movs	r0, #0
   8049c:	4770      	bx	lr

0008049e <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   8049e:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   804a0:	0189      	lsls	r1, r1, #6
   804a2:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   804a4:	2402      	movs	r4, #2
   804a6:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   804a8:	f04f 31ff 	mov.w	r1, #4294967295
   804ac:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   804ae:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   804b0:	605a      	str	r2, [r3, #4]
}
   804b2:	bc10      	pop	{r4}
   804b4:	4770      	bx	lr

000804b6 <tc_set_block_mode>:
		uint32_t ul_blockmode)
{
	/* Validate inputs. */
	Assert(p_tc);
	
	p_tc->TC_BMR = ul_blockmode;
   804b6:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   804ba:	4770      	bx	lr

000804bc <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   804bc:	0189      	lsls	r1, r1, #6
   804be:	2305      	movs	r3, #5
   804c0:	5043      	str	r3, [r0, r1]
   804c2:	4770      	bx	lr

000804c4 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   804c4:	0189      	lsls	r1, r1, #6
   804c6:	2302      	movs	r3, #2
   804c8:	5043      	str	r3, [r0, r1]
   804ca:	4770      	bx	lr

000804cc <tc_read_cv>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
   804cc:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   804d0:	6908      	ldr	r0, [r1, #16]
}
   804d2:	4770      	bx	lr

000804d4 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   804d4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   804d8:	61ca      	str	r2, [r1, #28]
   804da:	4770      	bx	lr

000804dc <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   804dc:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   804e0:	624a      	str	r2, [r1, #36]	; 0x24
   804e2:	4770      	bx	lr

000804e4 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   804e4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   804e8:	6a08      	ldr	r0, [r1, #32]
}
   804ea:	4770      	bx	lr

000804ec <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   804ec:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   804ee:	23ac      	movs	r3, #172	; 0xac
   804f0:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   804f2:	680b      	ldr	r3, [r1, #0]
   804f4:	684a      	ldr	r2, [r1, #4]
   804f6:	fbb3 f3f2 	udiv	r3, r3, r2
   804fa:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   804fc:	1e5c      	subs	r4, r3, #1
   804fe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80502:	4294      	cmp	r4, r2
   80504:	d80b      	bhi.n	8051e <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   80506:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80508:	688b      	ldr	r3, [r1, #8]
   8050a:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8050c:	f240 2302 	movw	r3, #514	; 0x202
   80510:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80514:	2350      	movs	r3, #80	; 0x50
   80516:	6003      	str	r3, [r0, #0]

	return 0;
   80518:	2000      	movs	r0, #0
}
   8051a:	bc10      	pop	{r4}
   8051c:	4770      	bx	lr
		return 1;
   8051e:	2001      	movs	r0, #1
   80520:	e7fb      	b.n	8051a <uart_init+0x2e>

00080522 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80522:	6943      	ldr	r3, [r0, #20]
   80524:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80528:	bf1a      	itte	ne
   8052a:	61c1      	strne	r1, [r0, #28]
	return 0;
   8052c:	2000      	movne	r0, #0
		return 1;
   8052e:	2001      	moveq	r0, #1
}
   80530:	4770      	bx	lr

00080532 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80532:	6943      	ldr	r3, [r0, #20]
   80534:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80538:	bf1d      	ittte	ne
   8053a:	6983      	ldrne	r3, [r0, #24]
   8053c:	700b      	strbne	r3, [r1, #0]
	return 0;
   8053e:	2000      	movne	r0, #0
		return 1;
   80540:	2001      	moveq	r0, #1
}
   80542:	4770      	bx	lr

00080544 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80544:	6943      	ldr	r3, [r0, #20]
   80546:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8054a:	bf1d      	ittte	ne
   8054c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80550:	61c1      	strne	r1, [r0, #28]
	return 0;
   80552:	2000      	movne	r0, #0
		return 1;
   80554:	2001      	moveq	r0, #1
}
   80556:	4770      	bx	lr

00080558 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80558:	6943      	ldr	r3, [r0, #20]
   8055a:	f013 0f01 	tst.w	r3, #1
   8055e:	d005      	beq.n	8056c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80560:	6983      	ldr	r3, [r0, #24]
   80562:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80566:	600b      	str	r3, [r1, #0]

	return 0;
   80568:	2000      	movs	r0, #0
   8056a:	4770      	bx	lr
		return 1;
   8056c:	2001      	movs	r0, #1
}
   8056e:	4770      	bx	lr

00080570 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   80570:	b500      	push	{lr}
   80572:	b083      	sub	sp, #12
#if SAMD || SAMR21 || SAML21 || SAMR30
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
   80574:	2201      	movs	r2, #1
   80576:	f10d 0107 	add.w	r1, sp, #7
   8057a:	4810      	ldr	r0, [pc, #64]	; (805bc <USART0_Handler+0x4c>)
   8057c:	4b10      	ldr	r3, [pc, #64]	; (805c0 <USART0_Handler+0x50>)
   8057e:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   80580:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80582:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   80586:	2200      	movs	r2, #0
   80588:	4b0e      	ldr	r3, [pc, #56]	; (805c4 <USART0_Handler+0x54>)
   8058a:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   8058c:	4b0e      	ldr	r3, [pc, #56]	; (805c8 <USART0_Handler+0x58>)
   8058e:	781b      	ldrb	r3, [r3, #0]
   80590:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80594:	4a0d      	ldr	r2, [pc, #52]	; (805cc <USART0_Handler+0x5c>)
   80596:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   80598:	2b9b      	cmp	r3, #155	; 0x9b
   8059a:	d00b      	beq.n	805b4 <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
   8059c:	3301      	adds	r3, #1
   8059e:	4a0a      	ldr	r2, [pc, #40]	; (805c8 <USART0_Handler+0x58>)
   805a0:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   805a2:	2201      	movs	r2, #1
   805a4:	4b07      	ldr	r3, [pc, #28]	; (805c4 <USART0_Handler+0x54>)
   805a6:	701a      	strb	r2, [r3, #0]
   805a8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   805ac:	b662      	cpsie	i
}
   805ae:	b003      	add	sp, #12
   805b0:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
   805b4:	2200      	movs	r2, #0
   805b6:	4b04      	ldr	r3, [pc, #16]	; (805c8 <USART0_Handler+0x58>)
   805b8:	701a      	strb	r2, [r3, #0]
   805ba:	e7f2      	b.n	805a2 <USART0_Handler+0x32>
   805bc:	40098000 	.word	0x40098000
   805c0:	00080249 	.word	0x00080249
   805c4:	20070150 	.word	0x20070150
   805c8:	20070bc8 	.word	0x20070bc8
   805cc:	20070b2c 	.word	0x20070b2c

000805d0 <configure_tc>:

#include <asf.h>
#include "conf_tc.h"

void configure_tc(void)
{
   805d0:	b510      	push	{r4, lr}
	/* Configure PMC */
	pmc_enable_periph_clk(ID_TC0);
   805d2:	201b      	movs	r0, #27
   805d4:	4b0e      	ldr	r3, [pc, #56]	; (80610 <configure_tc+0x40>)
   805d6:	4798      	blx	r3

	/** Configure TC for a 10 kHz frequency and trigger on RC compare. */
	tc_init(TC0, 0, 0 | TC_CMR_CPCTRG);			//Timer_clock_1 - MCK/2 - 42 MHz
   805d8:	4c0e      	ldr	r4, [pc, #56]	; (80614 <configure_tc+0x44>)
   805da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   805de:	2100      	movs	r1, #0
   805e0:	4620      	mov	r0, r4
   805e2:	4b0d      	ldr	r3, [pc, #52]	; (80618 <configure_tc+0x48>)
   805e4:	4798      	blx	r3
	tc_write_rc(TC0, 0, 7000);					//7000 corresponds to fs = 6 kHz
   805e6:	f641 3258 	movw	r2, #7000	; 0x1b58
   805ea:	2100      	movs	r1, #0
   805ec:	4620      	mov	r0, r4
   805ee:	4b0b      	ldr	r3, [pc, #44]	; (8061c <configure_tc+0x4c>)
   805f0:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   805f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   805f6:	4b0a      	ldr	r3, [pc, #40]	; (80620 <configure_tc+0x50>)
   805f8:	601a      	str	r2, [r3, #0]

	/* Configure and enable interrupt on RC compare */
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
   805fa:	2210      	movs	r2, #16
   805fc:	2100      	movs	r1, #0
   805fe:	4620      	mov	r0, r4
   80600:	4b08      	ldr	r3, [pc, #32]	; (80624 <configure_tc+0x54>)
   80602:	4798      	blx	r3

	tc_start(TC0, 0);
   80604:	2100      	movs	r1, #0
   80606:	4620      	mov	r0, r4
   80608:	4b07      	ldr	r3, [pc, #28]	; (80628 <configure_tc+0x58>)
   8060a:	4798      	blx	r3
   8060c:	bd10      	pop	{r4, pc}
   8060e:	bf00      	nop
   80610:	000812b9 	.word	0x000812b9
   80614:	40080000 	.word	0x40080000
   80618:	0008049f 	.word	0x0008049f
   8061c:	000804d5 	.word	0x000804d5
   80620:	e000e100 	.word	0xe000e100
   80624:	000804dd 	.word	0x000804dd
   80628:	000804bd 	.word	0x000804bd

0008062c <usart_serial_getchar>:
{
   8062c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8062e:	b083      	sub	sp, #12
   80630:	4604      	mov	r4, r0
   80632:	460d      	mov	r5, r1
	uint32_t val = 0;
   80634:	2300      	movs	r3, #0
   80636:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   80638:	4b20      	ldr	r3, [pc, #128]	; (806bc <usart_serial_getchar+0x90>)
   8063a:	4298      	cmp	r0, r3
   8063c:	d00d      	beq.n	8065a <usart_serial_getchar+0x2e>
	if (USART0 == p_usart) {
   8063e:	4b20      	ldr	r3, [pc, #128]	; (806c0 <usart_serial_getchar+0x94>)
   80640:	4298      	cmp	r0, r3
   80642:	d012      	beq.n	8066a <usart_serial_getchar+0x3e>
	if (USART1 == p_usart) {
   80644:	4b1f      	ldr	r3, [pc, #124]	; (806c4 <usart_serial_getchar+0x98>)
   80646:	4298      	cmp	r0, r3
   80648:	d019      	beq.n	8067e <usart_serial_getchar+0x52>
	if (USART2 == p_usart) {
   8064a:	4b1f      	ldr	r3, [pc, #124]	; (806c8 <usart_serial_getchar+0x9c>)
   8064c:	429c      	cmp	r4, r3
   8064e:	d020      	beq.n	80692 <usart_serial_getchar+0x66>
	if (USART3 == p_usart) {
   80650:	4b1e      	ldr	r3, [pc, #120]	; (806cc <usart_serial_getchar+0xa0>)
   80652:	429c      	cmp	r4, r3
   80654:	d027      	beq.n	806a6 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80656:	b003      	add	sp, #12
   80658:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   8065a:	461f      	mov	r7, r3
   8065c:	4e1c      	ldr	r6, [pc, #112]	; (806d0 <usart_serial_getchar+0xa4>)
   8065e:	4629      	mov	r1, r5
   80660:	4638      	mov	r0, r7
   80662:	47b0      	blx	r6
   80664:	2800      	cmp	r0, #0
   80666:	d1fa      	bne.n	8065e <usart_serial_getchar+0x32>
   80668:	e7ef      	b.n	8064a <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   8066a:	461f      	mov	r7, r3
   8066c:	4e19      	ldr	r6, [pc, #100]	; (806d4 <usart_serial_getchar+0xa8>)
   8066e:	a901      	add	r1, sp, #4
   80670:	4638      	mov	r0, r7
   80672:	47b0      	blx	r6
   80674:	2800      	cmp	r0, #0
   80676:	d1fa      	bne.n	8066e <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   80678:	9b01      	ldr	r3, [sp, #4]
   8067a:	702b      	strb	r3, [r5, #0]
   8067c:	e7e8      	b.n	80650 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   8067e:	461e      	mov	r6, r3
   80680:	4c14      	ldr	r4, [pc, #80]	; (806d4 <usart_serial_getchar+0xa8>)
   80682:	a901      	add	r1, sp, #4
   80684:	4630      	mov	r0, r6
   80686:	47a0      	blx	r4
   80688:	2800      	cmp	r0, #0
   8068a:	d1fa      	bne.n	80682 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   8068c:	9b01      	ldr	r3, [sp, #4]
   8068e:	702b      	strb	r3, [r5, #0]
   80690:	e7e1      	b.n	80656 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   80692:	461e      	mov	r6, r3
   80694:	4c0f      	ldr	r4, [pc, #60]	; (806d4 <usart_serial_getchar+0xa8>)
   80696:	a901      	add	r1, sp, #4
   80698:	4630      	mov	r0, r6
   8069a:	47a0      	blx	r4
   8069c:	2800      	cmp	r0, #0
   8069e:	d1fa      	bne.n	80696 <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   806a0:	9b01      	ldr	r3, [sp, #4]
   806a2:	702b      	strb	r3, [r5, #0]
   806a4:	e7d7      	b.n	80656 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   806a6:	461e      	mov	r6, r3
   806a8:	4c0a      	ldr	r4, [pc, #40]	; (806d4 <usart_serial_getchar+0xa8>)
   806aa:	a901      	add	r1, sp, #4
   806ac:	4630      	mov	r0, r6
   806ae:	47a0      	blx	r4
   806b0:	2800      	cmp	r0, #0
   806b2:	d1fa      	bne.n	806aa <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   806b4:	9b01      	ldr	r3, [sp, #4]
   806b6:	702b      	strb	r3, [r5, #0]
}
   806b8:	e7cd      	b.n	80656 <usart_serial_getchar+0x2a>
   806ba:	bf00      	nop
   806bc:	400e0800 	.word	0x400e0800
   806c0:	40098000 	.word	0x40098000
   806c4:	4009c000 	.word	0x4009c000
   806c8:	400a0000 	.word	0x400a0000
   806cc:	400a4000 	.word	0x400a4000
   806d0:	00080533 	.word	0x00080533
   806d4:	00080559 	.word	0x00080559

000806d8 <usart_serial_putchar>:
{
   806d8:	b570      	push	{r4, r5, r6, lr}
   806da:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   806dc:	4b1e      	ldr	r3, [pc, #120]	; (80758 <usart_serial_putchar+0x80>)
   806de:	4298      	cmp	r0, r3
   806e0:	d00d      	beq.n	806fe <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   806e2:	4b1e      	ldr	r3, [pc, #120]	; (8075c <usart_serial_putchar+0x84>)
   806e4:	4298      	cmp	r0, r3
   806e6:	d013      	beq.n	80710 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   806e8:	4b1d      	ldr	r3, [pc, #116]	; (80760 <usart_serial_putchar+0x88>)
   806ea:	4298      	cmp	r0, r3
   806ec:	d019      	beq.n	80722 <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   806ee:	4b1d      	ldr	r3, [pc, #116]	; (80764 <usart_serial_putchar+0x8c>)
   806f0:	4298      	cmp	r0, r3
   806f2:	d01f      	beq.n	80734 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   806f4:	4b1c      	ldr	r3, [pc, #112]	; (80768 <usart_serial_putchar+0x90>)
   806f6:	4298      	cmp	r0, r3
   806f8:	d025      	beq.n	80746 <usart_serial_putchar+0x6e>
	return 0;
   806fa:	2000      	movs	r0, #0
}
   806fc:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   806fe:	461e      	mov	r6, r3
   80700:	4d1a      	ldr	r5, [pc, #104]	; (8076c <usart_serial_putchar+0x94>)
   80702:	4621      	mov	r1, r4
   80704:	4630      	mov	r0, r6
   80706:	47a8      	blx	r5
   80708:	2800      	cmp	r0, #0
   8070a:	d1fa      	bne.n	80702 <usart_serial_putchar+0x2a>
		return 1;
   8070c:	2001      	movs	r0, #1
   8070e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80710:	461e      	mov	r6, r3
   80712:	4d17      	ldr	r5, [pc, #92]	; (80770 <usart_serial_putchar+0x98>)
   80714:	4621      	mov	r1, r4
   80716:	4630      	mov	r0, r6
   80718:	47a8      	blx	r5
   8071a:	2800      	cmp	r0, #0
   8071c:	d1fa      	bne.n	80714 <usart_serial_putchar+0x3c>
		return 1;
   8071e:	2001      	movs	r0, #1
   80720:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80722:	461e      	mov	r6, r3
   80724:	4d12      	ldr	r5, [pc, #72]	; (80770 <usart_serial_putchar+0x98>)
   80726:	4621      	mov	r1, r4
   80728:	4630      	mov	r0, r6
   8072a:	47a8      	blx	r5
   8072c:	2800      	cmp	r0, #0
   8072e:	d1fa      	bne.n	80726 <usart_serial_putchar+0x4e>
		return 1;
   80730:	2001      	movs	r0, #1
   80732:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80734:	461e      	mov	r6, r3
   80736:	4d0e      	ldr	r5, [pc, #56]	; (80770 <usart_serial_putchar+0x98>)
   80738:	4621      	mov	r1, r4
   8073a:	4630      	mov	r0, r6
   8073c:	47a8      	blx	r5
   8073e:	2800      	cmp	r0, #0
   80740:	d1fa      	bne.n	80738 <usart_serial_putchar+0x60>
		return 1;
   80742:	2001      	movs	r0, #1
   80744:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80746:	461e      	mov	r6, r3
   80748:	4d09      	ldr	r5, [pc, #36]	; (80770 <usart_serial_putchar+0x98>)
   8074a:	4621      	mov	r1, r4
   8074c:	4630      	mov	r0, r6
   8074e:	47a8      	blx	r5
   80750:	2800      	cmp	r0, #0
   80752:	d1fa      	bne.n	8074a <usart_serial_putchar+0x72>
		return 1;
   80754:	2001      	movs	r0, #1
   80756:	bd70      	pop	{r4, r5, r6, pc}
   80758:	400e0800 	.word	0x400e0800
   8075c:	40098000 	.word	0x40098000
   80760:	4009c000 	.word	0x4009c000
   80764:	400a0000 	.word	0x400a0000
   80768:	400a4000 	.word	0x400a4000
   8076c:	00080523 	.word	0x00080523
   80770:	00080545 	.word	0x00080545

00080774 <configureConsole>:
#include "consoleFunctions.h"

void configureConsole(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
/* Note that  the baudrate, parity and other parameters must be set in conf/conf_uart_serial.h */
{
   80774:	b530      	push	{r4, r5, lr}
   80776:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80778:	2008      	movs	r0, #8
   8077a:	4d15      	ldr	r5, [pc, #84]	; (807d0 <configureConsole+0x5c>)
   8077c:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8077e:	4c15      	ldr	r4, [pc, #84]	; (807d4 <configureConsole+0x60>)
   80780:	4b15      	ldr	r3, [pc, #84]	; (807d8 <configureConsole+0x64>)
   80782:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80784:	4a15      	ldr	r2, [pc, #84]	; (807dc <configureConsole+0x68>)
   80786:	4b16      	ldr	r3, [pc, #88]	; (807e0 <configureConsole+0x6c>)
   80788:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   8078a:	4a16      	ldr	r2, [pc, #88]	; (807e4 <configureConsole+0x70>)
   8078c:	4b16      	ldr	r3, [pc, #88]	; (807e8 <configureConsole+0x74>)
   8078e:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80790:	4b16      	ldr	r3, [pc, #88]	; (807ec <configureConsole+0x78>)
   80792:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80794:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80798:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   8079a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8079e:	9303      	str	r3, [sp, #12]
   807a0:	2008      	movs	r0, #8
   807a2:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   807a4:	a901      	add	r1, sp, #4
   807a6:	4620      	mov	r0, r4
   807a8:	4b11      	ldr	r3, [pc, #68]	; (807f0 <configureConsole+0x7c>)
   807aa:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   807ac:	4d11      	ldr	r5, [pc, #68]	; (807f4 <configureConsole+0x80>)
   807ae:	682b      	ldr	r3, [r5, #0]
   807b0:	2100      	movs	r1, #0
   807b2:	6898      	ldr	r0, [r3, #8]
   807b4:	4c10      	ldr	r4, [pc, #64]	; (807f8 <configureConsole+0x84>)
   807b6:	47a0      	blx	r4
	setbuf(stdin, NULL);
   807b8:	682b      	ldr	r3, [r5, #0]
   807ba:	2100      	movs	r1, #0
   807bc:	6858      	ldr	r0, [r3, #4]
   807be:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   807c0:	480e      	ldr	r0, [pc, #56]	; (807fc <configureConsole+0x88>)
   807c2:	4c0f      	ldr	r4, [pc, #60]	; (80800 <configureConsole+0x8c>)
   807c4:	47a0      	blx	r4
	printf("=============\n");
   807c6:	480f      	ldr	r0, [pc, #60]	; (80804 <configureConsole+0x90>)
   807c8:	47a0      	blx	r4
   807ca:	b005      	add	sp, #20
   807cc:	bd30      	pop	{r4, r5, pc}
   807ce:	bf00      	nop
   807d0:	000812b9 	.word	0x000812b9
   807d4:	400e0800 	.word	0x400e0800
   807d8:	20070fa8 	.word	0x20070fa8
   807dc:	000806d9 	.word	0x000806d9
   807e0:	20070fa4 	.word	0x20070fa4
   807e4:	0008062d 	.word	0x0008062d
   807e8:	20070fa0 	.word	0x20070fa0
   807ec:	0501bd00 	.word	0x0501bd00
   807f0:	000804ed 	.word	0x000804ed
   807f4:	20070160 	.word	0x20070160
   807f8:	00082821 	.word	0x00082821
   807fc:	0008558c 	.word	0x0008558c
   80800:	0008275d 	.word	0x0008275d
   80804:	0008559c 	.word	0x0008559c

00080808 <delayInit>:
#include "DelayFunctions.h"

//Changed 

int delayInit(void)		/* Initializes the timer used for delays */
{
   80808:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC6);	/* power on the peripheral clock for timers */
   8080a:	2021      	movs	r0, #33	; 0x21
   8080c:	4b08      	ldr	r3, [pc, #32]	; (80830 <delayInit+0x28>)
   8080e:	4798      	blx	r3
	tc_init(TC2,0,0);				/* TC2, channel 0, TCLK1 och capturemode */
   80810:	4c08      	ldr	r4, [pc, #32]	; (80834 <delayInit+0x2c>)
   80812:	2200      	movs	r2, #0
   80814:	4611      	mov	r1, r2
   80816:	4620      	mov	r0, r4
   80818:	4b07      	ldr	r3, [pc, #28]	; (80838 <delayInit+0x30>)
   8081a:	4798      	blx	r3
	tc_set_block_mode(TC2,0);
   8081c:	2100      	movs	r1, #0
   8081e:	4620      	mov	r0, r4
   80820:	4b06      	ldr	r3, [pc, #24]	; (8083c <delayInit+0x34>)
   80822:	4798      	blx	r3
	tc_stop(TC2,0);					/* making sure the timer does not run  */
   80824:	2100      	movs	r1, #0
   80826:	4620      	mov	r0, r4
   80828:	4b05      	ldr	r3, [pc, #20]	; (80840 <delayInit+0x38>)
   8082a:	4798      	blx	r3
	return 0;						/* evertyhing is ok, typical response */
}
   8082c:	2000      	movs	r0, #0
   8082e:	bd10      	pop	{r4, pc}
   80830:	000812b9 	.word	0x000812b9
   80834:	40088000 	.word	0x40088000
   80838:	0008049f 	.word	0x0008049f
   8083c:	000804b7 	.word	0x000804b7
   80840:	000804c5 	.word	0x000804c5

00080844 <delayMicroseconds>:


void delayMicroseconds(uint32_t us)		/* A simple implementation for a delay in us (not calibrated) */
{
   80844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80846:	4605      	mov	r5, r0
	tc_start(TC2,0);
   80848:	2100      	movs	r1, #0
   8084a:	4809      	ldr	r0, [pc, #36]	; (80870 <delayMicroseconds+0x2c>)
   8084c:	4b09      	ldr	r3, [pc, #36]	; (80874 <delayMicroseconds+0x30>)
   8084e:	4798      	blx	r3
	while (tc_read_cv(TC2,0) < us*42);
   80850:	242a      	movs	r4, #42	; 0x2a
   80852:	fb04 f405 	mul.w	r4, r4, r5
   80856:	4f06      	ldr	r7, [pc, #24]	; (80870 <delayMicroseconds+0x2c>)
   80858:	2600      	movs	r6, #0
   8085a:	4d07      	ldr	r5, [pc, #28]	; (80878 <delayMicroseconds+0x34>)
   8085c:	4631      	mov	r1, r6
   8085e:	4638      	mov	r0, r7
   80860:	47a8      	blx	r5
   80862:	42a0      	cmp	r0, r4
   80864:	d3fa      	bcc.n	8085c <delayMicroseconds+0x18>
	tc_stop(TC2,0);
   80866:	2100      	movs	r1, #0
   80868:	4801      	ldr	r0, [pc, #4]	; (80870 <delayMicroseconds+0x2c>)
   8086a:	4b04      	ldr	r3, [pc, #16]	; (8087c <delayMicroseconds+0x38>)
   8086c:	4798      	blx	r3
   8086e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80870:	40088000 	.word	0x40088000
   80874:	000804bd 	.word	0x000804bd
   80878:	000804cd 	.word	0x000804cd
   8087c:	000804c5 	.word	0x000804c5

00080880 <lcdWrite>:
/*
 *	writes the byte (8 bits) to the LCD display as two consecutive 4 bits 
 *	type = 0 controls the display
 *	type = 1 writes the content of the byte (usually interpreted as ASCII-code) to the display
 */
{
   80880:	b5f0      	push	{r4, r5, r6, r7, lr}
   80882:	b085      	sub	sp, #20
   80884:	4605      	mov	r5, r0
   80886:	460c      	mov	r4, r1
	/* In it's infinite wisdom the shield has the data pins in mirrored order compared to the Due board */
	uint8_t mirror_pin[16]={0b0000,0b1000,0b0100,0b1100,0b0010,0b1010,0b0110,0b1110,0b0001,0b1001,0b0101,0b1101,0b0011,0b1011,0b0111,0b1111};
   80888:	4b1f      	ldr	r3, [pc, #124]	; (80908 <lcdWrite+0x88>)
   8088a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   8088c:	ae04      	add	r6, sp, #16
   8088e:	e906 000f 	stmdb	r6, {r0, r1, r2, r3}

	byte_orig = byte;

	/* write the first 4 bits to the shield. */
	byte = byte>>4;
	byte = mirror_pin[byte];
   80892:	eb06 1315 	add.w	r3, r6, r5, lsr #4
	byte32 = (uint32_t)byte << 23;
   80896:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   8089a:	05db      	lsls	r3, r3, #23
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
   8089c:	2c00      	cmp	r4, #0
   8089e:	d12d      	bne.n	808fc <lcdWrite+0x7c>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   808a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   808a4:	4a19      	ldr	r2, [pc, #100]	; (8090c <lcdWrite+0x8c>)
   808a6:	6351      	str	r1, [r2, #52]	; 0x34
__always_inline static void arch_ioport_set_port_level(ioport_port_t port,
		ioport_port_mask_t mask, ioport_port_mask_t level)
{
	Pio *base = arch_ioport_port_to_base(port);

	base->PIO_SODR = mask & level;
   808a8:	f003 62f0 	and.w	r2, r3, #125829120	; 0x7800000
   808ac:	4c17      	ldr	r4, [pc, #92]	; (8090c <lcdWrite+0x8c>)
   808ae:	6322      	str	r2, [r4, #48]	; 0x30
	base->PIO_CODR = mask & ~level;
   808b0:	43db      	mvns	r3, r3
   808b2:	f003 63f0 	and.w	r3, r3, #125829120	; 0x7800000
   808b6:	6363      	str	r3, [r4, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   808b8:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
   808bc:	6327      	str	r7, [r4, #48]	; 0x30
	mirrored_output = byte<<4;
	
	ioport_set_pin_level(LCD_RS, type); 
	ioport_set_port_level(IOPORT_PIOC, LCD_mask_D4_D7, byte32);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delayMicroseconds(10);
   808be:	200a      	movs	r0, #10
   808c0:	4e13      	ldr	r6, [pc, #76]	; (80910 <lcdWrite+0x90>)
   808c2:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   808c4:	6367      	str	r7, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	
	delayMicroseconds(1000);
   808c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   808ca:	47b0      	blx	r6
	
	/* write the second 4 bits to the shield. */
	byte = byte_orig;
	byte = byte & 0x0f;
	byte = mirror_pin[byte];
   808cc:	f005 050f 	and.w	r5, r5, #15
   808d0:	ab04      	add	r3, sp, #16
   808d2:	441d      	add	r5, r3
	byte32 = (uint32_t)byte<<23;
   808d4:	f815 3c10 	ldrb.w	r3, [r5, #-16]
   808d8:	05db      	lsls	r3, r3, #23
	base->PIO_SODR = mask & level;
   808da:	f003 62f0 	and.w	r2, r3, #125829120	; 0x7800000
   808de:	6322      	str	r2, [r4, #48]	; 0x30
	base->PIO_CODR = mask & ~level;
   808e0:	43db      	mvns	r3, r3
   808e2:	f003 63f0 	and.w	r3, r3, #125829120	; 0x7800000
   808e6:	6363      	str	r3, [r4, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   808e8:	6327      	str	r7, [r4, #48]	; 0x30
	mirrored_output = mirrored_output + byte;

	ioport_set_port_level(IOPORT_PIOC, LCD_mask_D4_D7, byte32);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delayMicroseconds(10);
   808ea:	200a      	movs	r0, #10
   808ec:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   808ee:	6367      	str	r7, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	delayMicroseconds(1000);
   808f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   808f4:	47b0      	blx	r6
	
	return 0;
}
   808f6:	2000      	movs	r0, #0
   808f8:	b005      	add	sp, #20
   808fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   808fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   80900:	4a02      	ldr	r2, [pc, #8]	; (8090c <lcdWrite+0x8c>)
   80902:	6311      	str	r1, [r2, #48]	; 0x30
   80904:	e7d0      	b.n	808a8 <lcdWrite+0x28>
   80906:	bf00      	nop
   80908:	000855ac 	.word	0x000855ac
   8090c:	400e1200 	.word	0x400e1200
   80910:	00080845 	.word	0x00080845

00080914 <lcdInit>:
{
   80914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80918:	4c35      	ldr	r4, [pc, #212]	; (809f0 <lcdInit+0xdc>)
   8091a:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
   8091e:	6127      	str	r7, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80920:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80924:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
   80928:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8092a:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_OER = mask;
   8092e:	f04f 63f0 	mov.w	r3, #125829120	; 0x7800000
   80932:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = mask;
   80934:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80938:	6365      	str	r5, [r4, #52]	; 0x34
	delayMicroseconds(30000);		/* wait > 15 ms */
   8093a:	f247 5030 	movw	r0, #30000	; 0x7530
   8093e:	4e2d      	ldr	r6, [pc, #180]	; (809f4 <lcdInit+0xe0>)
   80940:	47b0      	blx	r6
   80942:	6367      	str	r7, [r4, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80944:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
   80948:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   8094c:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
   80950:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80954:	f04f 7880 	mov.w	r8, #16777216	; 0x1000000
   80958:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   8095c:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
   80960:	6367      	str	r7, [r4, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80962:	6325      	str	r5, [r4, #48]	; 0x30
	delayMicroseconds(10);		/* wait 1 us */
   80964:	200a      	movs	r0, #10
   80966:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80968:	6365      	str	r5, [r4, #52]	; 0x34
	delayMicroseconds(41000);	/* wait for more than 4,1 ms */
   8096a:	f24a 0028 	movw	r0, #41000	; 0xa028
   8096e:	47b0      	blx	r6
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80970:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   80974:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80978:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   8097c:	6367      	str	r7, [r4, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8097e:	6325      	str	r5, [r4, #48]	; 0x30
	delayMicroseconds(10);	/* delay 1 us */
   80980:	200a      	movs	r0, #10
   80982:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80984:	6365      	str	r5, [r4, #52]	; 0x34
	delayMicroseconds(1000);	/* wait 100 us */
   80986:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   8098a:	47b0      	blx	r6
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8098c:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   80990:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80994:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   80998:	6367      	str	r7, [r4, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8099a:	6325      	str	r5, [r4, #48]	; 0x30
	delayMicroseconds(10);	/* wait 1 us */
   8099c:	200a      	movs	r0, #10
   8099e:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   809a0:	6365      	str	r5, [r4, #52]	; 0x34
	delayMicroseconds(1000);	/* wait 100 us */
   809a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   809a6:	47b0      	blx	r6
   809a8:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   809ac:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   809b0:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   809b4:	6367      	str	r7, [r4, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   809b6:	6325      	str	r5, [r4, #48]	; 0x30
	delayMicroseconds(10);
   809b8:	200a      	movs	r0, #10
   809ba:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   809bc:	6365      	str	r5, [r4, #52]	; 0x34
	delayMicroseconds(1000);
   809be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   809c2:	47b0      	blx	r6
	lcdWrite(0b00101000, LOW);		/* Two rows, small font */
   809c4:	2100      	movs	r1, #0
   809c6:	2028      	movs	r0, #40	; 0x28
   809c8:	4c0b      	ldr	r4, [pc, #44]	; (809f8 <lcdInit+0xe4>)
   809ca:	47a0      	blx	r4
	lcdWrite(0b00001000, LOW);		/* Display off */
   809cc:	2100      	movs	r1, #0
   809ce:	2008      	movs	r0, #8
   809d0:	47a0      	blx	r4
	lcdWrite(0b00000001, LOW);		/* Display clear */
   809d2:	2100      	movs	r1, #0
   809d4:	2001      	movs	r0, #1
   809d6:	47a0      	blx	r4
	delayMicroseconds(30000);
   809d8:	f247 5030 	movw	r0, #30000	; 0x7530
   809dc:	47b0      	blx	r6
	lcdWrite(0b00000110, LOW);		/* Entry mode set: move cursor right, no display shift */
   809de:	2100      	movs	r1, #0
   809e0:	2006      	movs	r0, #6
   809e2:	47a0      	blx	r4
	lcdWrite(0b00001111 ,LOW);		/* Display on, cursor on, blinking on */
   809e4:	2100      	movs	r1, #0
   809e6:	200f      	movs	r0, #15
   809e8:	47a0      	blx	r4
}
   809ea:	2000      	movs	r0, #0
   809ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   809f0:	400e1200 	.word	0x400e1200
   809f4:	00080845 	.word	0x00080845
   809f8:	00080881 	.word	0x00080881

000809fc <createHammingCode>:
#include <stdio.h>


int dataTosend[8];

uint8_t createHammingCode(uint8_t data[]){
   809fc:	b430      	push	{r4, r5}
	uint8_t returnByte = 0;
	int p1=0;
	int p2=0;
	int p3=0;

	dataTosend[2]=data[0];
   809fe:	7803      	ldrb	r3, [r0, #0]
   80a00:	491b      	ldr	r1, [pc, #108]	; (80a70 <createHammingCode+0x74>)
   80a02:	608b      	str	r3, [r1, #8]
	dataTosend[4]=data[1];
   80a04:	7844      	ldrb	r4, [r0, #1]
   80a06:	610c      	str	r4, [r1, #16]
	dataTosend[5]=data[2];
   80a08:	7882      	ldrb	r2, [r0, #2]
   80a0a:	614a      	str	r2, [r1, #20]
	dataTosend[6]=data[3];
   80a0c:	78c0      	ldrb	r0, [r0, #3]
   80a0e:	6188      	str	r0, [r1, #24]
	dataTosend[7]=0;									// Last bit is useless for us, put it to zero.
   80a10:	2500      	movs	r5, #0
   80a12:	61cd      	str	r5, [r1, #28]
	p1=dataTosend[2] + dataTosend[4] + dataTosend[6];
	p2=dataTosend[2] + dataTosend[5] + dataTosend[6];
   80a14:	1899      	adds	r1, r3, r2
   80a16:	4401      	add	r1, r0
	p3=dataTosend[4] + dataTosend[5] + dataTosend[6];
   80a18:	4422      	add	r2, r4
   80a1a:	4402      	add	r2, r0
	p1=dataTosend[2] + dataTosend[4] + dataTosend[6];
   80a1c:	4423      	add	r3, r4
   80a1e:	4403      	add	r3, r0
	

	if(p1%2==0){
   80a20:	f013 0f01 	tst.w	r3, #1
		dataTosend[0]=0;
   80a24:	bf0c      	ite	eq
   80a26:	4628      	moveq	r0, r5
		}else{
		dataTosend[0]=1;
   80a28:	2001      	movne	r0, #1
   80a2a:	4b11      	ldr	r3, [pc, #68]	; (80a70 <createHammingCode+0x74>)
   80a2c:	6018      	str	r0, [r3, #0]
	}

	if(p2%2==0){
   80a2e:	f011 0f01 	tst.w	r1, #1
		dataTosend[1]=0;
   80a32:	bf0c      	ite	eq
   80a34:	2100      	moveq	r1, #0
	}
	else{
		dataTosend[1]=1;
   80a36:	2101      	movne	r1, #1
   80a38:	4b0d      	ldr	r3, [pc, #52]	; (80a70 <createHammingCode+0x74>)
   80a3a:	6059      	str	r1, [r3, #4]
	}

	if(p3%2==0){
   80a3c:	f012 0f01 	tst.w	r2, #1
		dataTosend[3]=0;
   80a40:	bf0c      	ite	eq
   80a42:	2200      	moveq	r2, #0
	}
	else{
		dataTosend[3]=1;
   80a44:	2201      	movne	r2, #1
   80a46:	4b0a      	ldr	r3, [pc, #40]	; (80a70 <createHammingCode+0x74>)
   80a48:	60da      	str	r2, [r3, #12]
   80a4a:	4a0a      	ldr	r2, [pc, #40]	; (80a74 <createHammingCode+0x78>)
	}

	for(int i=0; i<8;i++){
   80a4c:	2300      	movs	r3, #0
	uint8_t returnByte = 0;
   80a4e:	4618      	mov	r0, r3
		
		if(dataTosend[i]==1){
			returnByte|=(1u<<i);
   80a50:	2401      	movs	r4, #1
   80a52:	e002      	b.n	80a5a <createHammingCode+0x5e>
	for(int i=0; i<8;i++){
   80a54:	3301      	adds	r3, #1
   80a56:	2b08      	cmp	r3, #8
   80a58:	d008      	beq.n	80a6c <createHammingCode+0x70>
		if(dataTosend[i]==1){
   80a5a:	f852 1f04 	ldr.w	r1, [r2, #4]!
   80a5e:	2901      	cmp	r1, #1
   80a60:	d1f8      	bne.n	80a54 <createHammingCode+0x58>
			returnByte|=(1u<<i);
   80a62:	fa04 f103 	lsl.w	r1, r4, r3
   80a66:	4308      	orrs	r0, r1
   80a68:	b2c0      	uxtb	r0, r0
   80a6a:	e7f3      	b.n	80a54 <createHammingCode+0x58>
		}
	}
/*	printf("Returnbyte: %x",returnByte);*/
	return returnByte;
}
   80a6c:	bc30      	pop	{r4, r5}
   80a6e:	4770      	bx	lr
   80a70:	20070fac 	.word	0x20070fac
   80a74:	20070fa8 	.word	0x20070fa8

00080a78 <getHundreds>:

	


uint8_t *getHundreds(uint32_t outval){
	uint8_t temp =outval%100;
   80a78:	4b1c      	ldr	r3, [pc, #112]	; (80aec <getHundreds+0x74>)
   80a7a:	fba3 2300 	umull	r2, r3, r3, r0
   80a7e:	095b      	lsrs	r3, r3, #5
   80a80:	2264      	movs	r2, #100	; 0x64
   80a82:	fb02 0313 	mls	r3, r2, r3, r0
	uint16_t hundreds = outval-temp;
   80a86:	b2db      	uxtb	r3, r3
   80a88:	1ac0      	subs	r0, r0, r3
   80a8a:	b280      	uxth	r0, r0
	if (hundreds==000)
   80a8c:	b1c8      	cbz	r0, 80ac2 <getHundreds+0x4a>
	{
		return zero;
	}
	else if(hundreds==100){
   80a8e:	4290      	cmp	r0, r2
   80a90:	d019      	beq.n	80ac6 <getHundreds+0x4e>
		return one;
	}
	else if(hundreds==200){
   80a92:	28c8      	cmp	r0, #200	; 0xc8
   80a94:	d019      	beq.n	80aca <getHundreds+0x52>
		return two;
	}
	else if(hundreds==300){
   80a96:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
   80a9a:	d018      	beq.n	80ace <getHundreds+0x56>
		return three;
	}
	else if(hundreds==400){
   80a9c:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
   80aa0:	d017      	beq.n	80ad2 <getHundreds+0x5a>
		return four;
	}
	else if(hundreds==500){
   80aa2:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   80aa6:	d016      	beq.n	80ad6 <getHundreds+0x5e>
		return five;
	}
	else if(hundreds==600){
   80aa8:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
   80aac:	d015      	beq.n	80ada <getHundreds+0x62>
		return six;
	}
	else if(hundreds==700){
   80aae:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   80ab2:	d014      	beq.n	80ade <getHundreds+0x66>
		return seven;
	}
	else if(hundreds==800){
   80ab4:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
   80ab8:	d013      	beq.n	80ae2 <getHundreds+0x6a>
		return eight;
	}
	else if(hundreds==900){
   80aba:	f5b0 7f61 	cmp.w	r0, #900	; 0x384
   80abe:	d012      	beq.n	80ae6 <getHundreds+0x6e>
		return nine;
	}
}
   80ac0:	4770      	bx	lr
		return zero;
   80ac2:	480b      	ldr	r0, [pc, #44]	; (80af0 <getHundreds+0x78>)
   80ac4:	4770      	bx	lr
		return one;
   80ac6:	480b      	ldr	r0, [pc, #44]	; (80af4 <getHundreds+0x7c>)
   80ac8:	4770      	bx	lr
		return two;
   80aca:	480b      	ldr	r0, [pc, #44]	; (80af8 <getHundreds+0x80>)
   80acc:	4770      	bx	lr
		return three;
   80ace:	480b      	ldr	r0, [pc, #44]	; (80afc <getHundreds+0x84>)
   80ad0:	4770      	bx	lr
		return four;
   80ad2:	480b      	ldr	r0, [pc, #44]	; (80b00 <getHundreds+0x88>)
   80ad4:	4770      	bx	lr
		return five;
   80ad6:	480b      	ldr	r0, [pc, #44]	; (80b04 <getHundreds+0x8c>)
   80ad8:	4770      	bx	lr
		return six;
   80ada:	480b      	ldr	r0, [pc, #44]	; (80b08 <getHundreds+0x90>)
   80adc:	4770      	bx	lr
		return seven;
   80ade:	480b      	ldr	r0, [pc, #44]	; (80b0c <getHundreds+0x94>)
   80ae0:	4770      	bx	lr
		return eight;
   80ae2:	480b      	ldr	r0, [pc, #44]	; (80b10 <getHundreds+0x98>)
   80ae4:	4770      	bx	lr
		return nine;
   80ae6:	480b      	ldr	r0, [pc, #44]	; (80b14 <getHundreds+0x9c>)
}
   80ae8:	4770      	bx	lr
   80aea:	bf00      	nop
   80aec:	51eb851f 	.word	0x51eb851f
   80af0:	20070bcc 	.word	0x20070bcc
   80af4:	2007013c 	.word	0x2007013c
   80af8:	2007014c 	.word	0x2007014c
   80afc:	20070148 	.word	0x20070148
   80b00:	20070134 	.word	0x20070134
   80b04:	20070130 	.word	0x20070130
   80b08:	20070144 	.word	0x20070144
   80b0c:	20070140 	.word	0x20070140
   80b10:	2007012c 	.word	0x2007012c
   80b14:	20070138 	.word	0x20070138

00080b18 <getSingles>:

uint8_t *getSingles(uint32_t outval){
	uint8_t singles = outval%10;
   80b18:	4b18      	ldr	r3, [pc, #96]	; (80b7c <getSingles+0x64>)
   80b1a:	fba3 2300 	umull	r2, r3, r3, r0
   80b1e:	08db      	lsrs	r3, r3, #3
   80b20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   80b24:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
	
		if (singles==0)
   80b28:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   80b2c:	d012      	beq.n	80b54 <getSingles+0x3c>
		{
			return zero;
		}
		else if(singles==1){
   80b2e:	2801      	cmp	r0, #1
   80b30:	d012      	beq.n	80b58 <getSingles+0x40>
			return one;
		}
		else if(singles==2){
   80b32:	2802      	cmp	r0, #2
   80b34:	d012      	beq.n	80b5c <getSingles+0x44>
			return two;
		}
		else if(singles==3){
   80b36:	2803      	cmp	r0, #3
   80b38:	d012      	beq.n	80b60 <getSingles+0x48>
			return three;
		}
		else if(singles==4){
   80b3a:	2804      	cmp	r0, #4
   80b3c:	d012      	beq.n	80b64 <getSingles+0x4c>
			return four;
		}
		else if(singles==5){
   80b3e:	2805      	cmp	r0, #5
   80b40:	d012      	beq.n	80b68 <getSingles+0x50>
			return five;
		}
		else if(singles==6){
   80b42:	2806      	cmp	r0, #6
   80b44:	d012      	beq.n	80b6c <getSingles+0x54>
			return six;
		}
		else if(singles==7){
   80b46:	2807      	cmp	r0, #7
   80b48:	d012      	beq.n	80b70 <getSingles+0x58>
			return seven;
		}
		else if(singles==8){
   80b4a:	2808      	cmp	r0, #8
   80b4c:	d012      	beq.n	80b74 <getSingles+0x5c>
			return eight;
		}
		else if(singles==9){
   80b4e:	2809      	cmp	r0, #9
   80b50:	d012      	beq.n	80b78 <getSingles+0x60>
			return nine;
		}
}
   80b52:	4770      	bx	lr
			return zero;
   80b54:	480a      	ldr	r0, [pc, #40]	; (80b80 <getSingles+0x68>)
   80b56:	4770      	bx	lr
			return one;
   80b58:	480a      	ldr	r0, [pc, #40]	; (80b84 <getSingles+0x6c>)
   80b5a:	4770      	bx	lr
			return two;
   80b5c:	480a      	ldr	r0, [pc, #40]	; (80b88 <getSingles+0x70>)
   80b5e:	4770      	bx	lr
			return three;
   80b60:	480a      	ldr	r0, [pc, #40]	; (80b8c <getSingles+0x74>)
   80b62:	4770      	bx	lr
			return four;
   80b64:	480a      	ldr	r0, [pc, #40]	; (80b90 <getSingles+0x78>)
   80b66:	4770      	bx	lr
			return five;
   80b68:	480a      	ldr	r0, [pc, #40]	; (80b94 <getSingles+0x7c>)
   80b6a:	4770      	bx	lr
			return six;
   80b6c:	480a      	ldr	r0, [pc, #40]	; (80b98 <getSingles+0x80>)
   80b6e:	4770      	bx	lr
			return seven;
   80b70:	480a      	ldr	r0, [pc, #40]	; (80b9c <getSingles+0x84>)
   80b72:	4770      	bx	lr
			return eight;
   80b74:	480a      	ldr	r0, [pc, #40]	; (80ba0 <getSingles+0x88>)
   80b76:	4770      	bx	lr
			return nine;
   80b78:	480a      	ldr	r0, [pc, #40]	; (80ba4 <getSingles+0x8c>)
}
   80b7a:	4770      	bx	lr
   80b7c:	cccccccd 	.word	0xcccccccd
   80b80:	20070bcc 	.word	0x20070bcc
   80b84:	2007013c 	.word	0x2007013c
   80b88:	2007014c 	.word	0x2007014c
   80b8c:	20070148 	.word	0x20070148
   80b90:	20070134 	.word	0x20070134
   80b94:	20070130 	.word	0x20070130
   80b98:	20070144 	.word	0x20070144
   80b9c:	20070140 	.word	0x20070140
   80ba0:	2007012c 	.word	0x2007012c
   80ba4:	20070138 	.word	0x20070138

00080ba8 <getTens>:

uint8_t *getTens(uint32_t outval){
	uint8_t temp =outval%100;
   80ba8:	4b20      	ldr	r3, [pc, #128]	; (80c2c <getTens+0x84>)
   80baa:	fba3 2300 	umull	r2, r3, r3, r0
   80bae:	095b      	lsrs	r3, r3, #5
   80bb0:	2264      	movs	r2, #100	; 0x64
   80bb2:	fb02 0313 	mls	r3, r2, r3, r0
	uint8_t singles = outval%10;
	uint8_t tens = (temp -singles)/10;
   80bb6:	b2db      	uxtb	r3, r3
	uint8_t singles = outval%10;
   80bb8:	4a1d      	ldr	r2, [pc, #116]	; (80c30 <getTens+0x88>)
   80bba:	fba2 1200 	umull	r1, r2, r2, r0
   80bbe:	08d2      	lsrs	r2, r2, #3
   80bc0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80bc4:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
	uint8_t tens = (temp -singles)/10;
   80bc8:	b2c0      	uxtb	r0, r0
   80bca:	1a18      	subs	r0, r3, r0
   80bcc:	4a19      	ldr	r2, [pc, #100]	; (80c34 <getTens+0x8c>)
   80bce:	fb82 3200 	smull	r3, r2, r2, r0
   80bd2:	17c3      	asrs	r3, r0, #31
   80bd4:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
	
	if (tens==0)
   80bd8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   80bdc:	d012      	beq.n	80c04 <getTens+0x5c>
	{
		return zero;
	}
	else if(tens==1){
   80bde:	2b01      	cmp	r3, #1
   80be0:	d012      	beq.n	80c08 <getTens+0x60>
		return one;
	}
	else if(tens==2){
   80be2:	2b02      	cmp	r3, #2
   80be4:	d012      	beq.n	80c0c <getTens+0x64>
		return two;
	}
	else if(tens==3){
   80be6:	2b03      	cmp	r3, #3
   80be8:	d012      	beq.n	80c10 <getTens+0x68>
		return three;
	}
	else if(tens==4){
   80bea:	2b04      	cmp	r3, #4
   80bec:	d012      	beq.n	80c14 <getTens+0x6c>
		return four;
	}
	else if(tens==5){
   80bee:	2b05      	cmp	r3, #5
   80bf0:	d012      	beq.n	80c18 <getTens+0x70>
		return five;
	}
	else if(tens==6){
   80bf2:	2b06      	cmp	r3, #6
   80bf4:	d012      	beq.n	80c1c <getTens+0x74>
		return six;
	}
	else if(tens==7){
   80bf6:	2b07      	cmp	r3, #7
   80bf8:	d012      	beq.n	80c20 <getTens+0x78>
		return seven;
	}
	else if(tens==8){
   80bfa:	2b08      	cmp	r3, #8
   80bfc:	d012      	beq.n	80c24 <getTens+0x7c>
		return eight;
	}
	else if(tens==9){
   80bfe:	2b09      	cmp	r3, #9
   80c00:	d012      	beq.n	80c28 <getTens+0x80>
		return nine;
	}
}
   80c02:	4770      	bx	lr
		return zero;
   80c04:	480c      	ldr	r0, [pc, #48]	; (80c38 <getTens+0x90>)
   80c06:	4770      	bx	lr
		return one;
   80c08:	480c      	ldr	r0, [pc, #48]	; (80c3c <getTens+0x94>)
   80c0a:	4770      	bx	lr
		return two;
   80c0c:	480c      	ldr	r0, [pc, #48]	; (80c40 <getTens+0x98>)
   80c0e:	4770      	bx	lr
		return three;
   80c10:	480c      	ldr	r0, [pc, #48]	; (80c44 <getTens+0x9c>)
   80c12:	4770      	bx	lr
		return four;
   80c14:	480c      	ldr	r0, [pc, #48]	; (80c48 <getTens+0xa0>)
   80c16:	4770      	bx	lr
		return five;
   80c18:	480c      	ldr	r0, [pc, #48]	; (80c4c <getTens+0xa4>)
   80c1a:	4770      	bx	lr
		return six;
   80c1c:	480c      	ldr	r0, [pc, #48]	; (80c50 <getTens+0xa8>)
   80c1e:	4770      	bx	lr
		return seven;
   80c20:	480c      	ldr	r0, [pc, #48]	; (80c54 <getTens+0xac>)
   80c22:	4770      	bx	lr
		return eight;
   80c24:	480c      	ldr	r0, [pc, #48]	; (80c58 <getTens+0xb0>)
   80c26:	4770      	bx	lr
		return nine;
   80c28:	480c      	ldr	r0, [pc, #48]	; (80c5c <getTens+0xb4>)
}
   80c2a:	4770      	bx	lr
   80c2c:	51eb851f 	.word	0x51eb851f
   80c30:	cccccccd 	.word	0xcccccccd
   80c34:	66666667 	.word	0x66666667
   80c38:	20070bcc 	.word	0x20070bcc
   80c3c:	2007013c 	.word	0x2007013c
   80c40:	2007014c 	.word	0x2007014c
   80c44:	20070148 	.word	0x20070148
   80c48:	20070134 	.word	0x20070134
   80c4c:	20070130 	.word	0x20070130
   80c50:	20070144 	.word	0x20070144
   80c54:	20070140 	.word	0x20070140
   80c58:	2007012c 	.word	0x2007012c
   80c5c:	20070138 	.word	0x20070138

00080c60 <TC0_Handler>:

/**
*  Interrupt handler for TC0 interrupt.
*/
void TC0_Handler(void)
{
   80c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80c64:	b083      	sub	sp, #12
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80c66:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80c6a:	4b37      	ldr	r3, [pc, #220]	; (80d48 <TC0_Handler+0xe8>)
   80c6c:	631a      	str	r2, [r3, #48]	; 0x30
	volatile uint32_t ul_dummy;
	uint32_t invalue, outvalue;
	float sum = 0;
	
	/* Clear status bit to acknowledge interrupt */
	ul_dummy = tc_get_status(TC0, 0);			//The compare bit is cleared by reading the register, manual p. 915
   80c6e:	2100      	movs	r1, #0
   80c70:	4836      	ldr	r0, [pc, #216]	; (80d4c <TC0_Handler+0xec>)
   80c72:	4b37      	ldr	r3, [pc, #220]	; (80d50 <TC0_Handler+0xf0>)
   80c74:	4798      	blx	r3
   80c76:	9001      	str	r0, [sp, #4]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
   80c78:	9b01      	ldr	r3, [sp, #4]
	
	invalue = adc_get_value();
   80c7a:	4b36      	ldr	r3, [pc, #216]	; (80d54 <TC0_Handler+0xf4>)
   80c7c:	4798      	blx	r3
   80c7e:	4936      	ldr	r1, [pc, #216]	; (80d58 <TC0_Handler+0xf8>)
   80c80:	f101 03ac 	add.w	r3, r1, #172	; 0xac
	
	/* FIR filter begins */
	for(int i = M; i>0;i--){
		xbuff[i]=xbuff[i-1];
   80c84:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   80c88:	605a      	str	r2, [r3, #4]
	for(int i = M; i>0;i--){
   80c8a:	428b      	cmp	r3, r1
   80c8c:	d1fa      	bne.n	80c84 <TC0_Handler+0x24>
	}
	
	xbuff[0] = (float)invalue;
   80c8e:	4b33      	ldr	r3, [pc, #204]	; (80d5c <TC0_Handler+0xfc>)
   80c90:	4798      	blx	r3
   80c92:	4d31      	ldr	r5, [pc, #196]	; (80d58 <TC0_Handler+0xf8>)
   80c94:	f845 0bb0 	str.w	r0, [r5], #176
   80c98:	4f31      	ldr	r7, [pc, #196]	; (80d60 <TC0_Handler+0x100>)
   80c9a:	1f3c      	subs	r4, r7, #4
   80c9c:	37ac      	adds	r7, #172	; 0xac
	float sum = 0;
   80c9e:	2600      	movs	r6, #0
	
	/* Apply FIR-filter */
	for(uint8_t k=0; k<=M; k++){
		sum += b[k]*xbuff[M-k];
   80ca0:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 80d90 <TC0_Handler+0x130>
   80ca4:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 80d94 <TC0_Handler+0x134>
   80ca8:	f855 1d04 	ldr.w	r1, [r5, #-4]!
   80cac:	f854 0f04 	ldr.w	r0, [r4, #4]!
   80cb0:	47c8      	blx	r9
   80cb2:	4601      	mov	r1, r0
   80cb4:	4630      	mov	r0, r6
   80cb6:	47c0      	blx	r8
   80cb8:	4606      	mov	r6, r0
	for(uint8_t k=0; k<=M; k++){
   80cba:	42bc      	cmp	r4, r7
   80cbc:	d1f4      	bne.n	80ca8 <TC0_Handler+0x48>
	}
	
	outvalue = (uint32_t)sum;
   80cbe:	4b29      	ldr	r3, [pc, #164]	; (80d64 <TC0_Handler+0x104>)
   80cc0:	4798      	blx	r3
   80cc2:	4601      	mov	r1, r0
	
	if(offsetCounter<=nbrOfSamples){
   80cc4:	4b28      	ldr	r3, [pc, #160]	; (80d68 <TC0_Handler+0x108>)
   80cc6:	781b      	ldrb	r3, [r3, #0]
   80cc8:	2b64      	cmp	r3, #100	; 0x64
   80cca:	d826      	bhi.n	80d1a <TC0_Handler+0xba>
		offsetBuff[offsetCounter] = outvalue;
   80ccc:	4a27      	ldr	r2, [pc, #156]	; (80d6c <TC0_Handler+0x10c>)
   80cce:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
		offsetCounter++;
   80cd2:	3301      	adds	r3, #1
   80cd4:	4a24      	ldr	r2, [pc, #144]	; (80d68 <TC0_Handler+0x108>)
   80cd6:	7013      	strb	r3, [r2, #0]
		}
		dcOffset = offsetSum/nbrOfSamples;
		offsetCounter=0;
		offsetSum=0;
	}
	if(sampleCounter<nbrOfSamples){
   80cd8:	4b25      	ldr	r3, [pc, #148]	; (80d70 <TC0_Handler+0x110>)
   80cda:	781a      	ldrb	r2, [r3, #0]
   80cdc:	2a63      	cmp	r2, #99	; 0x63
   80cde:	d812      	bhi.n	80d06 <TC0_Handler+0xa6>
		int32_t vt = outvalue;
		mvBuffer[sampleCounter] = ((vt-dcOffset)*1000)/1240;
   80ce0:	4b24      	ldr	r3, [pc, #144]	; (80d74 <TC0_Handler+0x114>)
   80ce2:	881b      	ldrh	r3, [r3, #0]
   80ce4:	1ac8      	subs	r0, r1, r3
   80ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   80cea:	fb03 f300 	mul.w	r3, r3, r0
   80cee:	4822      	ldr	r0, [pc, #136]	; (80d78 <TC0_Handler+0x118>)
   80cf0:	fb80 4003 	smull	r4, r0, r0, r3
   80cf4:	17db      	asrs	r3, r3, #31
   80cf6:	ebc3 13e0 	rsb	r3, r3, r0, asr #7
   80cfa:	4820      	ldr	r0, [pc, #128]	; (80d7c <TC0_Handler+0x11c>)
   80cfc:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
		sampleCounter++;
   80d00:	3201      	adds	r2, #1
   80d02:	4b1b      	ldr	r3, [pc, #108]	; (80d70 <TC0_Handler+0x110>)
   80d04:	701a      	strb	r2, [r3, #0]
	}
	
	dacc_write_conversion_data(DACC,outvalue);	//send output value to DAC
   80d06:	481e      	ldr	r0, [pc, #120]	; (80d80 <TC0_Handler+0x120>)
   80d08:	4b1e      	ldr	r3, [pc, #120]	; (80d84 <TC0_Handler+0x124>)
   80d0a:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80d0c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80d10:	4b0d      	ldr	r3, [pc, #52]	; (80d48 <TC0_Handler+0xe8>)
   80d12:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(CHECK_PIN,LOW);		//put test pin LOW
}
   80d14:	b003      	add	sp, #12
   80d16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80d1a:	4b1b      	ldr	r3, [pc, #108]	; (80d88 <TC0_Handler+0x128>)
   80d1c:	681a      	ldr	r2, [r3, #0]
   80d1e:	4d13      	ldr	r5, [pc, #76]	; (80d6c <TC0_Handler+0x10c>)
   80d20:	1f2b      	subs	r3, r5, #4
   80d22:	f505 75c6 	add.w	r5, r5, #396	; 0x18c
			offsetSum = offsetSum + offsetBuff[i];
   80d26:	f853 4f04 	ldr.w	r4, [r3, #4]!
   80d2a:	4422      	add	r2, r4
		for(int i=0; i<nbrOfSamples; ++i){
   80d2c:	42ab      	cmp	r3, r5
   80d2e:	d1fa      	bne.n	80d26 <TC0_Handler+0xc6>
		dcOffset = offsetSum/nbrOfSamples;
   80d30:	4b16      	ldr	r3, [pc, #88]	; (80d8c <TC0_Handler+0x12c>)
   80d32:	fba3 2302 	umull	r2, r3, r3, r2
   80d36:	095b      	lsrs	r3, r3, #5
   80d38:	4a0e      	ldr	r2, [pc, #56]	; (80d74 <TC0_Handler+0x114>)
   80d3a:	8013      	strh	r3, [r2, #0]
		offsetCounter=0;
   80d3c:	2300      	movs	r3, #0
   80d3e:	4a0a      	ldr	r2, [pc, #40]	; (80d68 <TC0_Handler+0x108>)
   80d40:	7013      	strb	r3, [r2, #0]
		offsetSum=0;
   80d42:	4a11      	ldr	r2, [pc, #68]	; (80d88 <TC0_Handler+0x128>)
   80d44:	6013      	str	r3, [r2, #0]
   80d46:	e7c7      	b.n	80cd8 <TC0_Handler+0x78>
   80d48:	400e1000 	.word	0x400e1000
   80d4c:	40080000 	.word	0x40080000
   80d50:	000804e5 	.word	0x000804e5
   80d54:	00080219 	.word	0x00080219
   80d58:	20070e38 	.word	0x20070e38
   80d5c:	00082371 	.word	0x00082371
   80d60:	000855bc 	.word	0x000855bc
   80d64:	000826c1 	.word	0x000826c1
   80d68:	20070e2c 	.word	0x20070e2c
   80d6c:	20070c9c 	.word	0x20070c9c
   80d70:	20070e34 	.word	0x20070e34
   80d74:	20070bd0 	.word	0x20070bd0
   80d78:	1a6d01a7 	.word	0x1a6d01a7
   80d7c:	20070bd4 	.word	0x20070bd4
   80d80:	400c8000 	.word	0x400c8000
   80d84:	00080441 	.word	0x00080441
   80d88:	20070e30 	.word	0x20070e30
   80d8c:	51eb851f 	.word	0x51eb851f
   80d90:	00082421 	.word	0x00082421
   80d94:	00082211 	.word	0x00082211

00080d98 <getCounter>:
	return dcOffset;
}

uint8_t getCounter(void){
	return sampleCounter;
}
   80d98:	4b01      	ldr	r3, [pc, #4]	; (80da0 <getCounter+0x8>)
   80d9a:	7818      	ldrb	r0, [r3, #0]
   80d9c:	4770      	bx	lr
   80d9e:	bf00      	nop
   80da0:	20070e34 	.word	0x20070e34

00080da4 <getMvBuffer>:

int16_t* getMvBuffer(void){
	return mvBuffer;
}
   80da4:	4800      	ldr	r0, [pc, #0]	; (80da8 <getMvBuffer+0x4>)
   80da6:	4770      	bx	lr
   80da8:	20070bd4 	.word	0x20070bd4

00080dac <reset_counter>:

void reset_counter(void){
	sampleCounter = 0;
   80dac:	2200      	movs	r2, #0
   80dae:	4b01      	ldr	r3, [pc, #4]	; (80db4 <reset_counter+0x8>)
   80db0:	701a      	strb	r2, [r3, #0]
   80db2:	4770      	bx	lr
   80db4:	20070e34 	.word	0x20070e34

00080db8 <usart0_init>:
uint32_t *const ptr_USART0_MR = (uint32_t *) (USART0_BASE_ADDRESS + 0x0004U);	//Mode register
uint32_t *const ptr_USART0_SR = (uint32_t *) (USART0_BASE_ADDRESS + 0x0014U);	//Status register
uint32_t *const ptr_USART0_THR = (uint32_t *) (USART0_BASE_ADDRESS + 0x001CU);	//Transmit holding register
uint32_t *const ptr_USART0_BRGR = (uint32_t *) (USART0_BASE_ADDRESS + 0x0020U);	//Baud-rate generator

void usart0_init(void){
   80db8:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(ID_USART0);
   80dba:	2011      	movs	r0, #17
   80dbc:	4b10      	ldr	r3, [pc, #64]	; (80e00 <usart0_init+0x48>)
   80dbe:	4798      	blx	r3
	*ptr_USART0_CR |= (1u<<TXEN0);					//Set TXEN.
   80dc0:	4a10      	ldr	r2, [pc, #64]	; (80e04 <usart0_init+0x4c>)
   80dc2:	6813      	ldr	r3, [r2, #0]
   80dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   80dc8:	6013      	str	r3, [r2, #0]
	*ptr_USART0_MR |= (1<<CHRL1) | (1<<CHRL0);
	*ptr_USART0_MR &= ~((1<<5) | (1<<4));
   80dca:	3204      	adds	r2, #4
   80dcc:	6813      	ldr	r3, [r2, #0]
   80dce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   80dd2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   80dd6:	6013      	str	r3, [r2, #0]
	PIOA->PIO_PDR |= (PIO_PA10) | (PIO_PA11);
   80dd8:	f502 2291 	add.w	r2, r2, #296960	; 0x48800
   80ddc:	f202 52fc 	addw	r2, r2, #1532	; 0x5fc
   80de0:	6853      	ldr	r3, [r2, #4]
   80de2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
   80de6:	6053      	str	r3, [r2, #4]
	*ptr_USART0_BRGR |= (0b1000100010111<<0);			//Set baudrate(9600). CD==0b1000100011==546
   80de8:	f5a2 2291 	sub.w	r2, r2, #296960	; 0x48800
   80dec:	f5a2 62bc 	sub.w	r2, r2, #1504	; 0x5e0
   80df0:	6813      	ldr	r3, [r2, #0]
   80df2:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
   80df6:	f043 0317 	orr.w	r3, r3, #23
   80dfa:	6013      	str	r3, [r2, #0]
   80dfc:	bd08      	pop	{r3, pc}
   80dfe:	bf00      	nop
   80e00:	000812b9 	.word	0x000812b9
   80e04:	40098000 	.word	0x40098000

00080e08 <usart0_transmit>:
}

void usart0_transmit(unsigned char data){
	while(!(*ptr_USART0_SR & (1u<<1)));
   80e08:	4b06      	ldr	r3, [pc, #24]	; (80e24 <usart0_transmit+0x1c>)
   80e0a:	681b      	ldr	r3, [r3, #0]
   80e0c:	f003 0202 	and.w	r2, r3, #2
   80e10:	2a00      	cmp	r2, #0
   80e12:	d0fd      	beq.n	80e10 <usart0_transmit+0x8>
	while(!(*ptr_USART0_SR & (1u<<9)));	
   80e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
   80e18:	2b00      	cmp	r3, #0
   80e1a:	d0fd      	beq.n	80e18 <usart0_transmit+0x10>
		
	*ptr_USART0_THR = data;
   80e1c:	4b02      	ldr	r3, [pc, #8]	; (80e28 <usart0_transmit+0x20>)
   80e1e:	6018      	str	r0, [r3, #0]
   80e20:	4770      	bx	lr
   80e22:	bf00      	nop
   80e24:	40098014 	.word	0x40098014
   80e28:	4009801c 	.word	0x4009801c

00080e2c <usart0_send_Packet>:
}

void usart0_send_Packet(uint8_t addr, unsigned char cmd)
{
   80e2c:	b570      	push	{r4, r5, r6, lr}
   80e2e:	460e      	mov	r6, r1
// 	usart0_transmit(SYNC);//send synchro byte
// 	delayMicroseconds(10000); 
	usart0_transmit(addr);//send receiver address
   80e30:	4d05      	ldr	r5, [pc, #20]	; (80e48 <usart0_send_Packet+0x1c>)
   80e32:	47a8      	blx	r5
	delayMicroseconds(10000);
   80e34:	f242 7010 	movw	r0, #10000	; 0x2710
   80e38:	4c04      	ldr	r4, [pc, #16]	; (80e4c <usart0_send_Packet+0x20>)
   80e3a:	47a0      	blx	r4
 	usart0_transmit(cmd);//send command
   80e3c:	4630      	mov	r0, r6
   80e3e:	47a8      	blx	r5
 	delayMicroseconds(10000);
   80e40:	f242 7010 	movw	r0, #10000	; 0x2710
   80e44:	47a0      	blx	r4
   80e46:	bd70      	pop	{r4, r5, r6, pc}
   80e48:	00080e09 	.word	0x00080e09
   80e4c:	00080845 	.word	0x00080845

00080e50 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80e50:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80e52:	480e      	ldr	r0, [pc, #56]	; (80e8c <sysclk_init+0x3c>)
   80e54:	4b0e      	ldr	r3, [pc, #56]	; (80e90 <sysclk_init+0x40>)
   80e56:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80e58:	213e      	movs	r1, #62	; 0x3e
   80e5a:	2000      	movs	r0, #0
   80e5c:	4b0d      	ldr	r3, [pc, #52]	; (80e94 <sysclk_init+0x44>)
   80e5e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80e60:	4c0d      	ldr	r4, [pc, #52]	; (80e98 <sysclk_init+0x48>)
   80e62:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80e64:	2800      	cmp	r0, #0
   80e66:	d0fc      	beq.n	80e62 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80e68:	4b0c      	ldr	r3, [pc, #48]	; (80e9c <sysclk_init+0x4c>)
   80e6a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80e6c:	4a0c      	ldr	r2, [pc, #48]	; (80ea0 <sysclk_init+0x50>)
   80e6e:	4b0d      	ldr	r3, [pc, #52]	; (80ea4 <sysclk_init+0x54>)
   80e70:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80e72:	4c0d      	ldr	r4, [pc, #52]	; (80ea8 <sysclk_init+0x58>)
   80e74:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80e76:	2800      	cmp	r0, #0
   80e78:	d0fc      	beq.n	80e74 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80e7a:	2010      	movs	r0, #16
   80e7c:	4b0b      	ldr	r3, [pc, #44]	; (80eac <sysclk_init+0x5c>)
   80e7e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80e80:	4b0b      	ldr	r3, [pc, #44]	; (80eb0 <sysclk_init+0x60>)
   80e82:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80e84:	4801      	ldr	r0, [pc, #4]	; (80e8c <sysclk_init+0x3c>)
   80e86:	4b02      	ldr	r3, [pc, #8]	; (80e90 <sysclk_init+0x40>)
   80e88:	4798      	blx	r3
   80e8a:	bd10      	pop	{r4, pc}
   80e8c:	0501bd00 	.word	0x0501bd00
   80e90:	200700a5 	.word	0x200700a5
   80e94:	00081235 	.word	0x00081235
   80e98:	00081289 	.word	0x00081289
   80e9c:	00081299 	.word	0x00081299
   80ea0:	200d3f01 	.word	0x200d3f01
   80ea4:	400e0600 	.word	0x400e0600
   80ea8:	000812a9 	.word	0x000812a9
   80eac:	000811d1 	.word	0x000811d1
   80eb0:	000813a9 	.word	0x000813a9

00080eb4 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80eb4:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80eb6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80eba:	4b12      	ldr	r3, [pc, #72]	; (80f04 <board_init+0x50>)
   80ebc:	605a      	str	r2, [r3, #4]
   80ebe:	200b      	movs	r0, #11
   80ec0:	4c11      	ldr	r4, [pc, #68]	; (80f08 <board_init+0x54>)
   80ec2:	47a0      	blx	r4
   80ec4:	200c      	movs	r0, #12
   80ec6:	47a0      	blx	r4
   80ec8:	200d      	movs	r0, #13
   80eca:	47a0      	blx	r4
   80ecc:	200e      	movs	r0, #14
   80ece:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80ed0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80ed4:	203b      	movs	r0, #59	; 0x3b
   80ed6:	4c0d      	ldr	r4, [pc, #52]	; (80f0c <board_init+0x58>)
   80ed8:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80eda:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80ede:	2055      	movs	r0, #85	; 0x55
   80ee0:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80ee2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80ee6:	2056      	movs	r0, #86	; 0x56
   80ee8:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80eea:	4909      	ldr	r1, [pc, #36]	; (80f10 <board_init+0x5c>)
   80eec:	2068      	movs	r0, #104	; 0x68
   80eee:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80ef0:	4908      	ldr	r1, [pc, #32]	; (80f14 <board_init+0x60>)
   80ef2:	205c      	movs	r0, #92	; 0x5c
   80ef4:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80ef6:	4a08      	ldr	r2, [pc, #32]	; (80f18 <board_init+0x64>)
   80ef8:	f44f 7140 	mov.w	r1, #768	; 0x300
   80efc:	4807      	ldr	r0, [pc, #28]	; (80f1c <board_init+0x68>)
   80efe:	4b08      	ldr	r3, [pc, #32]	; (80f20 <board_init+0x6c>)
   80f00:	4798      	blx	r3
   80f02:	bd10      	pop	{r4, pc}
   80f04:	400e1a50 	.word	0x400e1a50
   80f08:	000812b9 	.word	0x000812b9
   80f0c:	00080fc5 	.word	0x00080fc5
   80f10:	28000079 	.word	0x28000079
   80f14:	28000001 	.word	0x28000001
   80f18:	08000001 	.word	0x08000001
   80f1c:	400e0e00 	.word	0x400e0e00
   80f20:	00081095 	.word	0x00081095

00080f24 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80f24:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80f26:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80f2a:	d016      	beq.n	80f5a <pio_set_peripheral+0x36>
   80f2c:	d80b      	bhi.n	80f46 <pio_set_peripheral+0x22>
   80f2e:	b149      	cbz	r1, 80f44 <pio_set_peripheral+0x20>
   80f30:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80f34:	d105      	bne.n	80f42 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80f36:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80f38:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80f3a:	400b      	ands	r3, r1
   80f3c:	ea23 0302 	bic.w	r3, r3, r2
   80f40:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80f42:	6042      	str	r2, [r0, #4]
   80f44:	4770      	bx	lr
	switch (ul_type) {
   80f46:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80f4a:	d0fb      	beq.n	80f44 <pio_set_peripheral+0x20>
   80f4c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80f50:	d0f8      	beq.n	80f44 <pio_set_peripheral+0x20>
   80f52:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80f56:	d1f4      	bne.n	80f42 <pio_set_peripheral+0x1e>
   80f58:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   80f5a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80f5c:	4313      	orrs	r3, r2
   80f5e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80f60:	e7ef      	b.n	80f42 <pio_set_peripheral+0x1e>

00080f62 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80f62:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80f64:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80f68:	bf14      	ite	ne
   80f6a:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80f6c:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80f6e:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80f72:	bf14      	ite	ne
   80f74:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   80f76:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   80f78:	f012 0f02 	tst.w	r2, #2
   80f7c:	d107      	bne.n	80f8e <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   80f7e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80f82:	bf18      	it	ne
   80f84:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   80f88:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80f8a:	6001      	str	r1, [r0, #0]
   80f8c:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   80f8e:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80f92:	e7f9      	b.n	80f88 <pio_set_input+0x26>

00080f94 <pio_set_output>:
{
   80f94:	b410      	push	{r4}
   80f96:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   80f98:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80f9a:	b944      	cbnz	r4, 80fae <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   80f9c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   80f9e:	b143      	cbz	r3, 80fb2 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   80fa0:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   80fa2:	b942      	cbnz	r2, 80fb6 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   80fa4:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   80fa6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80fa8:	6001      	str	r1, [r0, #0]
}
   80faa:	bc10      	pop	{r4}
   80fac:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   80fae:	6641      	str	r1, [r0, #100]	; 0x64
   80fb0:	e7f5      	b.n	80f9e <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   80fb2:	6541      	str	r1, [r0, #84]	; 0x54
   80fb4:	e7f5      	b.n	80fa2 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   80fb6:	6301      	str	r1, [r0, #48]	; 0x30
   80fb8:	e7f5      	b.n	80fa6 <pio_set_output+0x12>

00080fba <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80fba:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80fbc:	4770      	bx	lr

00080fbe <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80fbe:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80fc0:	4770      	bx	lr
	...

00080fc4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80fc4:	b570      	push	{r4, r5, r6, lr}
   80fc6:	b082      	sub	sp, #8
   80fc8:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80fca:	0943      	lsrs	r3, r0, #5
   80fcc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80fd0:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80fd4:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   80fd6:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80fda:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80fde:	d031      	beq.n	81044 <pio_configure_pin+0x80>
   80fe0:	d816      	bhi.n	81010 <pio_configure_pin+0x4c>
   80fe2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80fe6:	d01b      	beq.n	81020 <pio_configure_pin+0x5c>
   80fe8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80fec:	d116      	bne.n	8101c <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80fee:	f000 001f 	and.w	r0, r0, #31
   80ff2:	2601      	movs	r6, #1
   80ff4:	4086      	lsls	r6, r0
   80ff6:	4632      	mov	r2, r6
   80ff8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80ffc:	4620      	mov	r0, r4
   80ffe:	4b22      	ldr	r3, [pc, #136]	; (81088 <pio_configure_pin+0xc4>)
   81000:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81002:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81006:	bf14      	ite	ne
   81008:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8100a:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   8100c:	2001      	movs	r0, #1
   8100e:	e017      	b.n	81040 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   81010:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81014:	d021      	beq.n	8105a <pio_configure_pin+0x96>
   81016:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8101a:	d01e      	beq.n	8105a <pio_configure_pin+0x96>
		return 0;
   8101c:	2000      	movs	r0, #0
   8101e:	e00f      	b.n	81040 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81020:	f000 001f 	and.w	r0, r0, #31
   81024:	2601      	movs	r6, #1
   81026:	4086      	lsls	r6, r0
   81028:	4632      	mov	r2, r6
   8102a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8102e:	4620      	mov	r0, r4
   81030:	4b15      	ldr	r3, [pc, #84]	; (81088 <pio_configure_pin+0xc4>)
   81032:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81034:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81038:	bf14      	ite	ne
   8103a:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8103c:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   8103e:	2001      	movs	r0, #1
}
   81040:	b002      	add	sp, #8
   81042:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   81044:	f000 011f 	and.w	r1, r0, #31
   81048:	2601      	movs	r6, #1
   8104a:	462a      	mov	r2, r5
   8104c:	fa06 f101 	lsl.w	r1, r6, r1
   81050:	4620      	mov	r0, r4
   81052:	4b0e      	ldr	r3, [pc, #56]	; (8108c <pio_configure_pin+0xc8>)
   81054:	4798      	blx	r3
	return 1;
   81056:	4630      	mov	r0, r6
		break;
   81058:	e7f2      	b.n	81040 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8105a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8105e:	f000 011f 	and.w	r1, r0, #31
   81062:	2601      	movs	r6, #1
   81064:	ea05 0306 	and.w	r3, r5, r6
   81068:	9300      	str	r3, [sp, #0]
   8106a:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8106e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81072:	bf14      	ite	ne
   81074:	2200      	movne	r2, #0
   81076:	2201      	moveq	r2, #1
   81078:	fa06 f101 	lsl.w	r1, r6, r1
   8107c:	4620      	mov	r0, r4
   8107e:	4c04      	ldr	r4, [pc, #16]	; (81090 <pio_configure_pin+0xcc>)
   81080:	47a0      	blx	r4
	return 1;
   81082:	4630      	mov	r0, r6
		break;
   81084:	e7dc      	b.n	81040 <pio_configure_pin+0x7c>
   81086:	bf00      	nop
   81088:	00080f25 	.word	0x00080f25
   8108c:	00080f63 	.word	0x00080f63
   81090:	00080f95 	.word	0x00080f95

00081094 <pio_configure_pin_group>:
{
   81094:	b570      	push	{r4, r5, r6, lr}
   81096:	b082      	sub	sp, #8
   81098:	4605      	mov	r5, r0
   8109a:	460e      	mov	r6, r1
   8109c:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   8109e:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   810a2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   810a6:	d027      	beq.n	810f8 <pio_configure_pin_group+0x64>
   810a8:	d811      	bhi.n	810ce <pio_configure_pin_group+0x3a>
   810aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   810ae:	d016      	beq.n	810de <pio_configure_pin_group+0x4a>
   810b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   810b4:	d111      	bne.n	810da <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   810b6:	460a      	mov	r2, r1
   810b8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   810bc:	4b19      	ldr	r3, [pc, #100]	; (81124 <pio_configure_pin_group+0x90>)
   810be:	4798      	blx	r3
	if (ul_pull_up_enable) {
   810c0:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   810c4:	bf14      	ite	ne
   810c6:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   810c8:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   810ca:	2001      	movs	r0, #1
   810cc:	e012      	b.n	810f4 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   810ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   810d2:	d015      	beq.n	81100 <pio_configure_pin_group+0x6c>
   810d4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   810d8:	d012      	beq.n	81100 <pio_configure_pin_group+0x6c>
		return 0;
   810da:	2000      	movs	r0, #0
   810dc:	e00a      	b.n	810f4 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   810de:	460a      	mov	r2, r1
   810e0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   810e4:	4b0f      	ldr	r3, [pc, #60]	; (81124 <pio_configure_pin_group+0x90>)
   810e6:	4798      	blx	r3
	if (ul_pull_up_enable) {
   810e8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   810ec:	bf14      	ite	ne
   810ee:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   810f0:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   810f2:	2001      	movs	r0, #1
}
   810f4:	b002      	add	sp, #8
   810f6:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   810f8:	4b0b      	ldr	r3, [pc, #44]	; (81128 <pio_configure_pin_group+0x94>)
   810fa:	4798      	blx	r3
	return 1;
   810fc:	2001      	movs	r0, #1
		break;
   810fe:	e7f9      	b.n	810f4 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81100:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   81104:	f004 0301 	and.w	r3, r4, #1
   81108:	9300      	str	r3, [sp, #0]
   8110a:	f3c4 0380 	ubfx	r3, r4, #2, #1
   8110e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81112:	bf14      	ite	ne
   81114:	2200      	movne	r2, #0
   81116:	2201      	moveq	r2, #1
   81118:	4631      	mov	r1, r6
   8111a:	4628      	mov	r0, r5
   8111c:	4c03      	ldr	r4, [pc, #12]	; (8112c <pio_configure_pin_group+0x98>)
   8111e:	47a0      	blx	r4
	return 1;
   81120:	2001      	movs	r0, #1
		break;
   81122:	e7e7      	b.n	810f4 <pio_configure_pin_group+0x60>
   81124:	00080f25 	.word	0x00080f25
   81128:	00080f63 	.word	0x00080f63
   8112c:	00080f95 	.word	0x00080f95

00081130 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81134:	4604      	mov	r4, r0
   81136:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   81138:	4b0e      	ldr	r3, [pc, #56]	; (81174 <pio_handler_process+0x44>)
   8113a:	4798      	blx	r3
   8113c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8113e:	4620      	mov	r0, r4
   81140:	4b0d      	ldr	r3, [pc, #52]	; (81178 <pio_handler_process+0x48>)
   81142:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   81144:	4005      	ands	r5, r0
   81146:	d013      	beq.n	81170 <pio_handler_process+0x40>
   81148:	4c0c      	ldr	r4, [pc, #48]	; (8117c <pio_handler_process+0x4c>)
   8114a:	f104 0660 	add.w	r6, r4, #96	; 0x60
   8114e:	e003      	b.n	81158 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   81150:	42b4      	cmp	r4, r6
   81152:	d00d      	beq.n	81170 <pio_handler_process+0x40>
   81154:	3410      	adds	r4, #16
		while (status != 0) {
   81156:	b15d      	cbz	r5, 81170 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   81158:	6820      	ldr	r0, [r4, #0]
   8115a:	4540      	cmp	r0, r8
   8115c:	d1f8      	bne.n	81150 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8115e:	6861      	ldr	r1, [r4, #4]
   81160:	4229      	tst	r1, r5
   81162:	d0f5      	beq.n	81150 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81164:	68e3      	ldr	r3, [r4, #12]
   81166:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   81168:	6863      	ldr	r3, [r4, #4]
   8116a:	ea25 0503 	bic.w	r5, r5, r3
   8116e:	e7ef      	b.n	81150 <pio_handler_process+0x20>
   81170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81174:	00080fbb 	.word	0x00080fbb
   81178:	00080fbf 	.word	0x00080fbf
   8117c:	20070ee8 	.word	0x20070ee8

00081180 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81180:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   81182:	210b      	movs	r1, #11
   81184:	4801      	ldr	r0, [pc, #4]	; (8118c <PIOA_Handler+0xc>)
   81186:	4b02      	ldr	r3, [pc, #8]	; (81190 <PIOA_Handler+0x10>)
   81188:	4798      	blx	r3
   8118a:	bd08      	pop	{r3, pc}
   8118c:	400e0e00 	.word	0x400e0e00
   81190:	00081131 	.word	0x00081131

00081194 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81194:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   81196:	210c      	movs	r1, #12
   81198:	4801      	ldr	r0, [pc, #4]	; (811a0 <PIOB_Handler+0xc>)
   8119a:	4b02      	ldr	r3, [pc, #8]	; (811a4 <PIOB_Handler+0x10>)
   8119c:	4798      	blx	r3
   8119e:	bd08      	pop	{r3, pc}
   811a0:	400e1000 	.word	0x400e1000
   811a4:	00081131 	.word	0x00081131

000811a8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   811a8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   811aa:	210d      	movs	r1, #13
   811ac:	4801      	ldr	r0, [pc, #4]	; (811b4 <PIOC_Handler+0xc>)
   811ae:	4b02      	ldr	r3, [pc, #8]	; (811b8 <PIOC_Handler+0x10>)
   811b0:	4798      	blx	r3
   811b2:	bd08      	pop	{r3, pc}
   811b4:	400e1200 	.word	0x400e1200
   811b8:	00081131 	.word	0x00081131

000811bc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   811bc:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   811be:	210e      	movs	r1, #14
   811c0:	4801      	ldr	r0, [pc, #4]	; (811c8 <PIOD_Handler+0xc>)
   811c2:	4b02      	ldr	r3, [pc, #8]	; (811cc <PIOD_Handler+0x10>)
   811c4:	4798      	blx	r3
   811c6:	bd08      	pop	{r3, pc}
   811c8:	400e1400 	.word	0x400e1400
   811cc:	00081131 	.word	0x00081131

000811d0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   811d0:	4a17      	ldr	r2, [pc, #92]	; (81230 <pmc_switch_mck_to_pllack+0x60>)
   811d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   811d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   811d8:	4318      	orrs	r0, r3
   811da:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   811dc:	6e93      	ldr	r3, [r2, #104]	; 0x68
   811de:	f013 0f08 	tst.w	r3, #8
   811e2:	d10a      	bne.n	811fa <pmc_switch_mck_to_pllack+0x2a>
   811e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   811e8:	4911      	ldr	r1, [pc, #68]	; (81230 <pmc_switch_mck_to_pllack+0x60>)
   811ea:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   811ec:	f012 0f08 	tst.w	r2, #8
   811f0:	d103      	bne.n	811fa <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   811f2:	3b01      	subs	r3, #1
   811f4:	d1f9      	bne.n	811ea <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   811f6:	2001      	movs	r0, #1
   811f8:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   811fa:	4a0d      	ldr	r2, [pc, #52]	; (81230 <pmc_switch_mck_to_pllack+0x60>)
   811fc:	6b13      	ldr	r3, [r2, #48]	; 0x30
   811fe:	f023 0303 	bic.w	r3, r3, #3
   81202:	f043 0302 	orr.w	r3, r3, #2
   81206:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81208:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8120a:	f013 0f08 	tst.w	r3, #8
   8120e:	d10a      	bne.n	81226 <pmc_switch_mck_to_pllack+0x56>
   81210:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81214:	4906      	ldr	r1, [pc, #24]	; (81230 <pmc_switch_mck_to_pllack+0x60>)
   81216:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81218:	f012 0f08 	tst.w	r2, #8
   8121c:	d105      	bne.n	8122a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8121e:	3b01      	subs	r3, #1
   81220:	d1f9      	bne.n	81216 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   81222:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   81224:	4770      	bx	lr
	return 0;
   81226:	2000      	movs	r0, #0
   81228:	4770      	bx	lr
   8122a:	2000      	movs	r0, #0
   8122c:	4770      	bx	lr
   8122e:	bf00      	nop
   81230:	400e0600 	.word	0x400e0600

00081234 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   81234:	b9c8      	cbnz	r0, 8126a <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81236:	4a11      	ldr	r2, [pc, #68]	; (8127c <pmc_switch_mainck_to_xtal+0x48>)
   81238:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8123a:	0209      	lsls	r1, r1, #8
   8123c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8123e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   81242:	f023 0303 	bic.w	r3, r3, #3
   81246:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8124a:	f043 0301 	orr.w	r3, r3, #1
   8124e:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81250:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   81252:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81254:	f013 0f01 	tst.w	r3, #1
   81258:	d0fb      	beq.n	81252 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8125a:	4a08      	ldr	r2, [pc, #32]	; (8127c <pmc_switch_mainck_to_xtal+0x48>)
   8125c:	6a13      	ldr	r3, [r2, #32]
   8125e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   81262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   81266:	6213      	str	r3, [r2, #32]
   81268:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8126a:	4904      	ldr	r1, [pc, #16]	; (8127c <pmc_switch_mainck_to_xtal+0x48>)
   8126c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8126e:	4a04      	ldr	r2, [pc, #16]	; (81280 <pmc_switch_mainck_to_xtal+0x4c>)
   81270:	401a      	ands	r2, r3
   81272:	4b04      	ldr	r3, [pc, #16]	; (81284 <pmc_switch_mainck_to_xtal+0x50>)
   81274:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81276:	620b      	str	r3, [r1, #32]
   81278:	4770      	bx	lr
   8127a:	bf00      	nop
   8127c:	400e0600 	.word	0x400e0600
   81280:	fec8fffc 	.word	0xfec8fffc
   81284:	01370002 	.word	0x01370002

00081288 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   81288:	4b02      	ldr	r3, [pc, #8]	; (81294 <pmc_osc_is_ready_mainck+0xc>)
   8128a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8128c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   81290:	4770      	bx	lr
   81292:	bf00      	nop
   81294:	400e0600 	.word	0x400e0600

00081298 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81298:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8129c:	4b01      	ldr	r3, [pc, #4]	; (812a4 <pmc_disable_pllack+0xc>)
   8129e:	629a      	str	r2, [r3, #40]	; 0x28
   812a0:	4770      	bx	lr
   812a2:	bf00      	nop
   812a4:	400e0600 	.word	0x400e0600

000812a8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   812a8:	4b02      	ldr	r3, [pc, #8]	; (812b4 <pmc_is_locked_pllack+0xc>)
   812aa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   812ac:	f000 0002 	and.w	r0, r0, #2
   812b0:	4770      	bx	lr
   812b2:	bf00      	nop
   812b4:	400e0600 	.word	0x400e0600

000812b8 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   812b8:	282c      	cmp	r0, #44	; 0x2c
   812ba:	d81e      	bhi.n	812fa <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   812bc:	281f      	cmp	r0, #31
   812be:	d80c      	bhi.n	812da <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   812c0:	4b11      	ldr	r3, [pc, #68]	; (81308 <pmc_enable_periph_clk+0x50>)
   812c2:	699a      	ldr	r2, [r3, #24]
   812c4:	2301      	movs	r3, #1
   812c6:	4083      	lsls	r3, r0
   812c8:	4393      	bics	r3, r2
   812ca:	d018      	beq.n	812fe <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   812cc:	2301      	movs	r3, #1
   812ce:	fa03 f000 	lsl.w	r0, r3, r0
   812d2:	4b0d      	ldr	r3, [pc, #52]	; (81308 <pmc_enable_periph_clk+0x50>)
   812d4:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   812d6:	2000      	movs	r0, #0
   812d8:	4770      	bx	lr
		ul_id -= 32;
   812da:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   812dc:	4b0a      	ldr	r3, [pc, #40]	; (81308 <pmc_enable_periph_clk+0x50>)
   812de:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   812e2:	2301      	movs	r3, #1
   812e4:	4083      	lsls	r3, r0
   812e6:	4393      	bics	r3, r2
   812e8:	d00b      	beq.n	81302 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   812ea:	2301      	movs	r3, #1
   812ec:	fa03 f000 	lsl.w	r0, r3, r0
   812f0:	4b05      	ldr	r3, [pc, #20]	; (81308 <pmc_enable_periph_clk+0x50>)
   812f2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   812f6:	2000      	movs	r0, #0
   812f8:	4770      	bx	lr
		return 1;
   812fa:	2001      	movs	r0, #1
   812fc:	4770      	bx	lr
	return 0;
   812fe:	2000      	movs	r0, #0
   81300:	4770      	bx	lr
   81302:	2000      	movs	r0, #0
}
   81304:	4770      	bx	lr
   81306:	bf00      	nop
   81308:	400e0600 	.word	0x400e0600

0008130c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   8130c:	e7fe      	b.n	8130c <Dummy_Handler>
	...

00081310 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81310:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   81312:	4b1c      	ldr	r3, [pc, #112]	; (81384 <Reset_Handler+0x74>)
   81314:	4a1c      	ldr	r2, [pc, #112]	; (81388 <Reset_Handler+0x78>)
   81316:	429a      	cmp	r2, r3
   81318:	d010      	beq.n	8133c <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   8131a:	4b1c      	ldr	r3, [pc, #112]	; (8138c <Reset_Handler+0x7c>)
   8131c:	4a19      	ldr	r2, [pc, #100]	; (81384 <Reset_Handler+0x74>)
   8131e:	429a      	cmp	r2, r3
   81320:	d20c      	bcs.n	8133c <Reset_Handler+0x2c>
   81322:	3b01      	subs	r3, #1
   81324:	1a9b      	subs	r3, r3, r2
   81326:	f023 0303 	bic.w	r3, r3, #3
   8132a:	3304      	adds	r3, #4
   8132c:	4413      	add	r3, r2
   8132e:	4916      	ldr	r1, [pc, #88]	; (81388 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   81330:	f851 0b04 	ldr.w	r0, [r1], #4
   81334:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   81338:	429a      	cmp	r2, r3
   8133a:	d1f9      	bne.n	81330 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8133c:	4b14      	ldr	r3, [pc, #80]	; (81390 <Reset_Handler+0x80>)
   8133e:	4a15      	ldr	r2, [pc, #84]	; (81394 <Reset_Handler+0x84>)
   81340:	429a      	cmp	r2, r3
   81342:	d20a      	bcs.n	8135a <Reset_Handler+0x4a>
   81344:	3b01      	subs	r3, #1
   81346:	1a9b      	subs	r3, r3, r2
   81348:	f023 0303 	bic.w	r3, r3, #3
   8134c:	3304      	adds	r3, #4
   8134e:	4413      	add	r3, r2
		*pDest++ = 0;
   81350:	2100      	movs	r1, #0
   81352:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   81356:	4293      	cmp	r3, r2
   81358:	d1fb      	bne.n	81352 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8135a:	4b0f      	ldr	r3, [pc, #60]	; (81398 <Reset_Handler+0x88>)
   8135c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   81360:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   81364:	490d      	ldr	r1, [pc, #52]	; (8139c <Reset_Handler+0x8c>)
   81366:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81368:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   8136c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   81370:	d203      	bcs.n	8137a <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81372:	688b      	ldr	r3, [r1, #8]
   81374:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   81378:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8137a:	4b09      	ldr	r3, [pc, #36]	; (813a0 <Reset_Handler+0x90>)
   8137c:	4798      	blx	r3

	/* Branch to main function */
	main();
   8137e:	4b09      	ldr	r3, [pc, #36]	; (813a4 <Reset_Handler+0x94>)
   81380:	4798      	blx	r3
   81382:	e7fe      	b.n	81382 <Reset_Handler+0x72>
   81384:	20070000 	.word	0x20070000
   81388:	00085814 	.word	0x00085814
   8138c:	20070b10 	.word	0x20070b10
   81390:	20070ff4 	.word	0x20070ff4
   81394:	20070b10 	.word	0x20070b10
   81398:	00080000 	.word	0x00080000
   8139c:	e000ed00 	.word	0xe000ed00
   813a0:	0008270d 	.word	0x0008270d
   813a4:	00081511 	.word	0x00081511

000813a8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   813a8:	4b3d      	ldr	r3, [pc, #244]	; (814a0 <SystemCoreClockUpdate+0xf8>)
   813aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   813ac:	f003 0303 	and.w	r3, r3, #3
   813b0:	2b03      	cmp	r3, #3
   813b2:	d80e      	bhi.n	813d2 <SystemCoreClockUpdate+0x2a>
   813b4:	e8df f003 	tbb	[pc, r3]
   813b8:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   813bc:	4b39      	ldr	r3, [pc, #228]	; (814a4 <SystemCoreClockUpdate+0xfc>)
   813be:	695b      	ldr	r3, [r3, #20]
   813c0:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   813c4:	bf14      	ite	ne
   813c6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   813ca:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   813ce:	4b36      	ldr	r3, [pc, #216]	; (814a8 <SystemCoreClockUpdate+0x100>)
   813d0:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   813d2:	4b33      	ldr	r3, [pc, #204]	; (814a0 <SystemCoreClockUpdate+0xf8>)
   813d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   813d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   813da:	2b70      	cmp	r3, #112	; 0x70
   813dc:	d057      	beq.n	8148e <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   813de:	4b30      	ldr	r3, [pc, #192]	; (814a0 <SystemCoreClockUpdate+0xf8>)
   813e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   813e2:	4931      	ldr	r1, [pc, #196]	; (814a8 <SystemCoreClockUpdate+0x100>)
   813e4:	f3c2 1202 	ubfx	r2, r2, #4, #3
   813e8:	680b      	ldr	r3, [r1, #0]
   813ea:	40d3      	lsrs	r3, r2
   813ec:	600b      	str	r3, [r1, #0]
   813ee:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   813f0:	4b2b      	ldr	r3, [pc, #172]	; (814a0 <SystemCoreClockUpdate+0xf8>)
   813f2:	6a1b      	ldr	r3, [r3, #32]
   813f4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   813f8:	d003      	beq.n	81402 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   813fa:	4a2c      	ldr	r2, [pc, #176]	; (814ac <SystemCoreClockUpdate+0x104>)
   813fc:	4b2a      	ldr	r3, [pc, #168]	; (814a8 <SystemCoreClockUpdate+0x100>)
   813fe:	601a      	str	r2, [r3, #0]
   81400:	e7e7      	b.n	813d2 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81402:	4a2b      	ldr	r2, [pc, #172]	; (814b0 <SystemCoreClockUpdate+0x108>)
   81404:	4b28      	ldr	r3, [pc, #160]	; (814a8 <SystemCoreClockUpdate+0x100>)
   81406:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81408:	4b25      	ldr	r3, [pc, #148]	; (814a0 <SystemCoreClockUpdate+0xf8>)
   8140a:	6a1b      	ldr	r3, [r3, #32]
   8140c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81410:	2b10      	cmp	r3, #16
   81412:	d005      	beq.n	81420 <SystemCoreClockUpdate+0x78>
   81414:	2b20      	cmp	r3, #32
   81416:	d1dc      	bne.n	813d2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   81418:	4a24      	ldr	r2, [pc, #144]	; (814ac <SystemCoreClockUpdate+0x104>)
   8141a:	4b23      	ldr	r3, [pc, #140]	; (814a8 <SystemCoreClockUpdate+0x100>)
   8141c:	601a      	str	r2, [r3, #0]
				break;
   8141e:	e7d8      	b.n	813d2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   81420:	4a24      	ldr	r2, [pc, #144]	; (814b4 <SystemCoreClockUpdate+0x10c>)
   81422:	4b21      	ldr	r3, [pc, #132]	; (814a8 <SystemCoreClockUpdate+0x100>)
   81424:	601a      	str	r2, [r3, #0]
				break;
   81426:	e7d4      	b.n	813d2 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81428:	4b1d      	ldr	r3, [pc, #116]	; (814a0 <SystemCoreClockUpdate+0xf8>)
   8142a:	6a1b      	ldr	r3, [r3, #32]
   8142c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81430:	d00c      	beq.n	8144c <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81432:	4a1e      	ldr	r2, [pc, #120]	; (814ac <SystemCoreClockUpdate+0x104>)
   81434:	4b1c      	ldr	r3, [pc, #112]	; (814a8 <SystemCoreClockUpdate+0x100>)
   81436:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81438:	4b19      	ldr	r3, [pc, #100]	; (814a0 <SystemCoreClockUpdate+0xf8>)
   8143a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8143c:	f003 0303 	and.w	r3, r3, #3
   81440:	2b02      	cmp	r3, #2
   81442:	d016      	beq.n	81472 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81444:	4a1c      	ldr	r2, [pc, #112]	; (814b8 <SystemCoreClockUpdate+0x110>)
   81446:	4b18      	ldr	r3, [pc, #96]	; (814a8 <SystemCoreClockUpdate+0x100>)
   81448:	601a      	str	r2, [r3, #0]
   8144a:	e7c2      	b.n	813d2 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8144c:	4a18      	ldr	r2, [pc, #96]	; (814b0 <SystemCoreClockUpdate+0x108>)
   8144e:	4b16      	ldr	r3, [pc, #88]	; (814a8 <SystemCoreClockUpdate+0x100>)
   81450:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81452:	4b13      	ldr	r3, [pc, #76]	; (814a0 <SystemCoreClockUpdate+0xf8>)
   81454:	6a1b      	ldr	r3, [r3, #32]
   81456:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8145a:	2b10      	cmp	r3, #16
   8145c:	d005      	beq.n	8146a <SystemCoreClockUpdate+0xc2>
   8145e:	2b20      	cmp	r3, #32
   81460:	d1ea      	bne.n	81438 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   81462:	4a12      	ldr	r2, [pc, #72]	; (814ac <SystemCoreClockUpdate+0x104>)
   81464:	4b10      	ldr	r3, [pc, #64]	; (814a8 <SystemCoreClockUpdate+0x100>)
   81466:	601a      	str	r2, [r3, #0]
				break;
   81468:	e7e6      	b.n	81438 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   8146a:	4a12      	ldr	r2, [pc, #72]	; (814b4 <SystemCoreClockUpdate+0x10c>)
   8146c:	4b0e      	ldr	r3, [pc, #56]	; (814a8 <SystemCoreClockUpdate+0x100>)
   8146e:	601a      	str	r2, [r3, #0]
				break;
   81470:	e7e2      	b.n	81438 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81472:	4a0b      	ldr	r2, [pc, #44]	; (814a0 <SystemCoreClockUpdate+0xf8>)
   81474:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81476:	6a92      	ldr	r2, [r2, #40]	; 0x28
   81478:	480b      	ldr	r0, [pc, #44]	; (814a8 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8147a:	f3c1 410a 	ubfx	r1, r1, #16, #11
   8147e:	6803      	ldr	r3, [r0, #0]
   81480:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81484:	b2d2      	uxtb	r2, r2
   81486:	fbb3 f3f2 	udiv	r3, r3, r2
   8148a:	6003      	str	r3, [r0, #0]
   8148c:	e7a1      	b.n	813d2 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   8148e:	4a06      	ldr	r2, [pc, #24]	; (814a8 <SystemCoreClockUpdate+0x100>)
   81490:	6813      	ldr	r3, [r2, #0]
   81492:	490a      	ldr	r1, [pc, #40]	; (814bc <SystemCoreClockUpdate+0x114>)
   81494:	fba1 1303 	umull	r1, r3, r1, r3
   81498:	085b      	lsrs	r3, r3, #1
   8149a:	6013      	str	r3, [r2, #0]
   8149c:	4770      	bx	lr
   8149e:	bf00      	nop
   814a0:	400e0600 	.word	0x400e0600
   814a4:	400e1a10 	.word	0x400e1a10
   814a8:	20070154 	.word	0x20070154
   814ac:	00b71b00 	.word	0x00b71b00
   814b0:	003d0900 	.word	0x003d0900
   814b4:	007a1200 	.word	0x007a1200
   814b8:	0e4e1c00 	.word	0x0e4e1c00
   814bc:	aaaaaaab 	.word	0xaaaaaaab

000814c0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   814c0:	4b0a      	ldr	r3, [pc, #40]	; (814ec <_sbrk+0x2c>)
   814c2:	681b      	ldr	r3, [r3, #0]
   814c4:	b153      	cbz	r3, 814dc <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   814c6:	4b09      	ldr	r3, [pc, #36]	; (814ec <_sbrk+0x2c>)
   814c8:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   814ca:	181a      	adds	r2, r3, r0
   814cc:	4908      	ldr	r1, [pc, #32]	; (814f0 <_sbrk+0x30>)
   814ce:	4291      	cmp	r1, r2
   814d0:	db08      	blt.n	814e4 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   814d2:	4610      	mov	r0, r2
   814d4:	4a05      	ldr	r2, [pc, #20]	; (814ec <_sbrk+0x2c>)
   814d6:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   814d8:	4618      	mov	r0, r3
   814da:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   814dc:	4a05      	ldr	r2, [pc, #20]	; (814f4 <_sbrk+0x34>)
   814de:	4b03      	ldr	r3, [pc, #12]	; (814ec <_sbrk+0x2c>)
   814e0:	601a      	str	r2, [r3, #0]
   814e2:	e7f0      	b.n	814c6 <_sbrk+0x6>
		return (caddr_t) -1;	
   814e4:	f04f 30ff 	mov.w	r0, #4294967295
}
   814e8:	4770      	bx	lr
   814ea:	bf00      	nop
   814ec:	20070f58 	.word	0x20070f58
   814f0:	20087ffc 	.word	0x20087ffc
   814f4:	20072ff8 	.word	0x20072ff8

000814f8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   814f8:	f04f 30ff 	mov.w	r0, #4294967295
   814fc:	4770      	bx	lr

000814fe <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   814fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   81502:	604b      	str	r3, [r1, #4]

	return 0;
}
   81504:	2000      	movs	r0, #0
   81506:	4770      	bx	lr

00081508 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   81508:	2001      	movs	r0, #1
   8150a:	4770      	bx	lr

0008150c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   8150c:	2000      	movs	r0, #0
   8150e:	4770      	bx	lr

00081510 <main>:




int main (void)
{
   81510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81514:	b083      	sub	sp, #12
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
   81516:	4b45      	ldr	r3, [pc, #276]	; (8162c <main+0x11c>)
   81518:	4798      	blx	r3
	board_init();
   8151a:	4b45      	ldr	r3, [pc, #276]	; (81630 <main+0x120>)
   8151c:	4798      	blx	r3
	usart0_init();
   8151e:	4b45      	ldr	r3, [pc, #276]	; (81634 <main+0x124>)
   81520:	4798      	blx	r3
   81522:	200b      	movs	r0, #11
   81524:	4c44      	ldr	r4, [pc, #272]	; (81638 <main+0x128>)
   81526:	47a0      	blx	r4
   81528:	200c      	movs	r0, #12
   8152a:	47a0      	blx	r4
   8152c:	200d      	movs	r0, #13
   8152e:	47a0      	blx	r4
   81530:	200e      	movs	r0, #14
   81532:	47a0      	blx	r4
	ioport_init();
	delayInit();
   81534:	4b41      	ldr	r3, [pc, #260]	; (8163c <main+0x12c>)
   81536:	4798      	blx	r3
	lcdInit();
   81538:	4b41      	ldr	r3, [pc, #260]	; (81640 <main+0x130>)
   8153a:	4798      	blx	r3
	configure_tc();
   8153c:	4b41      	ldr	r3, [pc, #260]	; (81644 <main+0x134>)
   8153e:	4798      	blx	r3
	adc_setup();
   81540:	4b41      	ldr	r3, [pc, #260]	; (81648 <main+0x138>)
   81542:	4798      	blx	r3
	dac_setup();
   81544:	4b41      	ldr	r3, [pc, #260]	; (8164c <main+0x13c>)
   81546:	4798      	blx	r3
	configureConsole();
   81548:	4b41      	ldr	r3, [pc, #260]	; (81650 <main+0x140>)
   8154a:	4798      	blx	r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8154c:	4b41      	ldr	r3, [pc, #260]	; (81654 <main+0x144>)
   8154e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   81552:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81554:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(CHECK_PIN, IOPORT_DIR_OUTPUT);
	uint8_t hammingaddr = createHammingCode(testaddr);
   81558:	483f      	ldr	r0, [pc, #252]	; (81658 <main+0x148>)
   8155a:	4b40      	ldr	r3, [pc, #256]	; (8165c <main+0x14c>)
   8155c:	4798      	blx	r3
   8155e:	4682      	mov	sl, r0
	

	while(1){
		
		//printf("offset: %d/n", getDcOffset());
		if(getCounter() >= 100){
   81560:	4d3f      	ldr	r5, [pc, #252]	; (81660 <main+0x150>)
			tc_stop(TC0,0);
			int16_t* mvBuff = getMvBuffer();
			for(int i=0; i<100; i++){
				sum = sum + (*(mvBuff +i))*(*(mvBuff +i));
   81562:	4c40      	ldr	r4, [pc, #256]	; (81664 <main+0x154>)
				//printf("sample: %d=%d", i,*(mvBuff +i));
			}
			rms = sqrt(sum/100)/1000;
   81564:	f8df b150 	ldr.w	fp, [pc, #336]	; 816b8 <main+0x1a8>
   81568:	e04b      	b.n	81602 <main+0xf2>
   8156a:	fbab 2303 	umull	r2, r3, fp, r3
   8156e:	0958      	lsrs	r0, r3, #5
   81570:	4b3d      	ldr	r3, [pc, #244]	; (81668 <main+0x158>)
   81572:	4798      	blx	r3
   81574:	4b3d      	ldr	r3, [pc, #244]	; (8166c <main+0x15c>)
   81576:	4798      	blx	r3
   81578:	4f3d      	ldr	r7, [pc, #244]	; (81670 <main+0x160>)
   8157a:	2200      	movs	r2, #0
   8157c:	4b3d      	ldr	r3, [pc, #244]	; (81674 <main+0x164>)
   8157e:	47b8      	blx	r7
   81580:	4602      	mov	r2, r0
   81582:	460b      	mov	r3, r1
   81584:	4e3c      	ldr	r6, [pc, #240]	; (81678 <main+0x168>)
   81586:	e9c6 2300 	strd	r2, r3, [r6]
			//printf("RMS: %d", rms);
			sum = 0;
   8158a:	f04f 0900 	mov.w	r9, #0
   8158e:	f8c4 9000 	str.w	r9, [r4]
			effekt = 1000*((rms*rms)/10);
   81592:	4e3a      	ldr	r6, [pc, #232]	; (8167c <main+0x16c>)
   81594:	47b0      	blx	r6
   81596:	2200      	movs	r2, #0
   81598:	4b39      	ldr	r3, [pc, #228]	; (81680 <main+0x170>)
   8159a:	47b8      	blx	r7
   8159c:	2200      	movs	r2, #0
   8159e:	4b35      	ldr	r3, [pc, #212]	; (81674 <main+0x164>)
   815a0:	47b0      	blx	r6
   815a2:	4b38      	ldr	r3, [pc, #224]	; (81684 <main+0x174>)
   815a4:	4798      	blx	r3
   815a6:	4601      	mov	r1, r0
   815a8:	4f37      	ldr	r7, [pc, #220]	; (81688 <main+0x178>)
   815aa:	6038      	str	r0, [r7, #0]
			printf("Effekt: %d", effekt);
   815ac:	4837      	ldr	r0, [pc, #220]	; (8168c <main+0x17c>)
   815ae:	4b38      	ldr	r3, [pc, #224]	; (81690 <main+0x180>)
   815b0:	4798      	blx	r3
			

			uint8_t* singles = getSingles(effekt);
   815b2:	6838      	ldr	r0, [r7, #0]
   815b4:	4b37      	ldr	r3, [pc, #220]	; (81694 <main+0x184>)
   815b6:	4798      	blx	r3
   815b8:	4606      	mov	r6, r0
			//printf("singles: %d", singles);
			uint8_t* tens = getTens(effekt);
   815ba:	6838      	ldr	r0, [r7, #0]
   815bc:	4b36      	ldr	r3, [pc, #216]	; (81698 <main+0x188>)
   815be:	4798      	blx	r3
   815c0:	4680      	mov	r8, r0
			uint8_t* hundreds = getHundreds(effekt);
   815c2:	6838      	ldr	r0, [r7, #0]
   815c4:	4b35      	ldr	r3, [pc, #212]	; (8169c <main+0x18c>)
   815c6:	4798      	blx	r3
   815c8:	9001      	str	r0, [sp, #4]
			
			uint8_t hammingSingle = createHammingCode(singles);
   815ca:	4630      	mov	r0, r6
   815cc:	4e23      	ldr	r6, [pc, #140]	; (8165c <main+0x14c>)
   815ce:	47b0      	blx	r6
   815d0:	4607      	mov	r7, r0
			uint8_t hammingTens = createHammingCode(tens);
   815d2:	4640      	mov	r0, r8
   815d4:	47b0      	blx	r6
   815d6:	4680      	mov	r8, r0
			uint8_t hammingHundreds = createHammingCode(hundreds);
   815d8:	9801      	ldr	r0, [sp, #4]
   815da:	47b0      	blx	r6
			//printf("HAMMING SINGLES %d", hammingSingle);
			
			usart0_send_Packet(hammingaddr,hammingHundreds);
   815dc:	4601      	mov	r1, r0
   815de:	4650      	mov	r0, sl
   815e0:	4e2f      	ldr	r6, [pc, #188]	; (816a0 <main+0x190>)
   815e2:	47b0      	blx	r6
			usart0_send_Packet(hammingaddr,hammingTens);
   815e4:	4641      	mov	r1, r8
   815e6:	4650      	mov	r0, sl
   815e8:	47b0      	blx	r6
			usart0_send_Packet(hammingaddr,hammingSingle);
   815ea:	4639      	mov	r1, r7
   815ec:	4650      	mov	r0, sl
   815ee:	47b0      	blx	r6
			usart0_send_Packet(hammingaddr,0x01);
   815f0:	2101      	movs	r1, #1
   815f2:	4650      	mov	r0, sl
   815f4:	47b0      	blx	r6
			
			
			
			
			reset_counter();
   815f6:	4b2b      	ldr	r3, [pc, #172]	; (816a4 <main+0x194>)
   815f8:	4798      	blx	r3
			tc_start(TC0,0);
   815fa:	4649      	mov	r1, r9
   815fc:	482a      	ldr	r0, [pc, #168]	; (816a8 <main+0x198>)
   815fe:	4b2b      	ldr	r3, [pc, #172]	; (816ac <main+0x19c>)
   81600:	4798      	blx	r3
		if(getCounter() >= 100){
   81602:	47a8      	blx	r5
   81604:	2863      	cmp	r0, #99	; 0x63
   81606:	d9fc      	bls.n	81602 <main+0xf2>
			tc_stop(TC0,0);
   81608:	2100      	movs	r1, #0
   8160a:	4827      	ldr	r0, [pc, #156]	; (816a8 <main+0x198>)
   8160c:	4b28      	ldr	r3, [pc, #160]	; (816b0 <main+0x1a0>)
   8160e:	4798      	blx	r3
			int16_t* mvBuff = getMvBuffer();
   81610:	4b28      	ldr	r3, [pc, #160]	; (816b4 <main+0x1a4>)
   81612:	4798      	blx	r3
   81614:	1e81      	subs	r1, r0, #2
   81616:	30c6      	adds	r0, #198	; 0xc6
				sum = sum + (*(mvBuff +i))*(*(mvBuff +i));
   81618:	f931 3f02 	ldrsh.w	r3, [r1, #2]!
   8161c:	6822      	ldr	r2, [r4, #0]
   8161e:	fb03 2303 	mla	r3, r3, r3, r2
   81622:	6023      	str	r3, [r4, #0]
			for(int i=0; i<100; i++){
   81624:	4281      	cmp	r1, r0
   81626:	d1f7      	bne.n	81618 <main+0x108>
   81628:	e79f      	b.n	8156a <main+0x5a>
   8162a:	bf00      	nop
   8162c:	00080e51 	.word	0x00080e51
   81630:	00080eb5 	.word	0x00080eb5
   81634:	00080db9 	.word	0x00080db9
   81638:	000812b9 	.word	0x000812b9
   8163c:	00080809 	.word	0x00080809
   81640:	00080915 	.word	0x00080915
   81644:	000805d1 	.word	0x000805d1
   81648:	00080161 	.word	0x00080161
   8164c:	000801c5 	.word	0x000801c5
   81650:	00080775 	.word	0x00080775
   81654:	400e1000 	.word	0x400e1000
   81658:	20070158 	.word	0x20070158
   8165c:	000809fd 	.word	0x000809fd
   81660:	00080d99 	.word	0x00080d99
   81664:	20070f68 	.word	0x20070f68
   81668:	00081b79 	.word	0x00081b79
   8166c:	000816bd 	.word	0x000816bd
   81670:	00081eb9 	.word	0x00081eb9
   81674:	408f4000 	.word	0x408f4000
   81678:	20070f60 	.word	0x20070f60
   8167c:	00081c65 	.word	0x00081c65
   81680:	40240000 	.word	0x40240000
   81684:	000821c5 	.word	0x000821c5
   81688:	20070f5c 	.word	0x20070f5c
   8168c:	0008566c 	.word	0x0008566c
   81690:	0008275d 	.word	0x0008275d
   81694:	00080b19 	.word	0x00080b19
   81698:	00080ba9 	.word	0x00080ba9
   8169c:	00080a79 	.word	0x00080a79
   816a0:	00080e2d 	.word	0x00080e2d
   816a4:	00080dad 	.word	0x00080dad
   816a8:	40080000 	.word	0x40080000
   816ac:	000804bd 	.word	0x000804bd
   816b0:	000804c5 	.word	0x000804c5
   816b4:	00080da5 	.word	0x00080da5
   816b8:	51eb851f 	.word	0x51eb851f

000816bc <sqrt>:
   816bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   816c0:	b08b      	sub	sp, #44	; 0x2c
   816c2:	4604      	mov	r4, r0
   816c4:	460d      	mov	r5, r1
   816c6:	f000 f857 	bl	81778 <__ieee754_sqrt>
   816ca:	4b29      	ldr	r3, [pc, #164]	; (81770 <sqrt+0xb4>)
   816cc:	4606      	mov	r6, r0
   816ce:	f993 a000 	ldrsb.w	sl, [r3]
   816d2:	460f      	mov	r7, r1
   816d4:	f1ba 3fff 	cmp.w	sl, #4294967295
   816d8:	d012      	beq.n	81700 <sqrt+0x44>
   816da:	4622      	mov	r2, r4
   816dc:	462b      	mov	r3, r5
   816de:	4620      	mov	r0, r4
   816e0:	4629      	mov	r1, r5
   816e2:	f000 fd59 	bl	82198 <__aeabi_dcmpun>
   816e6:	4683      	mov	fp, r0
   816e8:	b950      	cbnz	r0, 81700 <sqrt+0x44>
   816ea:	f04f 0800 	mov.w	r8, #0
   816ee:	f04f 0900 	mov.w	r9, #0
   816f2:	4620      	mov	r0, r4
   816f4:	4629      	mov	r1, r5
   816f6:	4642      	mov	r2, r8
   816f8:	464b      	mov	r3, r9
   816fa:	f000 fd25 	bl	82148 <__aeabi_dcmplt>
   816fe:	b920      	cbnz	r0, 8170a <sqrt+0x4e>
   81700:	4630      	mov	r0, r6
   81702:	4639      	mov	r1, r7
   81704:	b00b      	add	sp, #44	; 0x2c
   81706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8170a:	2201      	movs	r2, #1
   8170c:	4b19      	ldr	r3, [pc, #100]	; (81774 <sqrt+0xb8>)
   8170e:	f8cd b020 	str.w	fp, [sp, #32]
   81712:	e9cd 4504 	strd	r4, r5, [sp, #16]
   81716:	e9cd 4502 	strd	r4, r5, [sp, #8]
   8171a:	e88d 000c 	stmia.w	sp, {r2, r3}
   8171e:	f1ba 0f00 	cmp.w	sl, #0
   81722:	d017      	beq.n	81754 <sqrt+0x98>
   81724:	4642      	mov	r2, r8
   81726:	464b      	mov	r3, r9
   81728:	4640      	mov	r0, r8
   8172a:	4649      	mov	r1, r9
   8172c:	f000 fbc4 	bl	81eb8 <__aeabi_ddiv>
   81730:	f1ba 0f02 	cmp.w	sl, #2
   81734:	e9cd 0106 	strd	r0, r1, [sp, #24]
   81738:	d10e      	bne.n	81758 <sqrt+0x9c>
   8173a:	f000 ffe1 	bl	82700 <__errno>
   8173e:	2321      	movs	r3, #33	; 0x21
   81740:	6003      	str	r3, [r0, #0]
   81742:	9b08      	ldr	r3, [sp, #32]
   81744:	b973      	cbnz	r3, 81764 <sqrt+0xa8>
   81746:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   8174a:	4630      	mov	r0, r6
   8174c:	4639      	mov	r1, r7
   8174e:	b00b      	add	sp, #44	; 0x2c
   81750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81754:	e9cd 8906 	strd	r8, r9, [sp, #24]
   81758:	4668      	mov	r0, sp
   8175a:	f000 f8c9 	bl	818f0 <matherr>
   8175e:	2800      	cmp	r0, #0
   81760:	d1ef      	bne.n	81742 <sqrt+0x86>
   81762:	e7ea      	b.n	8173a <sqrt+0x7e>
   81764:	f000 ffcc 	bl	82700 <__errno>
   81768:	9b08      	ldr	r3, [sp, #32]
   8176a:	6003      	str	r3, [r0, #0]
   8176c:	e7eb      	b.n	81746 <sqrt+0x8a>
   8176e:	bf00      	nop
   81770:	2007015c 	.word	0x2007015c
   81774:	00085678 	.word	0x00085678

00081778 <__ieee754_sqrt>:
   81778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8177c:	4f5b      	ldr	r7, [pc, #364]	; (818ec <__ieee754_sqrt+0x174>)
   8177e:	4605      	mov	r5, r0
   81780:	438f      	bics	r7, r1
   81782:	460c      	mov	r4, r1
   81784:	f000 8092 	beq.w	818ac <__ieee754_sqrt+0x134>
   81788:	2900      	cmp	r1, #0
   8178a:	460b      	mov	r3, r1
   8178c:	4602      	mov	r2, r0
   8178e:	dd6f      	ble.n	81870 <__ieee754_sqrt+0xf8>
   81790:	150f      	asrs	r7, r1, #20
   81792:	d07b      	beq.n	8188c <__ieee754_sqrt+0x114>
   81794:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   81798:	f3c3 0313 	ubfx	r3, r3, #0, #20
   8179c:	07f8      	lsls	r0, r7, #31
   8179e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   817a2:	d45c      	bmi.n	8185e <__ieee754_sqrt+0xe6>
   817a4:	2600      	movs	r6, #0
   817a6:	2016      	movs	r0, #22
   817a8:	46b6      	mov	lr, r6
   817aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   817ae:	eb03 74d2 	add.w	r4, r3, r2, lsr #31
   817b2:	107f      	asrs	r7, r7, #1
   817b4:	4423      	add	r3, r4
   817b6:	0052      	lsls	r2, r2, #1
   817b8:	eb0e 0401 	add.w	r4, lr, r1
   817bc:	429c      	cmp	r4, r3
   817be:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   817c2:	ea4f 0242 	mov.w	r2, r2, lsl #1
   817c6:	dc03      	bgt.n	817d0 <__ieee754_sqrt+0x58>
   817c8:	1b1b      	subs	r3, r3, r4
   817ca:	eb04 0e01 	add.w	lr, r4, r1
   817ce:	440e      	add	r6, r1
   817d0:	3801      	subs	r0, #1
   817d2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   817d6:	ea4f 0151 	mov.w	r1, r1, lsr #1
   817da:	d1ed      	bne.n	817b8 <__ieee754_sqrt+0x40>
   817dc:	2420      	movs	r4, #32
   817de:	4684      	mov	ip, r0
   817e0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   817e4:	e009      	b.n	817fa <__ieee754_sqrt+0x82>
   817e6:	d020      	beq.n	8182a <__ieee754_sqrt+0xb2>
   817e8:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   817ec:	3c01      	subs	r4, #1
   817ee:	ea4f 0151 	mov.w	r1, r1, lsr #1
   817f2:	442b      	add	r3, r5
   817f4:	ea4f 0242 	mov.w	r2, r2, lsl #1
   817f8:	d020      	beq.n	8183c <__ieee754_sqrt+0xc4>
   817fa:	4573      	cmp	r3, lr
   817fc:	eb01 050c 	add.w	r5, r1, ip
   81800:	ddf1      	ble.n	817e6 <__ieee754_sqrt+0x6e>
   81802:	2d00      	cmp	r5, #0
   81804:	eb05 0c01 	add.w	ip, r5, r1
   81808:	db09      	blt.n	8181e <__ieee754_sqrt+0xa6>
   8180a:	46f0      	mov	r8, lr
   8180c:	4295      	cmp	r5, r2
   8180e:	eba3 030e 	sub.w	r3, r3, lr
   81812:	d900      	bls.n	81816 <__ieee754_sqrt+0x9e>
   81814:	3b01      	subs	r3, #1
   81816:	46c6      	mov	lr, r8
   81818:	1b52      	subs	r2, r2, r5
   8181a:	4408      	add	r0, r1
   8181c:	e7e4      	b.n	817e8 <__ieee754_sqrt+0x70>
   8181e:	f1bc 0f00 	cmp.w	ip, #0
   81822:	dbf2      	blt.n	8180a <__ieee754_sqrt+0x92>
   81824:	f10e 0801 	add.w	r8, lr, #1
   81828:	e7f0      	b.n	8180c <__ieee754_sqrt+0x94>
   8182a:	4295      	cmp	r5, r2
   8182c:	d8dc      	bhi.n	817e8 <__ieee754_sqrt+0x70>
   8182e:	2d00      	cmp	r5, #0
   81830:	eb05 0c01 	add.w	ip, r5, r1
   81834:	db44      	blt.n	818c0 <__ieee754_sqrt+0x148>
   81836:	4698      	mov	r8, r3
   81838:	2300      	movs	r3, #0
   8183a:	e7ec      	b.n	81816 <__ieee754_sqrt+0x9e>
   8183c:	4313      	orrs	r3, r2
   8183e:	d113      	bne.n	81868 <__ieee754_sqrt+0xf0>
   81840:	0840      	lsrs	r0, r0, #1
   81842:	1073      	asrs	r3, r6, #1
   81844:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   81848:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8184c:	eb03 5907 	add.w	r9, r3, r7, lsl #20
   81850:	4649      	mov	r1, r9
   81852:	07f2      	lsls	r2, r6, #31
   81854:	bf48      	it	mi
   81856:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   8185a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8185e:	005b      	lsls	r3, r3, #1
   81860:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   81864:	0052      	lsls	r2, r2, #1
   81866:	e79d      	b.n	817a4 <__ieee754_sqrt+0x2c>
   81868:	1c41      	adds	r1, r0, #1
   8186a:	d02d      	beq.n	818c8 <__ieee754_sqrt+0x150>
   8186c:	3001      	adds	r0, #1
   8186e:	e7e7      	b.n	81840 <__ieee754_sqrt+0xc8>
   81870:	4606      	mov	r6, r0
   81872:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
   81876:	433e      	orrs	r6, r7
   81878:	d0ef      	beq.n	8185a <__ieee754_sqrt+0xe2>
   8187a:	bb69      	cbnz	r1, 818d8 <__ieee754_sqrt+0x160>
   8187c:	460f      	mov	r7, r1
   8187e:	0ad3      	lsrs	r3, r2, #11
   81880:	3f15      	subs	r7, #21
   81882:	0552      	lsls	r2, r2, #21
   81884:	2b00      	cmp	r3, #0
   81886:	d0fa      	beq.n	8187e <__ieee754_sqrt+0x106>
   81888:	02de      	lsls	r6, r3, #11
   8188a:	d420      	bmi.n	818ce <__ieee754_sqrt+0x156>
   8188c:	2400      	movs	r4, #0
   8188e:	e000      	b.n	81892 <__ieee754_sqrt+0x11a>
   81890:	4604      	mov	r4, r0
   81892:	005b      	lsls	r3, r3, #1
   81894:	02dd      	lsls	r5, r3, #11
   81896:	f104 0001 	add.w	r0, r4, #1
   8189a:	d5f9      	bpl.n	81890 <__ieee754_sqrt+0x118>
   8189c:	f1c0 0120 	rsb	r1, r0, #32
   818a0:	fa22 f101 	lsr.w	r1, r2, r1
   818a4:	430b      	orrs	r3, r1
   818a6:	1b3f      	subs	r7, r7, r4
   818a8:	4082      	lsls	r2, r0
   818aa:	e773      	b.n	81794 <__ieee754_sqrt+0x1c>
   818ac:	4602      	mov	r2, r0
   818ae:	460b      	mov	r3, r1
   818b0:	f000 f9d8 	bl	81c64 <__aeabi_dmul>
   818b4:	462a      	mov	r2, r5
   818b6:	4623      	mov	r3, r4
   818b8:	f000 f822 	bl	81900 <__adddf3>
   818bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   818c0:	f1bc 0f00 	cmp.w	ip, #0
   818c4:	daae      	bge.n	81824 <__ieee754_sqrt+0xac>
   818c6:	e7b6      	b.n	81836 <__ieee754_sqrt+0xbe>
   818c8:	3601      	adds	r6, #1
   818ca:	4620      	mov	r0, r4
   818cc:	e7b9      	b.n	81842 <__ieee754_sqrt+0xca>
   818ce:	2000      	movs	r0, #0
   818d0:	2120      	movs	r1, #32
   818d2:	f04f 34ff 	mov.w	r4, #4294967295
   818d6:	e7e3      	b.n	818a0 <__ieee754_sqrt+0x128>
   818d8:	4602      	mov	r2, r0
   818da:	460b      	mov	r3, r1
   818dc:	f000 f80e 	bl	818fc <__aeabi_dsub>
   818e0:	4602      	mov	r2, r0
   818e2:	460b      	mov	r3, r1
   818e4:	f000 fae8 	bl	81eb8 <__aeabi_ddiv>
   818e8:	e7b7      	b.n	8185a <__ieee754_sqrt+0xe2>
   818ea:	bf00      	nop
   818ec:	7ff00000 	.word	0x7ff00000

000818f0 <matherr>:
   818f0:	2000      	movs	r0, #0
   818f2:	4770      	bx	lr

000818f4 <__aeabi_drsub>:
   818f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   818f8:	e002      	b.n	81900 <__adddf3>
   818fa:	bf00      	nop

000818fc <__aeabi_dsub>:
   818fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00081900 <__adddf3>:
   81900:	b530      	push	{r4, r5, lr}
   81902:	ea4f 0441 	mov.w	r4, r1, lsl #1
   81906:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8190a:	ea94 0f05 	teq	r4, r5
   8190e:	bf08      	it	eq
   81910:	ea90 0f02 	teqeq	r0, r2
   81914:	bf1f      	itttt	ne
   81916:	ea54 0c00 	orrsne.w	ip, r4, r0
   8191a:	ea55 0c02 	orrsne.w	ip, r5, r2
   8191e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   81922:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81926:	f000 80e2 	beq.w	81aee <__adddf3+0x1ee>
   8192a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8192e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   81932:	bfb8      	it	lt
   81934:	426d      	neglt	r5, r5
   81936:	dd0c      	ble.n	81952 <__adddf3+0x52>
   81938:	442c      	add	r4, r5
   8193a:	ea80 0202 	eor.w	r2, r0, r2
   8193e:	ea81 0303 	eor.w	r3, r1, r3
   81942:	ea82 0000 	eor.w	r0, r2, r0
   81946:	ea83 0101 	eor.w	r1, r3, r1
   8194a:	ea80 0202 	eor.w	r2, r0, r2
   8194e:	ea81 0303 	eor.w	r3, r1, r3
   81952:	2d36      	cmp	r5, #54	; 0x36
   81954:	bf88      	it	hi
   81956:	bd30      	pophi	{r4, r5, pc}
   81958:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8195c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81960:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   81964:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   81968:	d002      	beq.n	81970 <__adddf3+0x70>
   8196a:	4240      	negs	r0, r0
   8196c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81970:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   81974:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81978:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8197c:	d002      	beq.n	81984 <__adddf3+0x84>
   8197e:	4252      	negs	r2, r2
   81980:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   81984:	ea94 0f05 	teq	r4, r5
   81988:	f000 80a7 	beq.w	81ada <__adddf3+0x1da>
   8198c:	f1a4 0401 	sub.w	r4, r4, #1
   81990:	f1d5 0e20 	rsbs	lr, r5, #32
   81994:	db0d      	blt.n	819b2 <__adddf3+0xb2>
   81996:	fa02 fc0e 	lsl.w	ip, r2, lr
   8199a:	fa22 f205 	lsr.w	r2, r2, r5
   8199e:	1880      	adds	r0, r0, r2
   819a0:	f141 0100 	adc.w	r1, r1, #0
   819a4:	fa03 f20e 	lsl.w	r2, r3, lr
   819a8:	1880      	adds	r0, r0, r2
   819aa:	fa43 f305 	asr.w	r3, r3, r5
   819ae:	4159      	adcs	r1, r3
   819b0:	e00e      	b.n	819d0 <__adddf3+0xd0>
   819b2:	f1a5 0520 	sub.w	r5, r5, #32
   819b6:	f10e 0e20 	add.w	lr, lr, #32
   819ba:	2a01      	cmp	r2, #1
   819bc:	fa03 fc0e 	lsl.w	ip, r3, lr
   819c0:	bf28      	it	cs
   819c2:	f04c 0c02 	orrcs.w	ip, ip, #2
   819c6:	fa43 f305 	asr.w	r3, r3, r5
   819ca:	18c0      	adds	r0, r0, r3
   819cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   819d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   819d4:	d507      	bpl.n	819e6 <__adddf3+0xe6>
   819d6:	f04f 0e00 	mov.w	lr, #0
   819da:	f1dc 0c00 	rsbs	ip, ip, #0
   819de:	eb7e 0000 	sbcs.w	r0, lr, r0
   819e2:	eb6e 0101 	sbc.w	r1, lr, r1
   819e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   819ea:	d31b      	bcc.n	81a24 <__adddf3+0x124>
   819ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   819f0:	d30c      	bcc.n	81a0c <__adddf3+0x10c>
   819f2:	0849      	lsrs	r1, r1, #1
   819f4:	ea5f 0030 	movs.w	r0, r0, rrx
   819f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   819fc:	f104 0401 	add.w	r4, r4, #1
   81a00:	ea4f 5244 	mov.w	r2, r4, lsl #21
   81a04:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   81a08:	f080 809a 	bcs.w	81b40 <__adddf3+0x240>
   81a0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81a10:	bf08      	it	eq
   81a12:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81a16:	f150 0000 	adcs.w	r0, r0, #0
   81a1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81a1e:	ea41 0105 	orr.w	r1, r1, r5
   81a22:	bd30      	pop	{r4, r5, pc}
   81a24:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   81a28:	4140      	adcs	r0, r0
   81a2a:	eb41 0101 	adc.w	r1, r1, r1
   81a2e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81a32:	f1a4 0401 	sub.w	r4, r4, #1
   81a36:	d1e9      	bne.n	81a0c <__adddf3+0x10c>
   81a38:	f091 0f00 	teq	r1, #0
   81a3c:	bf04      	itt	eq
   81a3e:	4601      	moveq	r1, r0
   81a40:	2000      	moveq	r0, #0
   81a42:	fab1 f381 	clz	r3, r1
   81a46:	bf08      	it	eq
   81a48:	3320      	addeq	r3, #32
   81a4a:	f1a3 030b 	sub.w	r3, r3, #11
   81a4e:	f1b3 0220 	subs.w	r2, r3, #32
   81a52:	da0c      	bge.n	81a6e <__adddf3+0x16e>
   81a54:	320c      	adds	r2, #12
   81a56:	dd08      	ble.n	81a6a <__adddf3+0x16a>
   81a58:	f102 0c14 	add.w	ip, r2, #20
   81a5c:	f1c2 020c 	rsb	r2, r2, #12
   81a60:	fa01 f00c 	lsl.w	r0, r1, ip
   81a64:	fa21 f102 	lsr.w	r1, r1, r2
   81a68:	e00c      	b.n	81a84 <__adddf3+0x184>
   81a6a:	f102 0214 	add.w	r2, r2, #20
   81a6e:	bfd8      	it	le
   81a70:	f1c2 0c20 	rsble	ip, r2, #32
   81a74:	fa01 f102 	lsl.w	r1, r1, r2
   81a78:	fa20 fc0c 	lsr.w	ip, r0, ip
   81a7c:	bfdc      	itt	le
   81a7e:	ea41 010c 	orrle.w	r1, r1, ip
   81a82:	4090      	lslle	r0, r2
   81a84:	1ae4      	subs	r4, r4, r3
   81a86:	bfa2      	ittt	ge
   81a88:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   81a8c:	4329      	orrge	r1, r5
   81a8e:	bd30      	popge	{r4, r5, pc}
   81a90:	ea6f 0404 	mvn.w	r4, r4
   81a94:	3c1f      	subs	r4, #31
   81a96:	da1c      	bge.n	81ad2 <__adddf3+0x1d2>
   81a98:	340c      	adds	r4, #12
   81a9a:	dc0e      	bgt.n	81aba <__adddf3+0x1ba>
   81a9c:	f104 0414 	add.w	r4, r4, #20
   81aa0:	f1c4 0220 	rsb	r2, r4, #32
   81aa4:	fa20 f004 	lsr.w	r0, r0, r4
   81aa8:	fa01 f302 	lsl.w	r3, r1, r2
   81aac:	ea40 0003 	orr.w	r0, r0, r3
   81ab0:	fa21 f304 	lsr.w	r3, r1, r4
   81ab4:	ea45 0103 	orr.w	r1, r5, r3
   81ab8:	bd30      	pop	{r4, r5, pc}
   81aba:	f1c4 040c 	rsb	r4, r4, #12
   81abe:	f1c4 0220 	rsb	r2, r4, #32
   81ac2:	fa20 f002 	lsr.w	r0, r0, r2
   81ac6:	fa01 f304 	lsl.w	r3, r1, r4
   81aca:	ea40 0003 	orr.w	r0, r0, r3
   81ace:	4629      	mov	r1, r5
   81ad0:	bd30      	pop	{r4, r5, pc}
   81ad2:	fa21 f004 	lsr.w	r0, r1, r4
   81ad6:	4629      	mov	r1, r5
   81ad8:	bd30      	pop	{r4, r5, pc}
   81ada:	f094 0f00 	teq	r4, #0
   81ade:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   81ae2:	bf06      	itte	eq
   81ae4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   81ae8:	3401      	addeq	r4, #1
   81aea:	3d01      	subne	r5, #1
   81aec:	e74e      	b.n	8198c <__adddf3+0x8c>
   81aee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81af2:	bf18      	it	ne
   81af4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81af8:	d029      	beq.n	81b4e <__adddf3+0x24e>
   81afa:	ea94 0f05 	teq	r4, r5
   81afe:	bf08      	it	eq
   81b00:	ea90 0f02 	teqeq	r0, r2
   81b04:	d005      	beq.n	81b12 <__adddf3+0x212>
   81b06:	ea54 0c00 	orrs.w	ip, r4, r0
   81b0a:	bf04      	itt	eq
   81b0c:	4619      	moveq	r1, r3
   81b0e:	4610      	moveq	r0, r2
   81b10:	bd30      	pop	{r4, r5, pc}
   81b12:	ea91 0f03 	teq	r1, r3
   81b16:	bf1e      	ittt	ne
   81b18:	2100      	movne	r1, #0
   81b1a:	2000      	movne	r0, #0
   81b1c:	bd30      	popne	{r4, r5, pc}
   81b1e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   81b22:	d105      	bne.n	81b30 <__adddf3+0x230>
   81b24:	0040      	lsls	r0, r0, #1
   81b26:	4149      	adcs	r1, r1
   81b28:	bf28      	it	cs
   81b2a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   81b2e:	bd30      	pop	{r4, r5, pc}
   81b30:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   81b34:	bf3c      	itt	cc
   81b36:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   81b3a:	bd30      	popcc	{r4, r5, pc}
   81b3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81b40:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   81b44:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81b48:	f04f 0000 	mov.w	r0, #0
   81b4c:	bd30      	pop	{r4, r5, pc}
   81b4e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81b52:	bf1a      	itte	ne
   81b54:	4619      	movne	r1, r3
   81b56:	4610      	movne	r0, r2
   81b58:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   81b5c:	bf1c      	itt	ne
   81b5e:	460b      	movne	r3, r1
   81b60:	4602      	movne	r2, r0
   81b62:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81b66:	bf06      	itte	eq
   81b68:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   81b6c:	ea91 0f03 	teqeq	r1, r3
   81b70:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   81b74:	bd30      	pop	{r4, r5, pc}
   81b76:	bf00      	nop

00081b78 <__aeabi_ui2d>:
   81b78:	f090 0f00 	teq	r0, #0
   81b7c:	bf04      	itt	eq
   81b7e:	2100      	moveq	r1, #0
   81b80:	4770      	bxeq	lr
   81b82:	b530      	push	{r4, r5, lr}
   81b84:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81b88:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81b8c:	f04f 0500 	mov.w	r5, #0
   81b90:	f04f 0100 	mov.w	r1, #0
   81b94:	e750      	b.n	81a38 <__adddf3+0x138>
   81b96:	bf00      	nop

00081b98 <__aeabi_i2d>:
   81b98:	f090 0f00 	teq	r0, #0
   81b9c:	bf04      	itt	eq
   81b9e:	2100      	moveq	r1, #0
   81ba0:	4770      	bxeq	lr
   81ba2:	b530      	push	{r4, r5, lr}
   81ba4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81ba8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81bac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   81bb0:	bf48      	it	mi
   81bb2:	4240      	negmi	r0, r0
   81bb4:	f04f 0100 	mov.w	r1, #0
   81bb8:	e73e      	b.n	81a38 <__adddf3+0x138>
   81bba:	bf00      	nop

00081bbc <__aeabi_f2d>:
   81bbc:	0042      	lsls	r2, r0, #1
   81bbe:	ea4f 01e2 	mov.w	r1, r2, asr #3
   81bc2:	ea4f 0131 	mov.w	r1, r1, rrx
   81bc6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   81bca:	bf1f      	itttt	ne
   81bcc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   81bd0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81bd4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   81bd8:	4770      	bxne	lr
   81bda:	f092 0f00 	teq	r2, #0
   81bde:	bf14      	ite	ne
   81be0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81be4:	4770      	bxeq	lr
   81be6:	b530      	push	{r4, r5, lr}
   81be8:	f44f 7460 	mov.w	r4, #896	; 0x380
   81bec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81bf0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81bf4:	e720      	b.n	81a38 <__adddf3+0x138>
   81bf6:	bf00      	nop

00081bf8 <__aeabi_ul2d>:
   81bf8:	ea50 0201 	orrs.w	r2, r0, r1
   81bfc:	bf08      	it	eq
   81bfe:	4770      	bxeq	lr
   81c00:	b530      	push	{r4, r5, lr}
   81c02:	f04f 0500 	mov.w	r5, #0
   81c06:	e00a      	b.n	81c1e <__aeabi_l2d+0x16>

00081c08 <__aeabi_l2d>:
   81c08:	ea50 0201 	orrs.w	r2, r0, r1
   81c0c:	bf08      	it	eq
   81c0e:	4770      	bxeq	lr
   81c10:	b530      	push	{r4, r5, lr}
   81c12:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   81c16:	d502      	bpl.n	81c1e <__aeabi_l2d+0x16>
   81c18:	4240      	negs	r0, r0
   81c1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81c1e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81c22:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81c26:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   81c2a:	f43f aedc 	beq.w	819e6 <__adddf3+0xe6>
   81c2e:	f04f 0203 	mov.w	r2, #3
   81c32:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81c36:	bf18      	it	ne
   81c38:	3203      	addne	r2, #3
   81c3a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81c3e:	bf18      	it	ne
   81c40:	3203      	addne	r2, #3
   81c42:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   81c46:	f1c2 0320 	rsb	r3, r2, #32
   81c4a:	fa00 fc03 	lsl.w	ip, r0, r3
   81c4e:	fa20 f002 	lsr.w	r0, r0, r2
   81c52:	fa01 fe03 	lsl.w	lr, r1, r3
   81c56:	ea40 000e 	orr.w	r0, r0, lr
   81c5a:	fa21 f102 	lsr.w	r1, r1, r2
   81c5e:	4414      	add	r4, r2
   81c60:	e6c1      	b.n	819e6 <__adddf3+0xe6>
   81c62:	bf00      	nop

00081c64 <__aeabi_dmul>:
   81c64:	b570      	push	{r4, r5, r6, lr}
   81c66:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81c6a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81c6e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81c72:	bf1d      	ittte	ne
   81c74:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81c78:	ea94 0f0c 	teqne	r4, ip
   81c7c:	ea95 0f0c 	teqne	r5, ip
   81c80:	f000 f8de 	bleq	81e40 <__aeabi_dmul+0x1dc>
   81c84:	442c      	add	r4, r5
   81c86:	ea81 0603 	eor.w	r6, r1, r3
   81c8a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   81c8e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   81c92:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   81c96:	bf18      	it	ne
   81c98:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   81c9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81ca0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   81ca4:	d038      	beq.n	81d18 <__aeabi_dmul+0xb4>
   81ca6:	fba0 ce02 	umull	ip, lr, r0, r2
   81caa:	f04f 0500 	mov.w	r5, #0
   81cae:	fbe1 e502 	umlal	lr, r5, r1, r2
   81cb2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   81cb6:	fbe0 e503 	umlal	lr, r5, r0, r3
   81cba:	f04f 0600 	mov.w	r6, #0
   81cbe:	fbe1 5603 	umlal	r5, r6, r1, r3
   81cc2:	f09c 0f00 	teq	ip, #0
   81cc6:	bf18      	it	ne
   81cc8:	f04e 0e01 	orrne.w	lr, lr, #1
   81ccc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   81cd0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   81cd4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   81cd8:	d204      	bcs.n	81ce4 <__aeabi_dmul+0x80>
   81cda:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   81cde:	416d      	adcs	r5, r5
   81ce0:	eb46 0606 	adc.w	r6, r6, r6
   81ce4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81ce8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   81cec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81cf0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   81cf4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   81cf8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81cfc:	bf88      	it	hi
   81cfe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81d02:	d81e      	bhi.n	81d42 <__aeabi_dmul+0xde>
   81d04:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   81d08:	bf08      	it	eq
   81d0a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   81d0e:	f150 0000 	adcs.w	r0, r0, #0
   81d12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81d16:	bd70      	pop	{r4, r5, r6, pc}
   81d18:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   81d1c:	ea46 0101 	orr.w	r1, r6, r1
   81d20:	ea40 0002 	orr.w	r0, r0, r2
   81d24:	ea81 0103 	eor.w	r1, r1, r3
   81d28:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   81d2c:	bfc2      	ittt	gt
   81d2e:	ebd4 050c 	rsbsgt	r5, r4, ip
   81d32:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81d36:	bd70      	popgt	{r4, r5, r6, pc}
   81d38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81d3c:	f04f 0e00 	mov.w	lr, #0
   81d40:	3c01      	subs	r4, #1
   81d42:	f300 80ab 	bgt.w	81e9c <__aeabi_dmul+0x238>
   81d46:	f114 0f36 	cmn.w	r4, #54	; 0x36
   81d4a:	bfde      	ittt	le
   81d4c:	2000      	movle	r0, #0
   81d4e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   81d52:	bd70      	pople	{r4, r5, r6, pc}
   81d54:	f1c4 0400 	rsb	r4, r4, #0
   81d58:	3c20      	subs	r4, #32
   81d5a:	da35      	bge.n	81dc8 <__aeabi_dmul+0x164>
   81d5c:	340c      	adds	r4, #12
   81d5e:	dc1b      	bgt.n	81d98 <__aeabi_dmul+0x134>
   81d60:	f104 0414 	add.w	r4, r4, #20
   81d64:	f1c4 0520 	rsb	r5, r4, #32
   81d68:	fa00 f305 	lsl.w	r3, r0, r5
   81d6c:	fa20 f004 	lsr.w	r0, r0, r4
   81d70:	fa01 f205 	lsl.w	r2, r1, r5
   81d74:	ea40 0002 	orr.w	r0, r0, r2
   81d78:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   81d7c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81d80:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81d84:	fa21 f604 	lsr.w	r6, r1, r4
   81d88:	eb42 0106 	adc.w	r1, r2, r6
   81d8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81d90:	bf08      	it	eq
   81d92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81d96:	bd70      	pop	{r4, r5, r6, pc}
   81d98:	f1c4 040c 	rsb	r4, r4, #12
   81d9c:	f1c4 0520 	rsb	r5, r4, #32
   81da0:	fa00 f304 	lsl.w	r3, r0, r4
   81da4:	fa20 f005 	lsr.w	r0, r0, r5
   81da8:	fa01 f204 	lsl.w	r2, r1, r4
   81dac:	ea40 0002 	orr.w	r0, r0, r2
   81db0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81db4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81db8:	f141 0100 	adc.w	r1, r1, #0
   81dbc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81dc0:	bf08      	it	eq
   81dc2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81dc6:	bd70      	pop	{r4, r5, r6, pc}
   81dc8:	f1c4 0520 	rsb	r5, r4, #32
   81dcc:	fa00 f205 	lsl.w	r2, r0, r5
   81dd0:	ea4e 0e02 	orr.w	lr, lr, r2
   81dd4:	fa20 f304 	lsr.w	r3, r0, r4
   81dd8:	fa01 f205 	lsl.w	r2, r1, r5
   81ddc:	ea43 0302 	orr.w	r3, r3, r2
   81de0:	fa21 f004 	lsr.w	r0, r1, r4
   81de4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81de8:	fa21 f204 	lsr.w	r2, r1, r4
   81dec:	ea20 0002 	bic.w	r0, r0, r2
   81df0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   81df4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81df8:	bf08      	it	eq
   81dfa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81dfe:	bd70      	pop	{r4, r5, r6, pc}
   81e00:	f094 0f00 	teq	r4, #0
   81e04:	d10f      	bne.n	81e26 <__aeabi_dmul+0x1c2>
   81e06:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   81e0a:	0040      	lsls	r0, r0, #1
   81e0c:	eb41 0101 	adc.w	r1, r1, r1
   81e10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81e14:	bf08      	it	eq
   81e16:	3c01      	subeq	r4, #1
   81e18:	d0f7      	beq.n	81e0a <__aeabi_dmul+0x1a6>
   81e1a:	ea41 0106 	orr.w	r1, r1, r6
   81e1e:	f095 0f00 	teq	r5, #0
   81e22:	bf18      	it	ne
   81e24:	4770      	bxne	lr
   81e26:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   81e2a:	0052      	lsls	r2, r2, #1
   81e2c:	eb43 0303 	adc.w	r3, r3, r3
   81e30:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   81e34:	bf08      	it	eq
   81e36:	3d01      	subeq	r5, #1
   81e38:	d0f7      	beq.n	81e2a <__aeabi_dmul+0x1c6>
   81e3a:	ea43 0306 	orr.w	r3, r3, r6
   81e3e:	4770      	bx	lr
   81e40:	ea94 0f0c 	teq	r4, ip
   81e44:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81e48:	bf18      	it	ne
   81e4a:	ea95 0f0c 	teqne	r5, ip
   81e4e:	d00c      	beq.n	81e6a <__aeabi_dmul+0x206>
   81e50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81e54:	bf18      	it	ne
   81e56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81e5a:	d1d1      	bne.n	81e00 <__aeabi_dmul+0x19c>
   81e5c:	ea81 0103 	eor.w	r1, r1, r3
   81e60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81e64:	f04f 0000 	mov.w	r0, #0
   81e68:	bd70      	pop	{r4, r5, r6, pc}
   81e6a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81e6e:	bf06      	itte	eq
   81e70:	4610      	moveq	r0, r2
   81e72:	4619      	moveq	r1, r3
   81e74:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81e78:	d019      	beq.n	81eae <__aeabi_dmul+0x24a>
   81e7a:	ea94 0f0c 	teq	r4, ip
   81e7e:	d102      	bne.n	81e86 <__aeabi_dmul+0x222>
   81e80:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   81e84:	d113      	bne.n	81eae <__aeabi_dmul+0x24a>
   81e86:	ea95 0f0c 	teq	r5, ip
   81e8a:	d105      	bne.n	81e98 <__aeabi_dmul+0x234>
   81e8c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   81e90:	bf1c      	itt	ne
   81e92:	4610      	movne	r0, r2
   81e94:	4619      	movne	r1, r3
   81e96:	d10a      	bne.n	81eae <__aeabi_dmul+0x24a>
   81e98:	ea81 0103 	eor.w	r1, r1, r3
   81e9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81ea0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81ea4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81ea8:	f04f 0000 	mov.w	r0, #0
   81eac:	bd70      	pop	{r4, r5, r6, pc}
   81eae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81eb2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   81eb6:	bd70      	pop	{r4, r5, r6, pc}

00081eb8 <__aeabi_ddiv>:
   81eb8:	b570      	push	{r4, r5, r6, lr}
   81eba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81ebe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81ec2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81ec6:	bf1d      	ittte	ne
   81ec8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81ecc:	ea94 0f0c 	teqne	r4, ip
   81ed0:	ea95 0f0c 	teqne	r5, ip
   81ed4:	f000 f8a7 	bleq	82026 <__aeabi_ddiv+0x16e>
   81ed8:	eba4 0405 	sub.w	r4, r4, r5
   81edc:	ea81 0e03 	eor.w	lr, r1, r3
   81ee0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81ee4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81ee8:	f000 8088 	beq.w	81ffc <__aeabi_ddiv+0x144>
   81eec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81ef0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   81ef4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   81ef8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   81efc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81f00:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   81f04:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   81f08:	ea4f 2600 	mov.w	r6, r0, lsl #8
   81f0c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   81f10:	429d      	cmp	r5, r3
   81f12:	bf08      	it	eq
   81f14:	4296      	cmpeq	r6, r2
   81f16:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   81f1a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   81f1e:	d202      	bcs.n	81f26 <__aeabi_ddiv+0x6e>
   81f20:	085b      	lsrs	r3, r3, #1
   81f22:	ea4f 0232 	mov.w	r2, r2, rrx
   81f26:	1ab6      	subs	r6, r6, r2
   81f28:	eb65 0503 	sbc.w	r5, r5, r3
   81f2c:	085b      	lsrs	r3, r3, #1
   81f2e:	ea4f 0232 	mov.w	r2, r2, rrx
   81f32:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   81f36:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   81f3a:	ebb6 0e02 	subs.w	lr, r6, r2
   81f3e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81f42:	bf22      	ittt	cs
   81f44:	1ab6      	subcs	r6, r6, r2
   81f46:	4675      	movcs	r5, lr
   81f48:	ea40 000c 	orrcs.w	r0, r0, ip
   81f4c:	085b      	lsrs	r3, r3, #1
   81f4e:	ea4f 0232 	mov.w	r2, r2, rrx
   81f52:	ebb6 0e02 	subs.w	lr, r6, r2
   81f56:	eb75 0e03 	sbcs.w	lr, r5, r3
   81f5a:	bf22      	ittt	cs
   81f5c:	1ab6      	subcs	r6, r6, r2
   81f5e:	4675      	movcs	r5, lr
   81f60:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81f64:	085b      	lsrs	r3, r3, #1
   81f66:	ea4f 0232 	mov.w	r2, r2, rrx
   81f6a:	ebb6 0e02 	subs.w	lr, r6, r2
   81f6e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81f72:	bf22      	ittt	cs
   81f74:	1ab6      	subcs	r6, r6, r2
   81f76:	4675      	movcs	r5, lr
   81f78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81f7c:	085b      	lsrs	r3, r3, #1
   81f7e:	ea4f 0232 	mov.w	r2, r2, rrx
   81f82:	ebb6 0e02 	subs.w	lr, r6, r2
   81f86:	eb75 0e03 	sbcs.w	lr, r5, r3
   81f8a:	bf22      	ittt	cs
   81f8c:	1ab6      	subcs	r6, r6, r2
   81f8e:	4675      	movcs	r5, lr
   81f90:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81f94:	ea55 0e06 	orrs.w	lr, r5, r6
   81f98:	d018      	beq.n	81fcc <__aeabi_ddiv+0x114>
   81f9a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   81f9e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   81fa2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   81fa6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   81faa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   81fae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   81fb2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   81fb6:	d1c0      	bne.n	81f3a <__aeabi_ddiv+0x82>
   81fb8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81fbc:	d10b      	bne.n	81fd6 <__aeabi_ddiv+0x11e>
   81fbe:	ea41 0100 	orr.w	r1, r1, r0
   81fc2:	f04f 0000 	mov.w	r0, #0
   81fc6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   81fca:	e7b6      	b.n	81f3a <__aeabi_ddiv+0x82>
   81fcc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81fd0:	bf04      	itt	eq
   81fd2:	4301      	orreq	r1, r0
   81fd4:	2000      	moveq	r0, #0
   81fd6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81fda:	bf88      	it	hi
   81fdc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81fe0:	f63f aeaf 	bhi.w	81d42 <__aeabi_dmul+0xde>
   81fe4:	ebb5 0c03 	subs.w	ip, r5, r3
   81fe8:	bf04      	itt	eq
   81fea:	ebb6 0c02 	subseq.w	ip, r6, r2
   81fee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81ff2:	f150 0000 	adcs.w	r0, r0, #0
   81ff6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81ffa:	bd70      	pop	{r4, r5, r6, pc}
   81ffc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   82000:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   82004:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   82008:	bfc2      	ittt	gt
   8200a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8200e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   82012:	bd70      	popgt	{r4, r5, r6, pc}
   82014:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82018:	f04f 0e00 	mov.w	lr, #0
   8201c:	3c01      	subs	r4, #1
   8201e:	e690      	b.n	81d42 <__aeabi_dmul+0xde>
   82020:	ea45 0e06 	orr.w	lr, r5, r6
   82024:	e68d      	b.n	81d42 <__aeabi_dmul+0xde>
   82026:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8202a:	ea94 0f0c 	teq	r4, ip
   8202e:	bf08      	it	eq
   82030:	ea95 0f0c 	teqeq	r5, ip
   82034:	f43f af3b 	beq.w	81eae <__aeabi_dmul+0x24a>
   82038:	ea94 0f0c 	teq	r4, ip
   8203c:	d10a      	bne.n	82054 <__aeabi_ddiv+0x19c>
   8203e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   82042:	f47f af34 	bne.w	81eae <__aeabi_dmul+0x24a>
   82046:	ea95 0f0c 	teq	r5, ip
   8204a:	f47f af25 	bne.w	81e98 <__aeabi_dmul+0x234>
   8204e:	4610      	mov	r0, r2
   82050:	4619      	mov	r1, r3
   82052:	e72c      	b.n	81eae <__aeabi_dmul+0x24a>
   82054:	ea95 0f0c 	teq	r5, ip
   82058:	d106      	bne.n	82068 <__aeabi_ddiv+0x1b0>
   8205a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8205e:	f43f aefd 	beq.w	81e5c <__aeabi_dmul+0x1f8>
   82062:	4610      	mov	r0, r2
   82064:	4619      	mov	r1, r3
   82066:	e722      	b.n	81eae <__aeabi_dmul+0x24a>
   82068:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8206c:	bf18      	it	ne
   8206e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   82072:	f47f aec5 	bne.w	81e00 <__aeabi_dmul+0x19c>
   82076:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8207a:	f47f af0d 	bne.w	81e98 <__aeabi_dmul+0x234>
   8207e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   82082:	f47f aeeb 	bne.w	81e5c <__aeabi_dmul+0x1f8>
   82086:	e712      	b.n	81eae <__aeabi_dmul+0x24a>

00082088 <__gedf2>:
   82088:	f04f 3cff 	mov.w	ip, #4294967295
   8208c:	e006      	b.n	8209c <__cmpdf2+0x4>
   8208e:	bf00      	nop

00082090 <__ledf2>:
   82090:	f04f 0c01 	mov.w	ip, #1
   82094:	e002      	b.n	8209c <__cmpdf2+0x4>
   82096:	bf00      	nop

00082098 <__cmpdf2>:
   82098:	f04f 0c01 	mov.w	ip, #1
   8209c:	f84d cd04 	str.w	ip, [sp, #-4]!
   820a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   820a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   820a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   820ac:	bf18      	it	ne
   820ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   820b2:	d01b      	beq.n	820ec <__cmpdf2+0x54>
   820b4:	b001      	add	sp, #4
   820b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   820ba:	bf0c      	ite	eq
   820bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   820c0:	ea91 0f03 	teqne	r1, r3
   820c4:	bf02      	ittt	eq
   820c6:	ea90 0f02 	teqeq	r0, r2
   820ca:	2000      	moveq	r0, #0
   820cc:	4770      	bxeq	lr
   820ce:	f110 0f00 	cmn.w	r0, #0
   820d2:	ea91 0f03 	teq	r1, r3
   820d6:	bf58      	it	pl
   820d8:	4299      	cmppl	r1, r3
   820da:	bf08      	it	eq
   820dc:	4290      	cmpeq	r0, r2
   820de:	bf2c      	ite	cs
   820e0:	17d8      	asrcs	r0, r3, #31
   820e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   820e6:	f040 0001 	orr.w	r0, r0, #1
   820ea:	4770      	bx	lr
   820ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   820f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   820f4:	d102      	bne.n	820fc <__cmpdf2+0x64>
   820f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   820fa:	d107      	bne.n	8210c <__cmpdf2+0x74>
   820fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   82100:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   82104:	d1d6      	bne.n	820b4 <__cmpdf2+0x1c>
   82106:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8210a:	d0d3      	beq.n	820b4 <__cmpdf2+0x1c>
   8210c:	f85d 0b04 	ldr.w	r0, [sp], #4
   82110:	4770      	bx	lr
   82112:	bf00      	nop

00082114 <__aeabi_cdrcmple>:
   82114:	4684      	mov	ip, r0
   82116:	4610      	mov	r0, r2
   82118:	4662      	mov	r2, ip
   8211a:	468c      	mov	ip, r1
   8211c:	4619      	mov	r1, r3
   8211e:	4663      	mov	r3, ip
   82120:	e000      	b.n	82124 <__aeabi_cdcmpeq>
   82122:	bf00      	nop

00082124 <__aeabi_cdcmpeq>:
   82124:	b501      	push	{r0, lr}
   82126:	f7ff ffb7 	bl	82098 <__cmpdf2>
   8212a:	2800      	cmp	r0, #0
   8212c:	bf48      	it	mi
   8212e:	f110 0f00 	cmnmi.w	r0, #0
   82132:	bd01      	pop	{r0, pc}

00082134 <__aeabi_dcmpeq>:
   82134:	f84d ed08 	str.w	lr, [sp, #-8]!
   82138:	f7ff fff4 	bl	82124 <__aeabi_cdcmpeq>
   8213c:	bf0c      	ite	eq
   8213e:	2001      	moveq	r0, #1
   82140:	2000      	movne	r0, #0
   82142:	f85d fb08 	ldr.w	pc, [sp], #8
   82146:	bf00      	nop

00082148 <__aeabi_dcmplt>:
   82148:	f84d ed08 	str.w	lr, [sp, #-8]!
   8214c:	f7ff ffea 	bl	82124 <__aeabi_cdcmpeq>
   82150:	bf34      	ite	cc
   82152:	2001      	movcc	r0, #1
   82154:	2000      	movcs	r0, #0
   82156:	f85d fb08 	ldr.w	pc, [sp], #8
   8215a:	bf00      	nop

0008215c <__aeabi_dcmple>:
   8215c:	f84d ed08 	str.w	lr, [sp, #-8]!
   82160:	f7ff ffe0 	bl	82124 <__aeabi_cdcmpeq>
   82164:	bf94      	ite	ls
   82166:	2001      	movls	r0, #1
   82168:	2000      	movhi	r0, #0
   8216a:	f85d fb08 	ldr.w	pc, [sp], #8
   8216e:	bf00      	nop

00082170 <__aeabi_dcmpge>:
   82170:	f84d ed08 	str.w	lr, [sp, #-8]!
   82174:	f7ff ffce 	bl	82114 <__aeabi_cdrcmple>
   82178:	bf94      	ite	ls
   8217a:	2001      	movls	r0, #1
   8217c:	2000      	movhi	r0, #0
   8217e:	f85d fb08 	ldr.w	pc, [sp], #8
   82182:	bf00      	nop

00082184 <__aeabi_dcmpgt>:
   82184:	f84d ed08 	str.w	lr, [sp, #-8]!
   82188:	f7ff ffc4 	bl	82114 <__aeabi_cdrcmple>
   8218c:	bf34      	ite	cc
   8218e:	2001      	movcc	r0, #1
   82190:	2000      	movcs	r0, #0
   82192:	f85d fb08 	ldr.w	pc, [sp], #8
   82196:	bf00      	nop

00082198 <__aeabi_dcmpun>:
   82198:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8219c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   821a0:	d102      	bne.n	821a8 <__aeabi_dcmpun+0x10>
   821a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   821a6:	d10a      	bne.n	821be <__aeabi_dcmpun+0x26>
   821a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   821ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   821b0:	d102      	bne.n	821b8 <__aeabi_dcmpun+0x20>
   821b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   821b6:	d102      	bne.n	821be <__aeabi_dcmpun+0x26>
   821b8:	f04f 0000 	mov.w	r0, #0
   821bc:	4770      	bx	lr
   821be:	f04f 0001 	mov.w	r0, #1
   821c2:	4770      	bx	lr

000821c4 <__aeabi_d2uiz>:
   821c4:	004a      	lsls	r2, r1, #1
   821c6:	d211      	bcs.n	821ec <__aeabi_d2uiz+0x28>
   821c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   821cc:	d211      	bcs.n	821f2 <__aeabi_d2uiz+0x2e>
   821ce:	d50d      	bpl.n	821ec <__aeabi_d2uiz+0x28>
   821d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   821d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   821d8:	d40e      	bmi.n	821f8 <__aeabi_d2uiz+0x34>
   821da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   821de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   821e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   821e6:	fa23 f002 	lsr.w	r0, r3, r2
   821ea:	4770      	bx	lr
   821ec:	f04f 0000 	mov.w	r0, #0
   821f0:	4770      	bx	lr
   821f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   821f6:	d102      	bne.n	821fe <__aeabi_d2uiz+0x3a>
   821f8:	f04f 30ff 	mov.w	r0, #4294967295
   821fc:	4770      	bx	lr
   821fe:	f04f 0000 	mov.w	r0, #0
   82202:	4770      	bx	lr

00082204 <__aeabi_frsub>:
   82204:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   82208:	e002      	b.n	82210 <__addsf3>
   8220a:	bf00      	nop

0008220c <__aeabi_fsub>:
   8220c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00082210 <__addsf3>:
   82210:	0042      	lsls	r2, r0, #1
   82212:	bf1f      	itttt	ne
   82214:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   82218:	ea92 0f03 	teqne	r2, r3
   8221c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   82220:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   82224:	d06a      	beq.n	822fc <__addsf3+0xec>
   82226:	ea4f 6212 	mov.w	r2, r2, lsr #24
   8222a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   8222e:	bfc1      	itttt	gt
   82230:	18d2      	addgt	r2, r2, r3
   82232:	4041      	eorgt	r1, r0
   82234:	4048      	eorgt	r0, r1
   82236:	4041      	eorgt	r1, r0
   82238:	bfb8      	it	lt
   8223a:	425b      	neglt	r3, r3
   8223c:	2b19      	cmp	r3, #25
   8223e:	bf88      	it	hi
   82240:	4770      	bxhi	lr
   82242:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   82246:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8224a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   8224e:	bf18      	it	ne
   82250:	4240      	negne	r0, r0
   82252:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   82256:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   8225a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   8225e:	bf18      	it	ne
   82260:	4249      	negne	r1, r1
   82262:	ea92 0f03 	teq	r2, r3
   82266:	d03f      	beq.n	822e8 <__addsf3+0xd8>
   82268:	f1a2 0201 	sub.w	r2, r2, #1
   8226c:	fa41 fc03 	asr.w	ip, r1, r3
   82270:	eb10 000c 	adds.w	r0, r0, ip
   82274:	f1c3 0320 	rsb	r3, r3, #32
   82278:	fa01 f103 	lsl.w	r1, r1, r3
   8227c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   82280:	d502      	bpl.n	82288 <__addsf3+0x78>
   82282:	4249      	negs	r1, r1
   82284:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   82288:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   8228c:	d313      	bcc.n	822b6 <__addsf3+0xa6>
   8228e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   82292:	d306      	bcc.n	822a2 <__addsf3+0x92>
   82294:	0840      	lsrs	r0, r0, #1
   82296:	ea4f 0131 	mov.w	r1, r1, rrx
   8229a:	f102 0201 	add.w	r2, r2, #1
   8229e:	2afe      	cmp	r2, #254	; 0xfe
   822a0:	d251      	bcs.n	82346 <__addsf3+0x136>
   822a2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   822a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   822aa:	bf08      	it	eq
   822ac:	f020 0001 	biceq.w	r0, r0, #1
   822b0:	ea40 0003 	orr.w	r0, r0, r3
   822b4:	4770      	bx	lr
   822b6:	0049      	lsls	r1, r1, #1
   822b8:	eb40 0000 	adc.w	r0, r0, r0
   822bc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   822c0:	f1a2 0201 	sub.w	r2, r2, #1
   822c4:	d1ed      	bne.n	822a2 <__addsf3+0x92>
   822c6:	fab0 fc80 	clz	ip, r0
   822ca:	f1ac 0c08 	sub.w	ip, ip, #8
   822ce:	ebb2 020c 	subs.w	r2, r2, ip
   822d2:	fa00 f00c 	lsl.w	r0, r0, ip
   822d6:	bfaa      	itet	ge
   822d8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   822dc:	4252      	neglt	r2, r2
   822de:	4318      	orrge	r0, r3
   822e0:	bfbc      	itt	lt
   822e2:	40d0      	lsrlt	r0, r2
   822e4:	4318      	orrlt	r0, r3
   822e6:	4770      	bx	lr
   822e8:	f092 0f00 	teq	r2, #0
   822ec:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   822f0:	bf06      	itte	eq
   822f2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   822f6:	3201      	addeq	r2, #1
   822f8:	3b01      	subne	r3, #1
   822fa:	e7b5      	b.n	82268 <__addsf3+0x58>
   822fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   82300:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   82304:	bf18      	it	ne
   82306:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8230a:	d021      	beq.n	82350 <__addsf3+0x140>
   8230c:	ea92 0f03 	teq	r2, r3
   82310:	d004      	beq.n	8231c <__addsf3+0x10c>
   82312:	f092 0f00 	teq	r2, #0
   82316:	bf08      	it	eq
   82318:	4608      	moveq	r0, r1
   8231a:	4770      	bx	lr
   8231c:	ea90 0f01 	teq	r0, r1
   82320:	bf1c      	itt	ne
   82322:	2000      	movne	r0, #0
   82324:	4770      	bxne	lr
   82326:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   8232a:	d104      	bne.n	82336 <__addsf3+0x126>
   8232c:	0040      	lsls	r0, r0, #1
   8232e:	bf28      	it	cs
   82330:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   82334:	4770      	bx	lr
   82336:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   8233a:	bf3c      	itt	cc
   8233c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   82340:	4770      	bxcc	lr
   82342:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   82346:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   8234a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8234e:	4770      	bx	lr
   82350:	ea7f 6222 	mvns.w	r2, r2, asr #24
   82354:	bf16      	itet	ne
   82356:	4608      	movne	r0, r1
   82358:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   8235c:	4601      	movne	r1, r0
   8235e:	0242      	lsls	r2, r0, #9
   82360:	bf06      	itte	eq
   82362:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   82366:	ea90 0f01 	teqeq	r0, r1
   8236a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   8236e:	4770      	bx	lr

00082370 <__aeabi_ui2f>:
   82370:	f04f 0300 	mov.w	r3, #0
   82374:	e004      	b.n	82380 <__aeabi_i2f+0x8>
   82376:	bf00      	nop

00082378 <__aeabi_i2f>:
   82378:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   8237c:	bf48      	it	mi
   8237e:	4240      	negmi	r0, r0
   82380:	ea5f 0c00 	movs.w	ip, r0
   82384:	bf08      	it	eq
   82386:	4770      	bxeq	lr
   82388:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   8238c:	4601      	mov	r1, r0
   8238e:	f04f 0000 	mov.w	r0, #0
   82392:	e01c      	b.n	823ce <__aeabi_l2f+0x2a>

00082394 <__aeabi_ul2f>:
   82394:	ea50 0201 	orrs.w	r2, r0, r1
   82398:	bf08      	it	eq
   8239a:	4770      	bxeq	lr
   8239c:	f04f 0300 	mov.w	r3, #0
   823a0:	e00a      	b.n	823b8 <__aeabi_l2f+0x14>
   823a2:	bf00      	nop

000823a4 <__aeabi_l2f>:
   823a4:	ea50 0201 	orrs.w	r2, r0, r1
   823a8:	bf08      	it	eq
   823aa:	4770      	bxeq	lr
   823ac:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   823b0:	d502      	bpl.n	823b8 <__aeabi_l2f+0x14>
   823b2:	4240      	negs	r0, r0
   823b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   823b8:	ea5f 0c01 	movs.w	ip, r1
   823bc:	bf02      	ittt	eq
   823be:	4684      	moveq	ip, r0
   823c0:	4601      	moveq	r1, r0
   823c2:	2000      	moveq	r0, #0
   823c4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   823c8:	bf08      	it	eq
   823ca:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   823ce:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   823d2:	fabc f28c 	clz	r2, ip
   823d6:	3a08      	subs	r2, #8
   823d8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   823dc:	db10      	blt.n	82400 <__aeabi_l2f+0x5c>
   823de:	fa01 fc02 	lsl.w	ip, r1, r2
   823e2:	4463      	add	r3, ip
   823e4:	fa00 fc02 	lsl.w	ip, r0, r2
   823e8:	f1c2 0220 	rsb	r2, r2, #32
   823ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   823f0:	fa20 f202 	lsr.w	r2, r0, r2
   823f4:	eb43 0002 	adc.w	r0, r3, r2
   823f8:	bf08      	it	eq
   823fa:	f020 0001 	biceq.w	r0, r0, #1
   823fe:	4770      	bx	lr
   82400:	f102 0220 	add.w	r2, r2, #32
   82404:	fa01 fc02 	lsl.w	ip, r1, r2
   82408:	f1c2 0220 	rsb	r2, r2, #32
   8240c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   82410:	fa21 f202 	lsr.w	r2, r1, r2
   82414:	eb43 0002 	adc.w	r0, r3, r2
   82418:	bf08      	it	eq
   8241a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   8241e:	4770      	bx	lr

00082420 <__aeabi_fmul>:
   82420:	f04f 0cff 	mov.w	ip, #255	; 0xff
   82424:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   82428:	bf1e      	ittt	ne
   8242a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   8242e:	ea92 0f0c 	teqne	r2, ip
   82432:	ea93 0f0c 	teqne	r3, ip
   82436:	d06f      	beq.n	82518 <__aeabi_fmul+0xf8>
   82438:	441a      	add	r2, r3
   8243a:	ea80 0c01 	eor.w	ip, r0, r1
   8243e:	0240      	lsls	r0, r0, #9
   82440:	bf18      	it	ne
   82442:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   82446:	d01e      	beq.n	82486 <__aeabi_fmul+0x66>
   82448:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   8244c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   82450:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   82454:	fba0 3101 	umull	r3, r1, r0, r1
   82458:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   8245c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   82460:	bf3e      	ittt	cc
   82462:	0049      	lslcc	r1, r1, #1
   82464:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   82468:	005b      	lslcc	r3, r3, #1
   8246a:	ea40 0001 	orr.w	r0, r0, r1
   8246e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   82472:	2afd      	cmp	r2, #253	; 0xfd
   82474:	d81d      	bhi.n	824b2 <__aeabi_fmul+0x92>
   82476:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   8247a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8247e:	bf08      	it	eq
   82480:	f020 0001 	biceq.w	r0, r0, #1
   82484:	4770      	bx	lr
   82486:	f090 0f00 	teq	r0, #0
   8248a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   8248e:	bf08      	it	eq
   82490:	0249      	lsleq	r1, r1, #9
   82492:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   82496:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   8249a:	3a7f      	subs	r2, #127	; 0x7f
   8249c:	bfc2      	ittt	gt
   8249e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   824a2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   824a6:	4770      	bxgt	lr
   824a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   824ac:	f04f 0300 	mov.w	r3, #0
   824b0:	3a01      	subs	r2, #1
   824b2:	dc5d      	bgt.n	82570 <__aeabi_fmul+0x150>
   824b4:	f112 0f19 	cmn.w	r2, #25
   824b8:	bfdc      	itt	le
   824ba:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   824be:	4770      	bxle	lr
   824c0:	f1c2 0200 	rsb	r2, r2, #0
   824c4:	0041      	lsls	r1, r0, #1
   824c6:	fa21 f102 	lsr.w	r1, r1, r2
   824ca:	f1c2 0220 	rsb	r2, r2, #32
   824ce:	fa00 fc02 	lsl.w	ip, r0, r2
   824d2:	ea5f 0031 	movs.w	r0, r1, rrx
   824d6:	f140 0000 	adc.w	r0, r0, #0
   824da:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   824de:	bf08      	it	eq
   824e0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   824e4:	4770      	bx	lr
   824e6:	f092 0f00 	teq	r2, #0
   824ea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   824ee:	bf02      	ittt	eq
   824f0:	0040      	lsleq	r0, r0, #1
   824f2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   824f6:	3a01      	subeq	r2, #1
   824f8:	d0f9      	beq.n	824ee <__aeabi_fmul+0xce>
   824fa:	ea40 000c 	orr.w	r0, r0, ip
   824fe:	f093 0f00 	teq	r3, #0
   82502:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   82506:	bf02      	ittt	eq
   82508:	0049      	lsleq	r1, r1, #1
   8250a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   8250e:	3b01      	subeq	r3, #1
   82510:	d0f9      	beq.n	82506 <__aeabi_fmul+0xe6>
   82512:	ea41 010c 	orr.w	r1, r1, ip
   82516:	e78f      	b.n	82438 <__aeabi_fmul+0x18>
   82518:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   8251c:	ea92 0f0c 	teq	r2, ip
   82520:	bf18      	it	ne
   82522:	ea93 0f0c 	teqne	r3, ip
   82526:	d00a      	beq.n	8253e <__aeabi_fmul+0x11e>
   82528:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   8252c:	bf18      	it	ne
   8252e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   82532:	d1d8      	bne.n	824e6 <__aeabi_fmul+0xc6>
   82534:	ea80 0001 	eor.w	r0, r0, r1
   82538:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   8253c:	4770      	bx	lr
   8253e:	f090 0f00 	teq	r0, #0
   82542:	bf17      	itett	ne
   82544:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   82548:	4608      	moveq	r0, r1
   8254a:	f091 0f00 	teqne	r1, #0
   8254e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   82552:	d014      	beq.n	8257e <__aeabi_fmul+0x15e>
   82554:	ea92 0f0c 	teq	r2, ip
   82558:	d101      	bne.n	8255e <__aeabi_fmul+0x13e>
   8255a:	0242      	lsls	r2, r0, #9
   8255c:	d10f      	bne.n	8257e <__aeabi_fmul+0x15e>
   8255e:	ea93 0f0c 	teq	r3, ip
   82562:	d103      	bne.n	8256c <__aeabi_fmul+0x14c>
   82564:	024b      	lsls	r3, r1, #9
   82566:	bf18      	it	ne
   82568:	4608      	movne	r0, r1
   8256a:	d108      	bne.n	8257e <__aeabi_fmul+0x15e>
   8256c:	ea80 0001 	eor.w	r0, r0, r1
   82570:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   82574:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   82578:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8257c:	4770      	bx	lr
   8257e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   82582:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   82586:	4770      	bx	lr

00082588 <__aeabi_fdiv>:
   82588:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8258c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   82590:	bf1e      	ittt	ne
   82592:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   82596:	ea92 0f0c 	teqne	r2, ip
   8259a:	ea93 0f0c 	teqne	r3, ip
   8259e:	d069      	beq.n	82674 <__aeabi_fdiv+0xec>
   825a0:	eba2 0203 	sub.w	r2, r2, r3
   825a4:	ea80 0c01 	eor.w	ip, r0, r1
   825a8:	0249      	lsls	r1, r1, #9
   825aa:	ea4f 2040 	mov.w	r0, r0, lsl #9
   825ae:	d037      	beq.n	82620 <__aeabi_fdiv+0x98>
   825b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   825b4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   825b8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   825bc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   825c0:	428b      	cmp	r3, r1
   825c2:	bf38      	it	cc
   825c4:	005b      	lslcc	r3, r3, #1
   825c6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   825ca:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   825ce:	428b      	cmp	r3, r1
   825d0:	bf24      	itt	cs
   825d2:	1a5b      	subcs	r3, r3, r1
   825d4:	ea40 000c 	orrcs.w	r0, r0, ip
   825d8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   825dc:	bf24      	itt	cs
   825de:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   825e2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   825e6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   825ea:	bf24      	itt	cs
   825ec:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   825f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   825f4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   825f8:	bf24      	itt	cs
   825fa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   825fe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   82602:	011b      	lsls	r3, r3, #4
   82604:	bf18      	it	ne
   82606:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   8260a:	d1e0      	bne.n	825ce <__aeabi_fdiv+0x46>
   8260c:	2afd      	cmp	r2, #253	; 0xfd
   8260e:	f63f af50 	bhi.w	824b2 <__aeabi_fmul+0x92>
   82612:	428b      	cmp	r3, r1
   82614:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   82618:	bf08      	it	eq
   8261a:	f020 0001 	biceq.w	r0, r0, #1
   8261e:	4770      	bx	lr
   82620:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   82624:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   82628:	327f      	adds	r2, #127	; 0x7f
   8262a:	bfc2      	ittt	gt
   8262c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   82630:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   82634:	4770      	bxgt	lr
   82636:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8263a:	f04f 0300 	mov.w	r3, #0
   8263e:	3a01      	subs	r2, #1
   82640:	e737      	b.n	824b2 <__aeabi_fmul+0x92>
   82642:	f092 0f00 	teq	r2, #0
   82646:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   8264a:	bf02      	ittt	eq
   8264c:	0040      	lsleq	r0, r0, #1
   8264e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   82652:	3a01      	subeq	r2, #1
   82654:	d0f9      	beq.n	8264a <__aeabi_fdiv+0xc2>
   82656:	ea40 000c 	orr.w	r0, r0, ip
   8265a:	f093 0f00 	teq	r3, #0
   8265e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   82662:	bf02      	ittt	eq
   82664:	0049      	lsleq	r1, r1, #1
   82666:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   8266a:	3b01      	subeq	r3, #1
   8266c:	d0f9      	beq.n	82662 <__aeabi_fdiv+0xda>
   8266e:	ea41 010c 	orr.w	r1, r1, ip
   82672:	e795      	b.n	825a0 <__aeabi_fdiv+0x18>
   82674:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   82678:	ea92 0f0c 	teq	r2, ip
   8267c:	d108      	bne.n	82690 <__aeabi_fdiv+0x108>
   8267e:	0242      	lsls	r2, r0, #9
   82680:	f47f af7d 	bne.w	8257e <__aeabi_fmul+0x15e>
   82684:	ea93 0f0c 	teq	r3, ip
   82688:	f47f af70 	bne.w	8256c <__aeabi_fmul+0x14c>
   8268c:	4608      	mov	r0, r1
   8268e:	e776      	b.n	8257e <__aeabi_fmul+0x15e>
   82690:	ea93 0f0c 	teq	r3, ip
   82694:	d104      	bne.n	826a0 <__aeabi_fdiv+0x118>
   82696:	024b      	lsls	r3, r1, #9
   82698:	f43f af4c 	beq.w	82534 <__aeabi_fmul+0x114>
   8269c:	4608      	mov	r0, r1
   8269e:	e76e      	b.n	8257e <__aeabi_fmul+0x15e>
   826a0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   826a4:	bf18      	it	ne
   826a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   826aa:	d1ca      	bne.n	82642 <__aeabi_fdiv+0xba>
   826ac:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   826b0:	f47f af5c 	bne.w	8256c <__aeabi_fmul+0x14c>
   826b4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   826b8:	f47f af3c 	bne.w	82534 <__aeabi_fmul+0x114>
   826bc:	e75f      	b.n	8257e <__aeabi_fmul+0x15e>
   826be:	bf00      	nop

000826c0 <__aeabi_f2uiz>:
   826c0:	0042      	lsls	r2, r0, #1
   826c2:	d20e      	bcs.n	826e2 <__aeabi_f2uiz+0x22>
   826c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   826c8:	d30b      	bcc.n	826e2 <__aeabi_f2uiz+0x22>
   826ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
   826ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   826d2:	d409      	bmi.n	826e8 <__aeabi_f2uiz+0x28>
   826d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
   826d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   826dc:	fa23 f002 	lsr.w	r0, r3, r2
   826e0:	4770      	bx	lr
   826e2:	f04f 0000 	mov.w	r0, #0
   826e6:	4770      	bx	lr
   826e8:	f112 0f61 	cmn.w	r2, #97	; 0x61
   826ec:	d101      	bne.n	826f2 <__aeabi_f2uiz+0x32>
   826ee:	0242      	lsls	r2, r0, #9
   826f0:	d102      	bne.n	826f8 <__aeabi_f2uiz+0x38>
   826f2:	f04f 30ff 	mov.w	r0, #4294967295
   826f6:	4770      	bx	lr
   826f8:	f04f 0000 	mov.w	r0, #0
   826fc:	4770      	bx	lr
   826fe:	bf00      	nop

00082700 <__errno>:
   82700:	4b01      	ldr	r3, [pc, #4]	; (82708 <__errno+0x8>)
   82702:	6818      	ldr	r0, [r3, #0]
   82704:	4770      	bx	lr
   82706:	bf00      	nop
   82708:	20070160 	.word	0x20070160

0008270c <__libc_init_array>:
   8270c:	b570      	push	{r4, r5, r6, lr}
   8270e:	4e0f      	ldr	r6, [pc, #60]	; (8274c <__libc_init_array+0x40>)
   82710:	4d0f      	ldr	r5, [pc, #60]	; (82750 <__libc_init_array+0x44>)
   82712:	1b76      	subs	r6, r6, r5
   82714:	10b6      	asrs	r6, r6, #2
   82716:	bf18      	it	ne
   82718:	2400      	movne	r4, #0
   8271a:	d005      	beq.n	82728 <__libc_init_array+0x1c>
   8271c:	3401      	adds	r4, #1
   8271e:	f855 3b04 	ldr.w	r3, [r5], #4
   82722:	4798      	blx	r3
   82724:	42a6      	cmp	r6, r4
   82726:	d1f9      	bne.n	8271c <__libc_init_array+0x10>
   82728:	4e0a      	ldr	r6, [pc, #40]	; (82754 <__libc_init_array+0x48>)
   8272a:	4d0b      	ldr	r5, [pc, #44]	; (82758 <__libc_init_array+0x4c>)
   8272c:	f003 f85c 	bl	857e8 <_init>
   82730:	1b76      	subs	r6, r6, r5
   82732:	10b6      	asrs	r6, r6, #2
   82734:	bf18      	it	ne
   82736:	2400      	movne	r4, #0
   82738:	d006      	beq.n	82748 <__libc_init_array+0x3c>
   8273a:	3401      	adds	r4, #1
   8273c:	f855 3b04 	ldr.w	r3, [r5], #4
   82740:	4798      	blx	r3
   82742:	42a6      	cmp	r6, r4
   82744:	d1f9      	bne.n	8273a <__libc_init_array+0x2e>
   82746:	bd70      	pop	{r4, r5, r6, pc}
   82748:	bd70      	pop	{r4, r5, r6, pc}
   8274a:	bf00      	nop
   8274c:	000857f4 	.word	0x000857f4
   82750:	000857f4 	.word	0x000857f4
   82754:	000857fc 	.word	0x000857fc
   82758:	000857f4 	.word	0x000857f4

0008275c <iprintf>:
   8275c:	b40f      	push	{r0, r1, r2, r3}
   8275e:	b510      	push	{r4, lr}
   82760:	4b07      	ldr	r3, [pc, #28]	; (82780 <iprintf+0x24>)
   82762:	b082      	sub	sp, #8
   82764:	ac04      	add	r4, sp, #16
   82766:	f854 2b04 	ldr.w	r2, [r4], #4
   8276a:	6818      	ldr	r0, [r3, #0]
   8276c:	4623      	mov	r3, r4
   8276e:	6881      	ldr	r1, [r0, #8]
   82770:	9401      	str	r4, [sp, #4]
   82772:	f000 f993 	bl	82a9c <_vfiprintf_r>
   82776:	b002      	add	sp, #8
   82778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8277c:	b004      	add	sp, #16
   8277e:	4770      	bx	lr
   82780:	20070160 	.word	0x20070160

00082784 <memset>:
   82784:	b470      	push	{r4, r5, r6}
   82786:	0786      	lsls	r6, r0, #30
   82788:	d046      	beq.n	82818 <memset+0x94>
   8278a:	1e54      	subs	r4, r2, #1
   8278c:	2a00      	cmp	r2, #0
   8278e:	d041      	beq.n	82814 <memset+0x90>
   82790:	b2ca      	uxtb	r2, r1
   82792:	4603      	mov	r3, r0
   82794:	e002      	b.n	8279c <memset+0x18>
   82796:	f114 34ff 	adds.w	r4, r4, #4294967295
   8279a:	d33b      	bcc.n	82814 <memset+0x90>
   8279c:	f803 2b01 	strb.w	r2, [r3], #1
   827a0:	079d      	lsls	r5, r3, #30
   827a2:	d1f8      	bne.n	82796 <memset+0x12>
   827a4:	2c03      	cmp	r4, #3
   827a6:	d92e      	bls.n	82806 <memset+0x82>
   827a8:	b2cd      	uxtb	r5, r1
   827aa:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   827ae:	2c0f      	cmp	r4, #15
   827b0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   827b4:	d919      	bls.n	827ea <memset+0x66>
   827b6:	4626      	mov	r6, r4
   827b8:	f103 0210 	add.w	r2, r3, #16
   827bc:	3e10      	subs	r6, #16
   827be:	2e0f      	cmp	r6, #15
   827c0:	f842 5c10 	str.w	r5, [r2, #-16]
   827c4:	f842 5c0c 	str.w	r5, [r2, #-12]
   827c8:	f842 5c08 	str.w	r5, [r2, #-8]
   827cc:	f842 5c04 	str.w	r5, [r2, #-4]
   827d0:	f102 0210 	add.w	r2, r2, #16
   827d4:	d8f2      	bhi.n	827bc <memset+0x38>
   827d6:	f1a4 0210 	sub.w	r2, r4, #16
   827da:	f022 020f 	bic.w	r2, r2, #15
   827de:	f004 040f 	and.w	r4, r4, #15
   827e2:	3210      	adds	r2, #16
   827e4:	2c03      	cmp	r4, #3
   827e6:	4413      	add	r3, r2
   827e8:	d90d      	bls.n	82806 <memset+0x82>
   827ea:	461e      	mov	r6, r3
   827ec:	4622      	mov	r2, r4
   827ee:	3a04      	subs	r2, #4
   827f0:	2a03      	cmp	r2, #3
   827f2:	f846 5b04 	str.w	r5, [r6], #4
   827f6:	d8fa      	bhi.n	827ee <memset+0x6a>
   827f8:	1f22      	subs	r2, r4, #4
   827fa:	f022 0203 	bic.w	r2, r2, #3
   827fe:	3204      	adds	r2, #4
   82800:	4413      	add	r3, r2
   82802:	f004 0403 	and.w	r4, r4, #3
   82806:	b12c      	cbz	r4, 82814 <memset+0x90>
   82808:	b2c9      	uxtb	r1, r1
   8280a:	441c      	add	r4, r3
   8280c:	f803 1b01 	strb.w	r1, [r3], #1
   82810:	429c      	cmp	r4, r3
   82812:	d1fb      	bne.n	8280c <memset+0x88>
   82814:	bc70      	pop	{r4, r5, r6}
   82816:	4770      	bx	lr
   82818:	4614      	mov	r4, r2
   8281a:	4603      	mov	r3, r0
   8281c:	e7c2      	b.n	827a4 <memset+0x20>
   8281e:	bf00      	nop

00082820 <setbuf>:
   82820:	2900      	cmp	r1, #0
   82822:	bf0c      	ite	eq
   82824:	2202      	moveq	r2, #2
   82826:	2200      	movne	r2, #0
   82828:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8282c:	f000 b800 	b.w	82830 <setvbuf>

00082830 <setvbuf>:
   82830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82834:	4d61      	ldr	r5, [pc, #388]	; (829bc <setvbuf+0x18c>)
   82836:	b083      	sub	sp, #12
   82838:	682d      	ldr	r5, [r5, #0]
   8283a:	4604      	mov	r4, r0
   8283c:	460f      	mov	r7, r1
   8283e:	4690      	mov	r8, r2
   82840:	461e      	mov	r6, r3
   82842:	b115      	cbz	r5, 8284a <setvbuf+0x1a>
   82844:	6bab      	ldr	r3, [r5, #56]	; 0x38
   82846:	2b00      	cmp	r3, #0
   82848:	d064      	beq.n	82914 <setvbuf+0xe4>
   8284a:	f1b8 0f02 	cmp.w	r8, #2
   8284e:	d006      	beq.n	8285e <setvbuf+0x2e>
   82850:	f1b8 0f01 	cmp.w	r8, #1
   82854:	f200 809f 	bhi.w	82996 <setvbuf+0x166>
   82858:	2e00      	cmp	r6, #0
   8285a:	f2c0 809c 	blt.w	82996 <setvbuf+0x166>
   8285e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82860:	07d8      	lsls	r0, r3, #31
   82862:	d534      	bpl.n	828ce <setvbuf+0x9e>
   82864:	4621      	mov	r1, r4
   82866:	4628      	mov	r0, r5
   82868:	f001 f8b0 	bl	839cc <_fflush_r>
   8286c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8286e:	b141      	cbz	r1, 82882 <setvbuf+0x52>
   82870:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82874:	4299      	cmp	r1, r3
   82876:	d002      	beq.n	8287e <setvbuf+0x4e>
   82878:	4628      	mov	r0, r5
   8287a:	f001 fa25 	bl	83cc8 <_free_r>
   8287e:	2300      	movs	r3, #0
   82880:	6323      	str	r3, [r4, #48]	; 0x30
   82882:	2200      	movs	r2, #0
   82884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82888:	61a2      	str	r2, [r4, #24]
   8288a:	6062      	str	r2, [r4, #4]
   8288c:	061a      	lsls	r2, r3, #24
   8288e:	d43a      	bmi.n	82906 <setvbuf+0xd6>
   82890:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   82894:	f023 0303 	bic.w	r3, r3, #3
   82898:	f1b8 0f02 	cmp.w	r8, #2
   8289c:	81a3      	strh	r3, [r4, #12]
   8289e:	d01d      	beq.n	828dc <setvbuf+0xac>
   828a0:	ab01      	add	r3, sp, #4
   828a2:	466a      	mov	r2, sp
   828a4:	4621      	mov	r1, r4
   828a6:	4628      	mov	r0, r5
   828a8:	f001 fcac 	bl	84204 <__swhatbuf_r>
   828ac:	89a3      	ldrh	r3, [r4, #12]
   828ae:	4318      	orrs	r0, r3
   828b0:	81a0      	strh	r0, [r4, #12]
   828b2:	2e00      	cmp	r6, #0
   828b4:	d132      	bne.n	8291c <setvbuf+0xec>
   828b6:	9e00      	ldr	r6, [sp, #0]
   828b8:	4630      	mov	r0, r6
   828ba:	f001 fd1b 	bl	842f4 <malloc>
   828be:	4607      	mov	r7, r0
   828c0:	2800      	cmp	r0, #0
   828c2:	d06b      	beq.n	8299c <setvbuf+0x16c>
   828c4:	89a3      	ldrh	r3, [r4, #12]
   828c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   828ca:	81a3      	strh	r3, [r4, #12]
   828cc:	e028      	b.n	82920 <setvbuf+0xf0>
   828ce:	89a3      	ldrh	r3, [r4, #12]
   828d0:	0599      	lsls	r1, r3, #22
   828d2:	d4c7      	bmi.n	82864 <setvbuf+0x34>
   828d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   828d6:	f001 fc91 	bl	841fc <__retarget_lock_acquire_recursive>
   828da:	e7c3      	b.n	82864 <setvbuf+0x34>
   828dc:	2500      	movs	r5, #0
   828de:	2600      	movs	r6, #0
   828e0:	2001      	movs	r0, #1
   828e2:	6e61      	ldr	r1, [r4, #100]	; 0x64
   828e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   828e8:	f043 0302 	orr.w	r3, r3, #2
   828ec:	60a6      	str	r6, [r4, #8]
   828ee:	07ce      	lsls	r6, r1, #31
   828f0:	81a3      	strh	r3, [r4, #12]
   828f2:	6160      	str	r0, [r4, #20]
   828f4:	6022      	str	r2, [r4, #0]
   828f6:	6122      	str	r2, [r4, #16]
   828f8:	d401      	bmi.n	828fe <setvbuf+0xce>
   828fa:	0598      	lsls	r0, r3, #22
   828fc:	d53e      	bpl.n	8297c <setvbuf+0x14c>
   828fe:	4628      	mov	r0, r5
   82900:	b003      	add	sp, #12
   82902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82906:	6921      	ldr	r1, [r4, #16]
   82908:	4628      	mov	r0, r5
   8290a:	f001 f9dd 	bl	83cc8 <_free_r>
   8290e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82912:	e7bd      	b.n	82890 <setvbuf+0x60>
   82914:	4628      	mov	r0, r5
   82916:	f001 f8b1 	bl	83a7c <__sinit>
   8291a:	e796      	b.n	8284a <setvbuf+0x1a>
   8291c:	2f00      	cmp	r7, #0
   8291e:	d0cb      	beq.n	828b8 <setvbuf+0x88>
   82920:	6bab      	ldr	r3, [r5, #56]	; 0x38
   82922:	2b00      	cmp	r3, #0
   82924:	d033      	beq.n	8298e <setvbuf+0x15e>
   82926:	9b00      	ldr	r3, [sp, #0]
   82928:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8292c:	429e      	cmp	r6, r3
   8292e:	bf1c      	itt	ne
   82930:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   82934:	81a2      	strhne	r2, [r4, #12]
   82936:	f1b8 0f01 	cmp.w	r8, #1
   8293a:	bf04      	itt	eq
   8293c:	f042 0201 	orreq.w	r2, r2, #1
   82940:	81a2      	strheq	r2, [r4, #12]
   82942:	b292      	uxth	r2, r2
   82944:	f012 0308 	ands.w	r3, r2, #8
   82948:	6027      	str	r7, [r4, #0]
   8294a:	6127      	str	r7, [r4, #16]
   8294c:	6166      	str	r6, [r4, #20]
   8294e:	d00e      	beq.n	8296e <setvbuf+0x13e>
   82950:	07d1      	lsls	r1, r2, #31
   82952:	d51a      	bpl.n	8298a <setvbuf+0x15a>
   82954:	2300      	movs	r3, #0
   82956:	6e65      	ldr	r5, [r4, #100]	; 0x64
   82958:	4276      	negs	r6, r6
   8295a:	f015 0501 	ands.w	r5, r5, #1
   8295e:	61a6      	str	r6, [r4, #24]
   82960:	60a3      	str	r3, [r4, #8]
   82962:	d009      	beq.n	82978 <setvbuf+0x148>
   82964:	2500      	movs	r5, #0
   82966:	4628      	mov	r0, r5
   82968:	b003      	add	sp, #12
   8296a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8296e:	60a3      	str	r3, [r4, #8]
   82970:	6e65      	ldr	r5, [r4, #100]	; 0x64
   82972:	f015 0501 	ands.w	r5, r5, #1
   82976:	d1f5      	bne.n	82964 <setvbuf+0x134>
   82978:	0593      	lsls	r3, r2, #22
   8297a:	d4c0      	bmi.n	828fe <setvbuf+0xce>
   8297c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8297e:	f001 fc3f 	bl	84200 <__retarget_lock_release_recursive>
   82982:	4628      	mov	r0, r5
   82984:	b003      	add	sp, #12
   82986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8298a:	60a6      	str	r6, [r4, #8]
   8298c:	e7f0      	b.n	82970 <setvbuf+0x140>
   8298e:	4628      	mov	r0, r5
   82990:	f001 f874 	bl	83a7c <__sinit>
   82994:	e7c7      	b.n	82926 <setvbuf+0xf6>
   82996:	f04f 35ff 	mov.w	r5, #4294967295
   8299a:	e7b0      	b.n	828fe <setvbuf+0xce>
   8299c:	f8dd 9000 	ldr.w	r9, [sp]
   829a0:	45b1      	cmp	r9, r6
   829a2:	d004      	beq.n	829ae <setvbuf+0x17e>
   829a4:	4648      	mov	r0, r9
   829a6:	f001 fca5 	bl	842f4 <malloc>
   829aa:	4607      	mov	r7, r0
   829ac:	b920      	cbnz	r0, 829b8 <setvbuf+0x188>
   829ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   829b2:	f04f 35ff 	mov.w	r5, #4294967295
   829b6:	e792      	b.n	828de <setvbuf+0xae>
   829b8:	464e      	mov	r6, r9
   829ba:	e783      	b.n	828c4 <setvbuf+0x94>
   829bc:	20070160 	.word	0x20070160

000829c0 <strlen>:
   829c0:	f020 0103 	bic.w	r1, r0, #3
   829c4:	f010 0003 	ands.w	r0, r0, #3
   829c8:	f1c0 0000 	rsb	r0, r0, #0
   829cc:	f851 3b04 	ldr.w	r3, [r1], #4
   829d0:	f100 0c04 	add.w	ip, r0, #4
   829d4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   829d8:	f06f 0200 	mvn.w	r2, #0
   829dc:	bf1c      	itt	ne
   829de:	fa22 f20c 	lsrne.w	r2, r2, ip
   829e2:	4313      	orrne	r3, r2
   829e4:	f04f 0c01 	mov.w	ip, #1
   829e8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   829ec:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   829f0:	eba3 020c 	sub.w	r2, r3, ip
   829f4:	ea22 0203 	bic.w	r2, r2, r3
   829f8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   829fc:	bf04      	itt	eq
   829fe:	f851 3b04 	ldreq.w	r3, [r1], #4
   82a02:	3004      	addeq	r0, #4
   82a04:	d0f4      	beq.n	829f0 <strlen+0x30>
   82a06:	f1c2 0100 	rsb	r1, r2, #0
   82a0a:	ea02 0201 	and.w	r2, r2, r1
   82a0e:	fab2 f282 	clz	r2, r2
   82a12:	f1c2 021f 	rsb	r2, r2, #31
   82a16:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   82a1a:	4770      	bx	lr

00082a1c <__sprint_r.part.0>:
   82a1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82a20:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   82a22:	4693      	mov	fp, r2
   82a24:	049c      	lsls	r4, r3, #18
   82a26:	d52f      	bpl.n	82a88 <__sprint_r.part.0+0x6c>
   82a28:	6893      	ldr	r3, [r2, #8]
   82a2a:	6812      	ldr	r2, [r2, #0]
   82a2c:	b353      	cbz	r3, 82a84 <__sprint_r.part.0+0x68>
   82a2e:	460e      	mov	r6, r1
   82a30:	4607      	mov	r7, r0
   82a32:	f102 0908 	add.w	r9, r2, #8
   82a36:	e919 0420 	ldmdb	r9, {r5, sl}
   82a3a:	ea5f 089a 	movs.w	r8, sl, lsr #2
   82a3e:	d017      	beq.n	82a70 <__sprint_r.part.0+0x54>
   82a40:	2400      	movs	r4, #0
   82a42:	3d04      	subs	r5, #4
   82a44:	e001      	b.n	82a4a <__sprint_r.part.0+0x2e>
   82a46:	45a0      	cmp	r8, r4
   82a48:	d010      	beq.n	82a6c <__sprint_r.part.0+0x50>
   82a4a:	4632      	mov	r2, r6
   82a4c:	f855 1f04 	ldr.w	r1, [r5, #4]!
   82a50:	4638      	mov	r0, r7
   82a52:	f001 f8b5 	bl	83bc0 <_fputwc_r>
   82a56:	1c43      	adds	r3, r0, #1
   82a58:	f104 0401 	add.w	r4, r4, #1
   82a5c:	d1f3      	bne.n	82a46 <__sprint_r.part.0+0x2a>
   82a5e:	2300      	movs	r3, #0
   82a60:	f8cb 3008 	str.w	r3, [fp, #8]
   82a64:	f8cb 3004 	str.w	r3, [fp, #4]
   82a68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a6c:	f8db 3008 	ldr.w	r3, [fp, #8]
   82a70:	f02a 0a03 	bic.w	sl, sl, #3
   82a74:	eba3 030a 	sub.w	r3, r3, sl
   82a78:	f8cb 3008 	str.w	r3, [fp, #8]
   82a7c:	f109 0908 	add.w	r9, r9, #8
   82a80:	2b00      	cmp	r3, #0
   82a82:	d1d8      	bne.n	82a36 <__sprint_r.part.0+0x1a>
   82a84:	2000      	movs	r0, #0
   82a86:	e7ea      	b.n	82a5e <__sprint_r.part.0+0x42>
   82a88:	f001 fa04 	bl	83e94 <__sfvwrite_r>
   82a8c:	2300      	movs	r3, #0
   82a8e:	f8cb 3008 	str.w	r3, [fp, #8]
   82a92:	f8cb 3004 	str.w	r3, [fp, #4]
   82a96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a9a:	bf00      	nop

00082a9c <_vfiprintf_r>:
   82a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82aa0:	b0ad      	sub	sp, #180	; 0xb4
   82aa2:	461d      	mov	r5, r3
   82aa4:	468b      	mov	fp, r1
   82aa6:	4690      	mov	r8, r2
   82aa8:	9307      	str	r3, [sp, #28]
   82aaa:	9006      	str	r0, [sp, #24]
   82aac:	b118      	cbz	r0, 82ab6 <_vfiprintf_r+0x1a>
   82aae:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82ab0:	2b00      	cmp	r3, #0
   82ab2:	f000 80f3 	beq.w	82c9c <_vfiprintf_r+0x200>
   82ab6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82aba:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   82abe:	07df      	lsls	r7, r3, #31
   82ac0:	b281      	uxth	r1, r0
   82ac2:	d402      	bmi.n	82aca <_vfiprintf_r+0x2e>
   82ac4:	058e      	lsls	r6, r1, #22
   82ac6:	f140 80fc 	bpl.w	82cc2 <_vfiprintf_r+0x226>
   82aca:	048c      	lsls	r4, r1, #18
   82acc:	d40a      	bmi.n	82ae4 <_vfiprintf_r+0x48>
   82ace:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82ad2:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   82ad6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   82ada:	f8ab 100c 	strh.w	r1, [fp, #12]
   82ade:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   82ae2:	b289      	uxth	r1, r1
   82ae4:	0708      	lsls	r0, r1, #28
   82ae6:	f140 80b3 	bpl.w	82c50 <_vfiprintf_r+0x1b4>
   82aea:	f8db 3010 	ldr.w	r3, [fp, #16]
   82aee:	2b00      	cmp	r3, #0
   82af0:	f000 80ae 	beq.w	82c50 <_vfiprintf_r+0x1b4>
   82af4:	f001 031a 	and.w	r3, r1, #26
   82af8:	2b0a      	cmp	r3, #10
   82afa:	f000 80b5 	beq.w	82c68 <_vfiprintf_r+0x1cc>
   82afe:	2300      	movs	r3, #0
   82b00:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   82b04:	46d1      	mov	r9, sl
   82b06:	930b      	str	r3, [sp, #44]	; 0x2c
   82b08:	9303      	str	r3, [sp, #12]
   82b0a:	9311      	str	r3, [sp, #68]	; 0x44
   82b0c:	9310      	str	r3, [sp, #64]	; 0x40
   82b0e:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   82b12:	f8cd b010 	str.w	fp, [sp, #16]
   82b16:	f898 3000 	ldrb.w	r3, [r8]
   82b1a:	4644      	mov	r4, r8
   82b1c:	b1fb      	cbz	r3, 82b5e <_vfiprintf_r+0xc2>
   82b1e:	2b25      	cmp	r3, #37	; 0x25
   82b20:	d102      	bne.n	82b28 <_vfiprintf_r+0x8c>
   82b22:	e01c      	b.n	82b5e <_vfiprintf_r+0xc2>
   82b24:	2b25      	cmp	r3, #37	; 0x25
   82b26:	d003      	beq.n	82b30 <_vfiprintf_r+0x94>
   82b28:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   82b2c:	2b00      	cmp	r3, #0
   82b2e:	d1f9      	bne.n	82b24 <_vfiprintf_r+0x88>
   82b30:	eba4 0508 	sub.w	r5, r4, r8
   82b34:	b19d      	cbz	r5, 82b5e <_vfiprintf_r+0xc2>
   82b36:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82b38:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82b3a:	3301      	adds	r3, #1
   82b3c:	442a      	add	r2, r5
   82b3e:	2b07      	cmp	r3, #7
   82b40:	f8c9 8000 	str.w	r8, [r9]
   82b44:	f8c9 5004 	str.w	r5, [r9, #4]
   82b48:	9211      	str	r2, [sp, #68]	; 0x44
   82b4a:	9310      	str	r3, [sp, #64]	; 0x40
   82b4c:	dd7a      	ble.n	82c44 <_vfiprintf_r+0x1a8>
   82b4e:	2a00      	cmp	r2, #0
   82b50:	f040 84b5 	bne.w	834be <_vfiprintf_r+0xa22>
   82b54:	46d1      	mov	r9, sl
   82b56:	9b03      	ldr	r3, [sp, #12]
   82b58:	9210      	str	r2, [sp, #64]	; 0x40
   82b5a:	442b      	add	r3, r5
   82b5c:	9303      	str	r3, [sp, #12]
   82b5e:	7823      	ldrb	r3, [r4, #0]
   82b60:	2b00      	cmp	r3, #0
   82b62:	f000 83e5 	beq.w	83330 <_vfiprintf_r+0x894>
   82b66:	2000      	movs	r0, #0
   82b68:	f04f 0300 	mov.w	r3, #0
   82b6c:	f104 0801 	add.w	r8, r4, #1
   82b70:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   82b74:	7862      	ldrb	r2, [r4, #1]
   82b76:	4606      	mov	r6, r0
   82b78:	4605      	mov	r5, r0
   82b7a:	4603      	mov	r3, r0
   82b7c:	f04f 34ff 	mov.w	r4, #4294967295
   82b80:	f108 0801 	add.w	r8, r8, #1
   82b84:	f1a2 0120 	sub.w	r1, r2, #32
   82b88:	2958      	cmp	r1, #88	; 0x58
   82b8a:	f200 82d9 	bhi.w	83140 <_vfiprintf_r+0x6a4>
   82b8e:	e8df f011 	tbh	[pc, r1, lsl #1]
   82b92:	0228      	.short	0x0228
   82b94:	02d702d7 	.word	0x02d702d7
   82b98:	02d70230 	.word	0x02d70230
   82b9c:	02d702d7 	.word	0x02d702d7
   82ba0:	02d702d7 	.word	0x02d702d7
   82ba4:	00a002d7 	.word	0x00a002d7
   82ba8:	02d70288 	.word	0x02d70288
   82bac:	02b800a8 	.word	0x02b800a8
   82bb0:	01a602d7 	.word	0x01a602d7
   82bb4:	01ab01ab 	.word	0x01ab01ab
   82bb8:	01ab01ab 	.word	0x01ab01ab
   82bbc:	01ab01ab 	.word	0x01ab01ab
   82bc0:	01ab01ab 	.word	0x01ab01ab
   82bc4:	02d701ab 	.word	0x02d701ab
   82bc8:	02d702d7 	.word	0x02d702d7
   82bcc:	02d702d7 	.word	0x02d702d7
   82bd0:	02d702d7 	.word	0x02d702d7
   82bd4:	02d702d7 	.word	0x02d702d7
   82bd8:	01b902d7 	.word	0x01b902d7
   82bdc:	02d702d7 	.word	0x02d702d7
   82be0:	02d702d7 	.word	0x02d702d7
   82be4:	02d702d7 	.word	0x02d702d7
   82be8:	02d702d7 	.word	0x02d702d7
   82bec:	02d702d7 	.word	0x02d702d7
   82bf0:	02d7019e 	.word	0x02d7019e
   82bf4:	02d702d7 	.word	0x02d702d7
   82bf8:	02d702d7 	.word	0x02d702d7
   82bfc:	02d701a2 	.word	0x02d701a2
   82c00:	025a02d7 	.word	0x025a02d7
   82c04:	02d702d7 	.word	0x02d702d7
   82c08:	02d702d7 	.word	0x02d702d7
   82c0c:	02d702d7 	.word	0x02d702d7
   82c10:	02d702d7 	.word	0x02d702d7
   82c14:	02d702d7 	.word	0x02d702d7
   82c18:	02220261 	.word	0x02220261
   82c1c:	02d702d7 	.word	0x02d702d7
   82c20:	027602d7 	.word	0x027602d7
   82c24:	02d70222 	.word	0x02d70222
   82c28:	027b02d7 	.word	0x027b02d7
   82c2c:	01fc02d7 	.word	0x01fc02d7
   82c30:	02100189 	.word	0x02100189
   82c34:	02d702d2 	.word	0x02d702d2
   82c38:	02d70295 	.word	0x02d70295
   82c3c:	02d700ad 	.word	0x02d700ad
   82c40:	023502d7 	.word	0x023502d7
   82c44:	f109 0908 	add.w	r9, r9, #8
   82c48:	9b03      	ldr	r3, [sp, #12]
   82c4a:	442b      	add	r3, r5
   82c4c:	9303      	str	r3, [sp, #12]
   82c4e:	e786      	b.n	82b5e <_vfiprintf_r+0xc2>
   82c50:	4659      	mov	r1, fp
   82c52:	9806      	ldr	r0, [sp, #24]
   82c54:	f000 fdaa 	bl	837ac <__swsetup_r>
   82c58:	bb18      	cbnz	r0, 82ca2 <_vfiprintf_r+0x206>
   82c5a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   82c5e:	f001 031a 	and.w	r3, r1, #26
   82c62:	2b0a      	cmp	r3, #10
   82c64:	f47f af4b 	bne.w	82afe <_vfiprintf_r+0x62>
   82c68:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   82c6c:	2b00      	cmp	r3, #0
   82c6e:	f6ff af46 	blt.w	82afe <_vfiprintf_r+0x62>
   82c72:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82c76:	07db      	lsls	r3, r3, #31
   82c78:	d405      	bmi.n	82c86 <_vfiprintf_r+0x1ea>
   82c7a:	058f      	lsls	r7, r1, #22
   82c7c:	d403      	bmi.n	82c86 <_vfiprintf_r+0x1ea>
   82c7e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82c82:	f001 fabd 	bl	84200 <__retarget_lock_release_recursive>
   82c86:	462b      	mov	r3, r5
   82c88:	4642      	mov	r2, r8
   82c8a:	4659      	mov	r1, fp
   82c8c:	9806      	ldr	r0, [sp, #24]
   82c8e:	f000 fd49 	bl	83724 <__sbprintf>
   82c92:	9003      	str	r0, [sp, #12]
   82c94:	9803      	ldr	r0, [sp, #12]
   82c96:	b02d      	add	sp, #180	; 0xb4
   82c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c9c:	f000 feee 	bl	83a7c <__sinit>
   82ca0:	e709      	b.n	82ab6 <_vfiprintf_r+0x1a>
   82ca2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82ca6:	07d9      	lsls	r1, r3, #31
   82ca8:	d404      	bmi.n	82cb4 <_vfiprintf_r+0x218>
   82caa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   82cae:	059a      	lsls	r2, r3, #22
   82cb0:	f140 84ae 	bpl.w	83610 <_vfiprintf_r+0xb74>
   82cb4:	f04f 33ff 	mov.w	r3, #4294967295
   82cb8:	9303      	str	r3, [sp, #12]
   82cba:	9803      	ldr	r0, [sp, #12]
   82cbc:	b02d      	add	sp, #180	; 0xb4
   82cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82cc2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82cc6:	f001 fa99 	bl	841fc <__retarget_lock_acquire_recursive>
   82cca:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   82cce:	b281      	uxth	r1, r0
   82cd0:	e6fb      	b.n	82aca <_vfiprintf_r+0x2e>
   82cd2:	9907      	ldr	r1, [sp, #28]
   82cd4:	460a      	mov	r2, r1
   82cd6:	680d      	ldr	r5, [r1, #0]
   82cd8:	3204      	adds	r2, #4
   82cda:	2d00      	cmp	r5, #0
   82cdc:	9207      	str	r2, [sp, #28]
   82cde:	da02      	bge.n	82ce6 <_vfiprintf_r+0x24a>
   82ce0:	426d      	negs	r5, r5
   82ce2:	f043 0304 	orr.w	r3, r3, #4
   82ce6:	f898 2000 	ldrb.w	r2, [r8]
   82cea:	e749      	b.n	82b80 <_vfiprintf_r+0xe4>
   82cec:	9508      	str	r5, [sp, #32]
   82cee:	069e      	lsls	r6, r3, #26
   82cf0:	f100 845a 	bmi.w	835a8 <_vfiprintf_r+0xb0c>
   82cf4:	9907      	ldr	r1, [sp, #28]
   82cf6:	06dd      	lsls	r5, r3, #27
   82cf8:	460a      	mov	r2, r1
   82cfa:	f100 83ef 	bmi.w	834dc <_vfiprintf_r+0xa40>
   82cfe:	0658      	lsls	r0, r3, #25
   82d00:	f140 83ec 	bpl.w	834dc <_vfiprintf_r+0xa40>
   82d04:	2700      	movs	r7, #0
   82d06:	2201      	movs	r2, #1
   82d08:	880e      	ldrh	r6, [r1, #0]
   82d0a:	3104      	adds	r1, #4
   82d0c:	9107      	str	r1, [sp, #28]
   82d0e:	f04f 0100 	mov.w	r1, #0
   82d12:	2500      	movs	r5, #0
   82d14:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   82d18:	1c61      	adds	r1, r4, #1
   82d1a:	f000 8117 	beq.w	82f4c <_vfiprintf_r+0x4b0>
   82d1e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   82d22:	9102      	str	r1, [sp, #8]
   82d24:	ea56 0107 	orrs.w	r1, r6, r7
   82d28:	f040 8115 	bne.w	82f56 <_vfiprintf_r+0x4ba>
   82d2c:	2c00      	cmp	r4, #0
   82d2e:	f040 835b 	bne.w	833e8 <_vfiprintf_r+0x94c>
   82d32:	2a00      	cmp	r2, #0
   82d34:	f040 83b6 	bne.w	834a4 <_vfiprintf_r+0xa08>
   82d38:	f013 0301 	ands.w	r3, r3, #1
   82d3c:	9305      	str	r3, [sp, #20]
   82d3e:	f000 8455 	beq.w	835ec <_vfiprintf_r+0xb50>
   82d42:	2330      	movs	r3, #48	; 0x30
   82d44:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   82d48:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   82d4c:	9b05      	ldr	r3, [sp, #20]
   82d4e:	42a3      	cmp	r3, r4
   82d50:	bfb8      	it	lt
   82d52:	4623      	movlt	r3, r4
   82d54:	9301      	str	r3, [sp, #4]
   82d56:	b10d      	cbz	r5, 82d5c <_vfiprintf_r+0x2c0>
   82d58:	3301      	adds	r3, #1
   82d5a:	9301      	str	r3, [sp, #4]
   82d5c:	9b02      	ldr	r3, [sp, #8]
   82d5e:	f013 0302 	ands.w	r3, r3, #2
   82d62:	9309      	str	r3, [sp, #36]	; 0x24
   82d64:	d002      	beq.n	82d6c <_vfiprintf_r+0x2d0>
   82d66:	9b01      	ldr	r3, [sp, #4]
   82d68:	3302      	adds	r3, #2
   82d6a:	9301      	str	r3, [sp, #4]
   82d6c:	9b02      	ldr	r3, [sp, #8]
   82d6e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   82d72:	930a      	str	r3, [sp, #40]	; 0x28
   82d74:	f040 8215 	bne.w	831a2 <_vfiprintf_r+0x706>
   82d78:	9b08      	ldr	r3, [sp, #32]
   82d7a:	9a01      	ldr	r2, [sp, #4]
   82d7c:	1a9d      	subs	r5, r3, r2
   82d7e:	2d00      	cmp	r5, #0
   82d80:	f340 820f 	ble.w	831a2 <_vfiprintf_r+0x706>
   82d84:	2d10      	cmp	r5, #16
   82d86:	f340 8484 	ble.w	83692 <_vfiprintf_r+0xbf6>
   82d8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82d8c:	46ce      	mov	lr, r9
   82d8e:	2710      	movs	r7, #16
   82d90:	46a1      	mov	r9, r4
   82d92:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82d94:	4ec5      	ldr	r6, [pc, #788]	; (830ac <_vfiprintf_r+0x610>)
   82d96:	4619      	mov	r1, r3
   82d98:	9c06      	ldr	r4, [sp, #24]
   82d9a:	e007      	b.n	82dac <_vfiprintf_r+0x310>
   82d9c:	f101 0c02 	add.w	ip, r1, #2
   82da0:	4601      	mov	r1, r0
   82da2:	f10e 0e08 	add.w	lr, lr, #8
   82da6:	3d10      	subs	r5, #16
   82da8:	2d10      	cmp	r5, #16
   82daa:	dd11      	ble.n	82dd0 <_vfiprintf_r+0x334>
   82dac:	1c48      	adds	r0, r1, #1
   82dae:	3210      	adds	r2, #16
   82db0:	2807      	cmp	r0, #7
   82db2:	9211      	str	r2, [sp, #68]	; 0x44
   82db4:	e88e 00c0 	stmia.w	lr, {r6, r7}
   82db8:	9010      	str	r0, [sp, #64]	; 0x40
   82dba:	ddef      	ble.n	82d9c <_vfiprintf_r+0x300>
   82dbc:	2a00      	cmp	r2, #0
   82dbe:	f040 81d9 	bne.w	83174 <_vfiprintf_r+0x6d8>
   82dc2:	3d10      	subs	r5, #16
   82dc4:	2d10      	cmp	r5, #16
   82dc6:	4611      	mov	r1, r2
   82dc8:	f04f 0c01 	mov.w	ip, #1
   82dcc:	46d6      	mov	lr, sl
   82dce:	dced      	bgt.n	82dac <_vfiprintf_r+0x310>
   82dd0:	464c      	mov	r4, r9
   82dd2:	4661      	mov	r1, ip
   82dd4:	46f1      	mov	r9, lr
   82dd6:	442a      	add	r2, r5
   82dd8:	2907      	cmp	r1, #7
   82dda:	9211      	str	r2, [sp, #68]	; 0x44
   82ddc:	f8c9 6000 	str.w	r6, [r9]
   82de0:	f8c9 5004 	str.w	r5, [r9, #4]
   82de4:	9110      	str	r1, [sp, #64]	; 0x40
   82de6:	f300 82eb 	bgt.w	833c0 <_vfiprintf_r+0x924>
   82dea:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82dee:	f109 0908 	add.w	r9, r9, #8
   82df2:	1c48      	adds	r0, r1, #1
   82df4:	2d00      	cmp	r5, #0
   82df6:	f040 81dc 	bne.w	831b2 <_vfiprintf_r+0x716>
   82dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82dfc:	2b00      	cmp	r3, #0
   82dfe:	f000 81f6 	beq.w	831ee <_vfiprintf_r+0x752>
   82e02:	2102      	movs	r1, #2
   82e04:	ab0e      	add	r3, sp, #56	; 0x38
   82e06:	440a      	add	r2, r1
   82e08:	2807      	cmp	r0, #7
   82e0a:	9211      	str	r2, [sp, #68]	; 0x44
   82e0c:	9010      	str	r0, [sp, #64]	; 0x40
   82e0e:	f8c9 1004 	str.w	r1, [r9, #4]
   82e12:	f8c9 3000 	str.w	r3, [r9]
   82e16:	f340 81e6 	ble.w	831e6 <_vfiprintf_r+0x74a>
   82e1a:	2a00      	cmp	r2, #0
   82e1c:	f040 8395 	bne.w	8354a <_vfiprintf_r+0xaae>
   82e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   82e22:	2001      	movs	r0, #1
   82e24:	2b80      	cmp	r3, #128	; 0x80
   82e26:	4611      	mov	r1, r2
   82e28:	46d1      	mov	r9, sl
   82e2a:	f040 81e4 	bne.w	831f6 <_vfiprintf_r+0x75a>
   82e2e:	9b08      	ldr	r3, [sp, #32]
   82e30:	9d01      	ldr	r5, [sp, #4]
   82e32:	1b5e      	subs	r6, r3, r5
   82e34:	2e00      	cmp	r6, #0
   82e36:	f340 81de 	ble.w	831f6 <_vfiprintf_r+0x75a>
   82e3a:	2e10      	cmp	r6, #16
   82e3c:	f340 843c 	ble.w	836b8 <_vfiprintf_r+0xc1c>
   82e40:	46cc      	mov	ip, r9
   82e42:	2710      	movs	r7, #16
   82e44:	46a1      	mov	r9, r4
   82e46:	4d9a      	ldr	r5, [pc, #616]	; (830b0 <_vfiprintf_r+0x614>)
   82e48:	9c06      	ldr	r4, [sp, #24]
   82e4a:	e007      	b.n	82e5c <_vfiprintf_r+0x3c0>
   82e4c:	f101 0e02 	add.w	lr, r1, #2
   82e50:	4601      	mov	r1, r0
   82e52:	f10c 0c08 	add.w	ip, ip, #8
   82e56:	3e10      	subs	r6, #16
   82e58:	2e10      	cmp	r6, #16
   82e5a:	dd11      	ble.n	82e80 <_vfiprintf_r+0x3e4>
   82e5c:	1c48      	adds	r0, r1, #1
   82e5e:	3210      	adds	r2, #16
   82e60:	2807      	cmp	r0, #7
   82e62:	9211      	str	r2, [sp, #68]	; 0x44
   82e64:	e88c 00a0 	stmia.w	ip, {r5, r7}
   82e68:	9010      	str	r0, [sp, #64]	; 0x40
   82e6a:	ddef      	ble.n	82e4c <_vfiprintf_r+0x3b0>
   82e6c:	2a00      	cmp	r2, #0
   82e6e:	f040 829b 	bne.w	833a8 <_vfiprintf_r+0x90c>
   82e72:	3e10      	subs	r6, #16
   82e74:	2e10      	cmp	r6, #16
   82e76:	f04f 0e01 	mov.w	lr, #1
   82e7a:	4611      	mov	r1, r2
   82e7c:	46d4      	mov	ip, sl
   82e7e:	dced      	bgt.n	82e5c <_vfiprintf_r+0x3c0>
   82e80:	464c      	mov	r4, r9
   82e82:	46e1      	mov	r9, ip
   82e84:	4432      	add	r2, r6
   82e86:	f1be 0f07 	cmp.w	lr, #7
   82e8a:	9211      	str	r2, [sp, #68]	; 0x44
   82e8c:	e889 0060 	stmia.w	r9, {r5, r6}
   82e90:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   82e94:	f300 8366 	bgt.w	83564 <_vfiprintf_r+0xac8>
   82e98:	f109 0908 	add.w	r9, r9, #8
   82e9c:	f10e 0001 	add.w	r0, lr, #1
   82ea0:	4671      	mov	r1, lr
   82ea2:	e1a8      	b.n	831f6 <_vfiprintf_r+0x75a>
   82ea4:	9508      	str	r5, [sp, #32]
   82ea6:	f013 0220 	ands.w	r2, r3, #32
   82eaa:	f040 8389 	bne.w	835c0 <_vfiprintf_r+0xb24>
   82eae:	f013 0110 	ands.w	r1, r3, #16
   82eb2:	f040 8319 	bne.w	834e8 <_vfiprintf_r+0xa4c>
   82eb6:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   82eba:	f000 8315 	beq.w	834e8 <_vfiprintf_r+0xa4c>
   82ebe:	9807      	ldr	r0, [sp, #28]
   82ec0:	460a      	mov	r2, r1
   82ec2:	4601      	mov	r1, r0
   82ec4:	3104      	adds	r1, #4
   82ec6:	8806      	ldrh	r6, [r0, #0]
   82ec8:	2700      	movs	r7, #0
   82eca:	9107      	str	r1, [sp, #28]
   82ecc:	e71f      	b.n	82d0e <_vfiprintf_r+0x272>
   82ece:	9508      	str	r5, [sp, #32]
   82ed0:	f043 0310 	orr.w	r3, r3, #16
   82ed4:	e7e7      	b.n	82ea6 <_vfiprintf_r+0x40a>
   82ed6:	9508      	str	r5, [sp, #32]
   82ed8:	f043 0310 	orr.w	r3, r3, #16
   82edc:	e707      	b.n	82cee <_vfiprintf_r+0x252>
   82ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82ee2:	f898 2000 	ldrb.w	r2, [r8]
   82ee6:	e64b      	b.n	82b80 <_vfiprintf_r+0xe4>
   82ee8:	2500      	movs	r5, #0
   82eea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82eee:	f818 2b01 	ldrb.w	r2, [r8], #1
   82ef2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   82ef6:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   82efa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82efe:	2909      	cmp	r1, #9
   82f00:	d9f5      	bls.n	82eee <_vfiprintf_r+0x452>
   82f02:	e63f      	b.n	82b84 <_vfiprintf_r+0xe8>
   82f04:	9508      	str	r5, [sp, #32]
   82f06:	2800      	cmp	r0, #0
   82f08:	f040 8402 	bne.w	83710 <_vfiprintf_r+0xc74>
   82f0c:	f043 0310 	orr.w	r3, r3, #16
   82f10:	069e      	lsls	r6, r3, #26
   82f12:	f100 833d 	bmi.w	83590 <_vfiprintf_r+0xaf4>
   82f16:	9907      	ldr	r1, [sp, #28]
   82f18:	06dd      	lsls	r5, r3, #27
   82f1a:	460a      	mov	r2, r1
   82f1c:	f100 82f0 	bmi.w	83500 <_vfiprintf_r+0xa64>
   82f20:	0658      	lsls	r0, r3, #25
   82f22:	f140 82ed 	bpl.w	83500 <_vfiprintf_r+0xa64>
   82f26:	f9b1 6000 	ldrsh.w	r6, [r1]
   82f2a:	3204      	adds	r2, #4
   82f2c:	17f7      	asrs	r7, r6, #31
   82f2e:	4630      	mov	r0, r6
   82f30:	4639      	mov	r1, r7
   82f32:	9207      	str	r2, [sp, #28]
   82f34:	2800      	cmp	r0, #0
   82f36:	f171 0200 	sbcs.w	r2, r1, #0
   82f3a:	f2c0 835a 	blt.w	835f2 <_vfiprintf_r+0xb56>
   82f3e:	1c61      	adds	r1, r4, #1
   82f40:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82f44:	f04f 0201 	mov.w	r2, #1
   82f48:	f47f aee9 	bne.w	82d1e <_vfiprintf_r+0x282>
   82f4c:	ea56 0107 	orrs.w	r1, r6, r7
   82f50:	f000 824b 	beq.w	833ea <_vfiprintf_r+0x94e>
   82f54:	9302      	str	r3, [sp, #8]
   82f56:	2a01      	cmp	r2, #1
   82f58:	f000 828a 	beq.w	83470 <_vfiprintf_r+0x9d4>
   82f5c:	2a02      	cmp	r2, #2
   82f5e:	f040 825a 	bne.w	83416 <_vfiprintf_r+0x97a>
   82f62:	46d3      	mov	fp, sl
   82f64:	980b      	ldr	r0, [sp, #44]	; 0x2c
   82f66:	0933      	lsrs	r3, r6, #4
   82f68:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   82f6c:	0939      	lsrs	r1, r7, #4
   82f6e:	f006 020f 	and.w	r2, r6, #15
   82f72:	460f      	mov	r7, r1
   82f74:	461e      	mov	r6, r3
   82f76:	5c83      	ldrb	r3, [r0, r2]
   82f78:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   82f7c:	ea56 0307 	orrs.w	r3, r6, r7
   82f80:	d1f1      	bne.n	82f66 <_vfiprintf_r+0x4ca>
   82f82:	ebaa 030b 	sub.w	r3, sl, fp
   82f86:	9305      	str	r3, [sp, #20]
   82f88:	e6e0      	b.n	82d4c <_vfiprintf_r+0x2b0>
   82f8a:	2800      	cmp	r0, #0
   82f8c:	f040 83bd 	bne.w	8370a <_vfiprintf_r+0xc6e>
   82f90:	0699      	lsls	r1, r3, #26
   82f92:	f100 8359 	bmi.w	83648 <_vfiprintf_r+0xbac>
   82f96:	06da      	lsls	r2, r3, #27
   82f98:	f100 80e5 	bmi.w	83166 <_vfiprintf_r+0x6ca>
   82f9c:	065b      	lsls	r3, r3, #25
   82f9e:	f140 80e2 	bpl.w	83166 <_vfiprintf_r+0x6ca>
   82fa2:	9a07      	ldr	r2, [sp, #28]
   82fa4:	6813      	ldr	r3, [r2, #0]
   82fa6:	3204      	adds	r2, #4
   82fa8:	9207      	str	r2, [sp, #28]
   82faa:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   82fae:	801a      	strh	r2, [r3, #0]
   82fb0:	e5b1      	b.n	82b16 <_vfiprintf_r+0x7a>
   82fb2:	2278      	movs	r2, #120	; 0x78
   82fb4:	2130      	movs	r1, #48	; 0x30
   82fb6:	9508      	str	r5, [sp, #32]
   82fb8:	9d07      	ldr	r5, [sp, #28]
   82fba:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   82fbe:	1d2a      	adds	r2, r5, #4
   82fc0:	9207      	str	r2, [sp, #28]
   82fc2:	4a3c      	ldr	r2, [pc, #240]	; (830b4 <_vfiprintf_r+0x618>)
   82fc4:	682e      	ldr	r6, [r5, #0]
   82fc6:	920b      	str	r2, [sp, #44]	; 0x2c
   82fc8:	f043 0302 	orr.w	r3, r3, #2
   82fcc:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   82fd0:	2700      	movs	r7, #0
   82fd2:	2202      	movs	r2, #2
   82fd4:	e69b      	b.n	82d0e <_vfiprintf_r+0x272>
   82fd6:	9508      	str	r5, [sp, #32]
   82fd8:	2800      	cmp	r0, #0
   82fda:	d099      	beq.n	82f10 <_vfiprintf_r+0x474>
   82fdc:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82fe0:	e796      	b.n	82f10 <_vfiprintf_r+0x474>
   82fe2:	f898 2000 	ldrb.w	r2, [r8]
   82fe6:	2e00      	cmp	r6, #0
   82fe8:	f47f adca 	bne.w	82b80 <_vfiprintf_r+0xe4>
   82fec:	2001      	movs	r0, #1
   82fee:	2620      	movs	r6, #32
   82ff0:	e5c6      	b.n	82b80 <_vfiprintf_r+0xe4>
   82ff2:	f043 0301 	orr.w	r3, r3, #1
   82ff6:	f898 2000 	ldrb.w	r2, [r8]
   82ffa:	e5c1      	b.n	82b80 <_vfiprintf_r+0xe4>
   82ffc:	9508      	str	r5, [sp, #32]
   82ffe:	2800      	cmp	r0, #0
   83000:	f040 8380 	bne.w	83704 <_vfiprintf_r+0xc68>
   83004:	492b      	ldr	r1, [pc, #172]	; (830b4 <_vfiprintf_r+0x618>)
   83006:	910b      	str	r1, [sp, #44]	; 0x2c
   83008:	069f      	lsls	r7, r3, #26
   8300a:	f100 82e5 	bmi.w	835d8 <_vfiprintf_r+0xb3c>
   8300e:	9807      	ldr	r0, [sp, #28]
   83010:	06de      	lsls	r6, r3, #27
   83012:	4601      	mov	r1, r0
   83014:	f100 826f 	bmi.w	834f6 <_vfiprintf_r+0xa5a>
   83018:	065d      	lsls	r5, r3, #25
   8301a:	f140 826c 	bpl.w	834f6 <_vfiprintf_r+0xa5a>
   8301e:	2700      	movs	r7, #0
   83020:	3104      	adds	r1, #4
   83022:	8806      	ldrh	r6, [r0, #0]
   83024:	9107      	str	r1, [sp, #28]
   83026:	07d8      	lsls	r0, r3, #31
   83028:	f140 8220 	bpl.w	8346c <_vfiprintf_r+0x9d0>
   8302c:	ea56 0107 	orrs.w	r1, r6, r7
   83030:	f000 821c 	beq.w	8346c <_vfiprintf_r+0x9d0>
   83034:	2130      	movs	r1, #48	; 0x30
   83036:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   8303a:	f043 0302 	orr.w	r3, r3, #2
   8303e:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   83042:	2202      	movs	r2, #2
   83044:	e663      	b.n	82d0e <_vfiprintf_r+0x272>
   83046:	9508      	str	r5, [sp, #32]
   83048:	2800      	cmp	r0, #0
   8304a:	f040 8355 	bne.w	836f8 <_vfiprintf_r+0xc5c>
   8304e:	491a      	ldr	r1, [pc, #104]	; (830b8 <_vfiprintf_r+0x61c>)
   83050:	910b      	str	r1, [sp, #44]	; 0x2c
   83052:	e7d9      	b.n	83008 <_vfiprintf_r+0x56c>
   83054:	2201      	movs	r2, #1
   83056:	9807      	ldr	r0, [sp, #28]
   83058:	4611      	mov	r1, r2
   8305a:	9201      	str	r2, [sp, #4]
   8305c:	6802      	ldr	r2, [r0, #0]
   8305e:	f04f 0400 	mov.w	r4, #0
   83062:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   83066:	4602      	mov	r2, r0
   83068:	3204      	adds	r2, #4
   8306a:	9508      	str	r5, [sp, #32]
   8306c:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   83070:	9105      	str	r1, [sp, #20]
   83072:	9207      	str	r2, [sp, #28]
   83074:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   83078:	9302      	str	r3, [sp, #8]
   8307a:	2400      	movs	r4, #0
   8307c:	e66e      	b.n	82d5c <_vfiprintf_r+0x2c0>
   8307e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83082:	f898 2000 	ldrb.w	r2, [r8]
   83086:	e57b      	b.n	82b80 <_vfiprintf_r+0xe4>
   83088:	f898 2000 	ldrb.w	r2, [r8]
   8308c:	2a6c      	cmp	r2, #108	; 0x6c
   8308e:	bf03      	ittte	eq
   83090:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   83094:	f043 0320 	orreq.w	r3, r3, #32
   83098:	f108 0801 	addeq.w	r8, r8, #1
   8309c:	f043 0310 	orrne.w	r3, r3, #16
   830a0:	e56e      	b.n	82b80 <_vfiprintf_r+0xe4>
   830a2:	f898 2000 	ldrb.w	r2, [r8]
   830a6:	2001      	movs	r0, #1
   830a8:	262b      	movs	r6, #43	; 0x2b
   830aa:	e569      	b.n	82b80 <_vfiprintf_r+0xe4>
   830ac:	000856b4 	.word	0x000856b4
   830b0:	000856c4 	.word	0x000856c4
   830b4:	00085698 	.word	0x00085698
   830b8:	00085684 	.word	0x00085684
   830bc:	f04f 0200 	mov.w	r2, #0
   830c0:	9907      	ldr	r1, [sp, #28]
   830c2:	9508      	str	r5, [sp, #32]
   830c4:	f8d1 b000 	ldr.w	fp, [r1]
   830c8:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   830cc:	1d0d      	adds	r5, r1, #4
   830ce:	f1bb 0f00 	cmp.w	fp, #0
   830d2:	f000 82e4 	beq.w	8369e <_vfiprintf_r+0xc02>
   830d6:	1c67      	adds	r7, r4, #1
   830d8:	f000 82c3 	beq.w	83662 <_vfiprintf_r+0xbc6>
   830dc:	4622      	mov	r2, r4
   830de:	2100      	movs	r1, #0
   830e0:	4658      	mov	r0, fp
   830e2:	9301      	str	r3, [sp, #4]
   830e4:	f001 fbc6 	bl	84874 <memchr>
   830e8:	9b01      	ldr	r3, [sp, #4]
   830ea:	2800      	cmp	r0, #0
   830ec:	f000 82e8 	beq.w	836c0 <_vfiprintf_r+0xc24>
   830f0:	eba0 020b 	sub.w	r2, r0, fp
   830f4:	9507      	str	r5, [sp, #28]
   830f6:	9205      	str	r2, [sp, #20]
   830f8:	9302      	str	r3, [sp, #8]
   830fa:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   830fe:	2400      	movs	r4, #0
   83100:	e624      	b.n	82d4c <_vfiprintf_r+0x2b0>
   83102:	f898 2000 	ldrb.w	r2, [r8]
   83106:	f108 0701 	add.w	r7, r8, #1
   8310a:	2a2a      	cmp	r2, #42	; 0x2a
   8310c:	f000 82e9 	beq.w	836e2 <_vfiprintf_r+0xc46>
   83110:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   83114:	2909      	cmp	r1, #9
   83116:	46b8      	mov	r8, r7
   83118:	f04f 0400 	mov.w	r4, #0
   8311c:	f63f ad32 	bhi.w	82b84 <_vfiprintf_r+0xe8>
   83120:	f818 2b01 	ldrb.w	r2, [r8], #1
   83124:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   83128:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   8312c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   83130:	2909      	cmp	r1, #9
   83132:	d9f5      	bls.n	83120 <_vfiprintf_r+0x684>
   83134:	e526      	b.n	82b84 <_vfiprintf_r+0xe8>
   83136:	f043 0320 	orr.w	r3, r3, #32
   8313a:	f898 2000 	ldrb.w	r2, [r8]
   8313e:	e51f      	b.n	82b80 <_vfiprintf_r+0xe4>
   83140:	9508      	str	r5, [sp, #32]
   83142:	2800      	cmp	r0, #0
   83144:	f040 82db 	bne.w	836fe <_vfiprintf_r+0xc62>
   83148:	2a00      	cmp	r2, #0
   8314a:	f000 80f1 	beq.w	83330 <_vfiprintf_r+0x894>
   8314e:	2101      	movs	r1, #1
   83150:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   83154:	f04f 0200 	mov.w	r2, #0
   83158:	9101      	str	r1, [sp, #4]
   8315a:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   8315e:	9105      	str	r1, [sp, #20]
   83160:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   83164:	e788      	b.n	83078 <_vfiprintf_r+0x5dc>
   83166:	9a07      	ldr	r2, [sp, #28]
   83168:	6813      	ldr	r3, [r2, #0]
   8316a:	3204      	adds	r2, #4
   8316c:	9207      	str	r2, [sp, #28]
   8316e:	9a03      	ldr	r2, [sp, #12]
   83170:	601a      	str	r2, [r3, #0]
   83172:	e4d0      	b.n	82b16 <_vfiprintf_r+0x7a>
   83174:	aa0f      	add	r2, sp, #60	; 0x3c
   83176:	9904      	ldr	r1, [sp, #16]
   83178:	4620      	mov	r0, r4
   8317a:	f7ff fc4f 	bl	82a1c <__sprint_r.part.0>
   8317e:	2800      	cmp	r0, #0
   83180:	f040 8143 	bne.w	8340a <_vfiprintf_r+0x96e>
   83184:	9910      	ldr	r1, [sp, #64]	; 0x40
   83186:	46d6      	mov	lr, sl
   83188:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8318a:	f101 0c01 	add.w	ip, r1, #1
   8318e:	e60a      	b.n	82da6 <_vfiprintf_r+0x30a>
   83190:	aa0f      	add	r2, sp, #60	; 0x3c
   83192:	9904      	ldr	r1, [sp, #16]
   83194:	9806      	ldr	r0, [sp, #24]
   83196:	f7ff fc41 	bl	82a1c <__sprint_r.part.0>
   8319a:	2800      	cmp	r0, #0
   8319c:	f040 8135 	bne.w	8340a <_vfiprintf_r+0x96e>
   831a0:	46d1      	mov	r9, sl
   831a2:	9910      	ldr	r1, [sp, #64]	; 0x40
   831a4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   831a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   831aa:	1c48      	adds	r0, r1, #1
   831ac:	2d00      	cmp	r5, #0
   831ae:	f43f ae24 	beq.w	82dfa <_vfiprintf_r+0x35e>
   831b2:	2101      	movs	r1, #1
   831b4:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   831b8:	440a      	add	r2, r1
   831ba:	2807      	cmp	r0, #7
   831bc:	9211      	str	r2, [sp, #68]	; 0x44
   831be:	9010      	str	r0, [sp, #64]	; 0x40
   831c0:	f8c9 1004 	str.w	r1, [r9, #4]
   831c4:	f8c9 5000 	str.w	r5, [r9]
   831c8:	f340 8109 	ble.w	833de <_vfiprintf_r+0x942>
   831cc:	2a00      	cmp	r2, #0
   831ce:	f040 81af 	bne.w	83530 <_vfiprintf_r+0xa94>
   831d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   831d4:	2b00      	cmp	r3, #0
   831d6:	f43f ae23 	beq.w	82e20 <_vfiprintf_r+0x384>
   831da:	2202      	movs	r2, #2
   831dc:	4608      	mov	r0, r1
   831de:	46d1      	mov	r9, sl
   831e0:	ab0e      	add	r3, sp, #56	; 0x38
   831e2:	921d      	str	r2, [sp, #116]	; 0x74
   831e4:	931c      	str	r3, [sp, #112]	; 0x70
   831e6:	4601      	mov	r1, r0
   831e8:	f109 0908 	add.w	r9, r9, #8
   831ec:	3001      	adds	r0, #1
   831ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   831f0:	2b80      	cmp	r3, #128	; 0x80
   831f2:	f43f ae1c 	beq.w	82e2e <_vfiprintf_r+0x392>
   831f6:	9b05      	ldr	r3, [sp, #20]
   831f8:	1ae4      	subs	r4, r4, r3
   831fa:	2c00      	cmp	r4, #0
   831fc:	dd2f      	ble.n	8325e <_vfiprintf_r+0x7c2>
   831fe:	2c10      	cmp	r4, #16
   83200:	f340 8220 	ble.w	83644 <_vfiprintf_r+0xba8>
   83204:	46ce      	mov	lr, r9
   83206:	2610      	movs	r6, #16
   83208:	4db2      	ldr	r5, [pc, #712]	; (834d4 <_vfiprintf_r+0xa38>)
   8320a:	9f06      	ldr	r7, [sp, #24]
   8320c:	f8dd 9010 	ldr.w	r9, [sp, #16]
   83210:	e006      	b.n	83220 <_vfiprintf_r+0x784>
   83212:	1c88      	adds	r0, r1, #2
   83214:	4619      	mov	r1, r3
   83216:	f10e 0e08 	add.w	lr, lr, #8
   8321a:	3c10      	subs	r4, #16
   8321c:	2c10      	cmp	r4, #16
   8321e:	dd10      	ble.n	83242 <_vfiprintf_r+0x7a6>
   83220:	1c4b      	adds	r3, r1, #1
   83222:	3210      	adds	r2, #16
   83224:	2b07      	cmp	r3, #7
   83226:	9211      	str	r2, [sp, #68]	; 0x44
   83228:	e88e 0060 	stmia.w	lr, {r5, r6}
   8322c:	9310      	str	r3, [sp, #64]	; 0x40
   8322e:	ddf0      	ble.n	83212 <_vfiprintf_r+0x776>
   83230:	2a00      	cmp	r2, #0
   83232:	d165      	bne.n	83300 <_vfiprintf_r+0x864>
   83234:	3c10      	subs	r4, #16
   83236:	2c10      	cmp	r4, #16
   83238:	f04f 0001 	mov.w	r0, #1
   8323c:	4611      	mov	r1, r2
   8323e:	46d6      	mov	lr, sl
   83240:	dcee      	bgt.n	83220 <_vfiprintf_r+0x784>
   83242:	46f1      	mov	r9, lr
   83244:	4422      	add	r2, r4
   83246:	2807      	cmp	r0, #7
   83248:	9211      	str	r2, [sp, #68]	; 0x44
   8324a:	f8c9 5000 	str.w	r5, [r9]
   8324e:	f8c9 4004 	str.w	r4, [r9, #4]
   83252:	9010      	str	r0, [sp, #64]	; 0x40
   83254:	f300 8085 	bgt.w	83362 <_vfiprintf_r+0x8c6>
   83258:	f109 0908 	add.w	r9, r9, #8
   8325c:	3001      	adds	r0, #1
   8325e:	9905      	ldr	r1, [sp, #20]
   83260:	2807      	cmp	r0, #7
   83262:	440a      	add	r2, r1
   83264:	9211      	str	r2, [sp, #68]	; 0x44
   83266:	f8c9 b000 	str.w	fp, [r9]
   8326a:	f8c9 1004 	str.w	r1, [r9, #4]
   8326e:	9010      	str	r0, [sp, #64]	; 0x40
   83270:	f340 8082 	ble.w	83378 <_vfiprintf_r+0x8dc>
   83274:	2a00      	cmp	r2, #0
   83276:	f040 8118 	bne.w	834aa <_vfiprintf_r+0xa0e>
   8327a:	9b02      	ldr	r3, [sp, #8]
   8327c:	9210      	str	r2, [sp, #64]	; 0x40
   8327e:	0758      	lsls	r0, r3, #29
   83280:	d535      	bpl.n	832ee <_vfiprintf_r+0x852>
   83282:	9b08      	ldr	r3, [sp, #32]
   83284:	9901      	ldr	r1, [sp, #4]
   83286:	1a5c      	subs	r4, r3, r1
   83288:	2c00      	cmp	r4, #0
   8328a:	f340 80e7 	ble.w	8345c <_vfiprintf_r+0x9c0>
   8328e:	46d1      	mov	r9, sl
   83290:	2c10      	cmp	r4, #16
   83292:	f340 820d 	ble.w	836b0 <_vfiprintf_r+0xc14>
   83296:	2510      	movs	r5, #16
   83298:	9910      	ldr	r1, [sp, #64]	; 0x40
   8329a:	4e8f      	ldr	r6, [pc, #572]	; (834d8 <_vfiprintf_r+0xa3c>)
   8329c:	9f06      	ldr	r7, [sp, #24]
   8329e:	f8dd b010 	ldr.w	fp, [sp, #16]
   832a2:	e006      	b.n	832b2 <_vfiprintf_r+0x816>
   832a4:	1c88      	adds	r0, r1, #2
   832a6:	4619      	mov	r1, r3
   832a8:	f109 0908 	add.w	r9, r9, #8
   832ac:	3c10      	subs	r4, #16
   832ae:	2c10      	cmp	r4, #16
   832b0:	dd11      	ble.n	832d6 <_vfiprintf_r+0x83a>
   832b2:	1c4b      	adds	r3, r1, #1
   832b4:	3210      	adds	r2, #16
   832b6:	2b07      	cmp	r3, #7
   832b8:	9211      	str	r2, [sp, #68]	; 0x44
   832ba:	f8c9 6000 	str.w	r6, [r9]
   832be:	f8c9 5004 	str.w	r5, [r9, #4]
   832c2:	9310      	str	r3, [sp, #64]	; 0x40
   832c4:	ddee      	ble.n	832a4 <_vfiprintf_r+0x808>
   832c6:	bb42      	cbnz	r2, 8331a <_vfiprintf_r+0x87e>
   832c8:	3c10      	subs	r4, #16
   832ca:	2c10      	cmp	r4, #16
   832cc:	f04f 0001 	mov.w	r0, #1
   832d0:	4611      	mov	r1, r2
   832d2:	46d1      	mov	r9, sl
   832d4:	dced      	bgt.n	832b2 <_vfiprintf_r+0x816>
   832d6:	4422      	add	r2, r4
   832d8:	2807      	cmp	r0, #7
   832da:	9211      	str	r2, [sp, #68]	; 0x44
   832dc:	f8c9 6000 	str.w	r6, [r9]
   832e0:	f8c9 4004 	str.w	r4, [r9, #4]
   832e4:	9010      	str	r0, [sp, #64]	; 0x40
   832e6:	dd51      	ble.n	8338c <_vfiprintf_r+0x8f0>
   832e8:	2a00      	cmp	r2, #0
   832ea:	f040 819a 	bne.w	83622 <_vfiprintf_r+0xb86>
   832ee:	9b03      	ldr	r3, [sp, #12]
   832f0:	9a08      	ldr	r2, [sp, #32]
   832f2:	9901      	ldr	r1, [sp, #4]
   832f4:	428a      	cmp	r2, r1
   832f6:	bfac      	ite	ge
   832f8:	189b      	addge	r3, r3, r2
   832fa:	185b      	addlt	r3, r3, r1
   832fc:	9303      	str	r3, [sp, #12]
   832fe:	e04e      	b.n	8339e <_vfiprintf_r+0x902>
   83300:	aa0f      	add	r2, sp, #60	; 0x3c
   83302:	4649      	mov	r1, r9
   83304:	4638      	mov	r0, r7
   83306:	f7ff fb89 	bl	82a1c <__sprint_r.part.0>
   8330a:	2800      	cmp	r0, #0
   8330c:	f040 813e 	bne.w	8358c <_vfiprintf_r+0xaf0>
   83310:	9910      	ldr	r1, [sp, #64]	; 0x40
   83312:	46d6      	mov	lr, sl
   83314:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83316:	1c48      	adds	r0, r1, #1
   83318:	e77f      	b.n	8321a <_vfiprintf_r+0x77e>
   8331a:	aa0f      	add	r2, sp, #60	; 0x3c
   8331c:	4659      	mov	r1, fp
   8331e:	4638      	mov	r0, r7
   83320:	f7ff fb7c 	bl	82a1c <__sprint_r.part.0>
   83324:	b960      	cbnz	r0, 83340 <_vfiprintf_r+0x8a4>
   83326:	9910      	ldr	r1, [sp, #64]	; 0x40
   83328:	46d1      	mov	r9, sl
   8332a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8332c:	1c48      	adds	r0, r1, #1
   8332e:	e7bd      	b.n	832ac <_vfiprintf_r+0x810>
   83330:	9b11      	ldr	r3, [sp, #68]	; 0x44
   83332:	f8dd b010 	ldr.w	fp, [sp, #16]
   83336:	2b00      	cmp	r3, #0
   83338:	f040 81ca 	bne.w	836d0 <_vfiprintf_r+0xc34>
   8333c:	2300      	movs	r3, #0
   8333e:	9310      	str	r3, [sp, #64]	; 0x40
   83340:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   83344:	f013 0f01 	tst.w	r3, #1
   83348:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   8334c:	d102      	bne.n	83354 <_vfiprintf_r+0x8b8>
   8334e:	059a      	lsls	r2, r3, #22
   83350:	f140 80dd 	bpl.w	8350e <_vfiprintf_r+0xa72>
   83354:	065b      	lsls	r3, r3, #25
   83356:	f53f acad 	bmi.w	82cb4 <_vfiprintf_r+0x218>
   8335a:	9803      	ldr	r0, [sp, #12]
   8335c:	b02d      	add	sp, #180	; 0xb4
   8335e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83362:	2a00      	cmp	r2, #0
   83364:	f040 8105 	bne.w	83572 <_vfiprintf_r+0xad6>
   83368:	2301      	movs	r3, #1
   8336a:	46d1      	mov	r9, sl
   8336c:	9a05      	ldr	r2, [sp, #20]
   8336e:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   83372:	921d      	str	r2, [sp, #116]	; 0x74
   83374:	9211      	str	r2, [sp, #68]	; 0x44
   83376:	9310      	str	r3, [sp, #64]	; 0x40
   83378:	f109 0908 	add.w	r9, r9, #8
   8337c:	9b02      	ldr	r3, [sp, #8]
   8337e:	0759      	lsls	r1, r3, #29
   83380:	d504      	bpl.n	8338c <_vfiprintf_r+0x8f0>
   83382:	9b08      	ldr	r3, [sp, #32]
   83384:	9901      	ldr	r1, [sp, #4]
   83386:	1a5c      	subs	r4, r3, r1
   83388:	2c00      	cmp	r4, #0
   8338a:	dc81      	bgt.n	83290 <_vfiprintf_r+0x7f4>
   8338c:	9b03      	ldr	r3, [sp, #12]
   8338e:	9908      	ldr	r1, [sp, #32]
   83390:	9801      	ldr	r0, [sp, #4]
   83392:	4281      	cmp	r1, r0
   83394:	bfac      	ite	ge
   83396:	185b      	addge	r3, r3, r1
   83398:	181b      	addlt	r3, r3, r0
   8339a:	9303      	str	r3, [sp, #12]
   8339c:	bb72      	cbnz	r2, 833fc <_vfiprintf_r+0x960>
   8339e:	2300      	movs	r3, #0
   833a0:	46d1      	mov	r9, sl
   833a2:	9310      	str	r3, [sp, #64]	; 0x40
   833a4:	f7ff bbb7 	b.w	82b16 <_vfiprintf_r+0x7a>
   833a8:	aa0f      	add	r2, sp, #60	; 0x3c
   833aa:	9904      	ldr	r1, [sp, #16]
   833ac:	4620      	mov	r0, r4
   833ae:	f7ff fb35 	bl	82a1c <__sprint_r.part.0>
   833b2:	bb50      	cbnz	r0, 8340a <_vfiprintf_r+0x96e>
   833b4:	9910      	ldr	r1, [sp, #64]	; 0x40
   833b6:	46d4      	mov	ip, sl
   833b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   833ba:	f101 0e01 	add.w	lr, r1, #1
   833be:	e54a      	b.n	82e56 <_vfiprintf_r+0x3ba>
   833c0:	2a00      	cmp	r2, #0
   833c2:	f47f aee5 	bne.w	83190 <_vfiprintf_r+0x6f4>
   833c6:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   833ca:	2900      	cmp	r1, #0
   833cc:	f000 811a 	beq.w	83604 <_vfiprintf_r+0xb68>
   833d0:	2201      	movs	r2, #1
   833d2:	46d1      	mov	r9, sl
   833d4:	4610      	mov	r0, r2
   833d6:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   833da:	921d      	str	r2, [sp, #116]	; 0x74
   833dc:	911c      	str	r1, [sp, #112]	; 0x70
   833de:	4601      	mov	r1, r0
   833e0:	f109 0908 	add.w	r9, r9, #8
   833e4:	3001      	adds	r0, #1
   833e6:	e508      	b.n	82dfa <_vfiprintf_r+0x35e>
   833e8:	9b02      	ldr	r3, [sp, #8]
   833ea:	2a01      	cmp	r2, #1
   833ec:	f000 8097 	beq.w	8351e <_vfiprintf_r+0xa82>
   833f0:	2a02      	cmp	r2, #2
   833f2:	d10d      	bne.n	83410 <_vfiprintf_r+0x974>
   833f4:	9302      	str	r3, [sp, #8]
   833f6:	2600      	movs	r6, #0
   833f8:	2700      	movs	r7, #0
   833fa:	e5b2      	b.n	82f62 <_vfiprintf_r+0x4c6>
   833fc:	aa0f      	add	r2, sp, #60	; 0x3c
   833fe:	9904      	ldr	r1, [sp, #16]
   83400:	9806      	ldr	r0, [sp, #24]
   83402:	f7ff fb0b 	bl	82a1c <__sprint_r.part.0>
   83406:	2800      	cmp	r0, #0
   83408:	d0c9      	beq.n	8339e <_vfiprintf_r+0x902>
   8340a:	f8dd b010 	ldr.w	fp, [sp, #16]
   8340e:	e797      	b.n	83340 <_vfiprintf_r+0x8a4>
   83410:	2600      	movs	r6, #0
   83412:	2700      	movs	r7, #0
   83414:	9302      	str	r3, [sp, #8]
   83416:	4651      	mov	r1, sl
   83418:	e000      	b.n	8341c <_vfiprintf_r+0x980>
   8341a:	4659      	mov	r1, fp
   8341c:	08f2      	lsrs	r2, r6, #3
   8341e:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   83422:	08f8      	lsrs	r0, r7, #3
   83424:	f006 0307 	and.w	r3, r6, #7
   83428:	4607      	mov	r7, r0
   8342a:	4616      	mov	r6, r2
   8342c:	3330      	adds	r3, #48	; 0x30
   8342e:	ea56 0207 	orrs.w	r2, r6, r7
   83432:	f801 3c01 	strb.w	r3, [r1, #-1]
   83436:	f101 3bff 	add.w	fp, r1, #4294967295
   8343a:	d1ee      	bne.n	8341a <_vfiprintf_r+0x97e>
   8343c:	9a02      	ldr	r2, [sp, #8]
   8343e:	07d6      	lsls	r6, r2, #31
   83440:	f57f ad9f 	bpl.w	82f82 <_vfiprintf_r+0x4e6>
   83444:	2b30      	cmp	r3, #48	; 0x30
   83446:	f43f ad9c 	beq.w	82f82 <_vfiprintf_r+0x4e6>
   8344a:	2330      	movs	r3, #48	; 0x30
   8344c:	3902      	subs	r1, #2
   8344e:	f80b 3c01 	strb.w	r3, [fp, #-1]
   83452:	ebaa 0301 	sub.w	r3, sl, r1
   83456:	9305      	str	r3, [sp, #20]
   83458:	468b      	mov	fp, r1
   8345a:	e477      	b.n	82d4c <_vfiprintf_r+0x2b0>
   8345c:	9b03      	ldr	r3, [sp, #12]
   8345e:	9a08      	ldr	r2, [sp, #32]
   83460:	428a      	cmp	r2, r1
   83462:	bfac      	ite	ge
   83464:	189b      	addge	r3, r3, r2
   83466:	185b      	addlt	r3, r3, r1
   83468:	9303      	str	r3, [sp, #12]
   8346a:	e798      	b.n	8339e <_vfiprintf_r+0x902>
   8346c:	2202      	movs	r2, #2
   8346e:	e44e      	b.n	82d0e <_vfiprintf_r+0x272>
   83470:	2f00      	cmp	r7, #0
   83472:	bf08      	it	eq
   83474:	2e0a      	cmpeq	r6, #10
   83476:	d351      	bcc.n	8351c <_vfiprintf_r+0xa80>
   83478:	46d3      	mov	fp, sl
   8347a:	4630      	mov	r0, r6
   8347c:	4639      	mov	r1, r7
   8347e:	220a      	movs	r2, #10
   83480:	2300      	movs	r3, #0
   83482:	f001 fefb 	bl	8527c <__aeabi_uldivmod>
   83486:	3230      	adds	r2, #48	; 0x30
   83488:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   8348c:	4630      	mov	r0, r6
   8348e:	4639      	mov	r1, r7
   83490:	2300      	movs	r3, #0
   83492:	220a      	movs	r2, #10
   83494:	f001 fef2 	bl	8527c <__aeabi_uldivmod>
   83498:	4606      	mov	r6, r0
   8349a:	460f      	mov	r7, r1
   8349c:	ea56 0307 	orrs.w	r3, r6, r7
   834a0:	d1eb      	bne.n	8347a <_vfiprintf_r+0x9de>
   834a2:	e56e      	b.n	82f82 <_vfiprintf_r+0x4e6>
   834a4:	9405      	str	r4, [sp, #20]
   834a6:	46d3      	mov	fp, sl
   834a8:	e450      	b.n	82d4c <_vfiprintf_r+0x2b0>
   834aa:	aa0f      	add	r2, sp, #60	; 0x3c
   834ac:	9904      	ldr	r1, [sp, #16]
   834ae:	9806      	ldr	r0, [sp, #24]
   834b0:	f7ff fab4 	bl	82a1c <__sprint_r.part.0>
   834b4:	2800      	cmp	r0, #0
   834b6:	d1a8      	bne.n	8340a <_vfiprintf_r+0x96e>
   834b8:	46d1      	mov	r9, sl
   834ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
   834bc:	e75e      	b.n	8337c <_vfiprintf_r+0x8e0>
   834be:	aa0f      	add	r2, sp, #60	; 0x3c
   834c0:	9904      	ldr	r1, [sp, #16]
   834c2:	9806      	ldr	r0, [sp, #24]
   834c4:	f7ff faaa 	bl	82a1c <__sprint_r.part.0>
   834c8:	2800      	cmp	r0, #0
   834ca:	d19e      	bne.n	8340a <_vfiprintf_r+0x96e>
   834cc:	46d1      	mov	r9, sl
   834ce:	f7ff bbbb 	b.w	82c48 <_vfiprintf_r+0x1ac>
   834d2:	bf00      	nop
   834d4:	000856c4 	.word	0x000856c4
   834d8:	000856b4 	.word	0x000856b4
   834dc:	3104      	adds	r1, #4
   834de:	6816      	ldr	r6, [r2, #0]
   834e0:	2700      	movs	r7, #0
   834e2:	2201      	movs	r2, #1
   834e4:	9107      	str	r1, [sp, #28]
   834e6:	e412      	b.n	82d0e <_vfiprintf_r+0x272>
   834e8:	9807      	ldr	r0, [sp, #28]
   834ea:	2700      	movs	r7, #0
   834ec:	4601      	mov	r1, r0
   834ee:	3104      	adds	r1, #4
   834f0:	6806      	ldr	r6, [r0, #0]
   834f2:	9107      	str	r1, [sp, #28]
   834f4:	e40b      	b.n	82d0e <_vfiprintf_r+0x272>
   834f6:	680e      	ldr	r6, [r1, #0]
   834f8:	3104      	adds	r1, #4
   834fa:	9107      	str	r1, [sp, #28]
   834fc:	2700      	movs	r7, #0
   834fe:	e592      	b.n	83026 <_vfiprintf_r+0x58a>
   83500:	6816      	ldr	r6, [r2, #0]
   83502:	3204      	adds	r2, #4
   83504:	17f7      	asrs	r7, r6, #31
   83506:	9207      	str	r2, [sp, #28]
   83508:	4630      	mov	r0, r6
   8350a:	4639      	mov	r1, r7
   8350c:	e512      	b.n	82f34 <_vfiprintf_r+0x498>
   8350e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   83512:	f000 fe75 	bl	84200 <__retarget_lock_release_recursive>
   83516:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   8351a:	e71b      	b.n	83354 <_vfiprintf_r+0x8b8>
   8351c:	9b02      	ldr	r3, [sp, #8]
   8351e:	9302      	str	r3, [sp, #8]
   83520:	2301      	movs	r3, #1
   83522:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   83526:	3630      	adds	r6, #48	; 0x30
   83528:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   8352c:	9305      	str	r3, [sp, #20]
   8352e:	e40d      	b.n	82d4c <_vfiprintf_r+0x2b0>
   83530:	aa0f      	add	r2, sp, #60	; 0x3c
   83532:	9904      	ldr	r1, [sp, #16]
   83534:	9806      	ldr	r0, [sp, #24]
   83536:	f7ff fa71 	bl	82a1c <__sprint_r.part.0>
   8353a:	2800      	cmp	r0, #0
   8353c:	f47f af65 	bne.w	8340a <_vfiprintf_r+0x96e>
   83540:	9910      	ldr	r1, [sp, #64]	; 0x40
   83542:	46d1      	mov	r9, sl
   83544:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83546:	1c48      	adds	r0, r1, #1
   83548:	e457      	b.n	82dfa <_vfiprintf_r+0x35e>
   8354a:	aa0f      	add	r2, sp, #60	; 0x3c
   8354c:	9904      	ldr	r1, [sp, #16]
   8354e:	9806      	ldr	r0, [sp, #24]
   83550:	f7ff fa64 	bl	82a1c <__sprint_r.part.0>
   83554:	2800      	cmp	r0, #0
   83556:	f47f af58 	bne.w	8340a <_vfiprintf_r+0x96e>
   8355a:	9910      	ldr	r1, [sp, #64]	; 0x40
   8355c:	46d1      	mov	r9, sl
   8355e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83560:	1c48      	adds	r0, r1, #1
   83562:	e644      	b.n	831ee <_vfiprintf_r+0x752>
   83564:	2a00      	cmp	r2, #0
   83566:	f040 8087 	bne.w	83678 <_vfiprintf_r+0xbdc>
   8356a:	2001      	movs	r0, #1
   8356c:	4611      	mov	r1, r2
   8356e:	46d1      	mov	r9, sl
   83570:	e641      	b.n	831f6 <_vfiprintf_r+0x75a>
   83572:	aa0f      	add	r2, sp, #60	; 0x3c
   83574:	9904      	ldr	r1, [sp, #16]
   83576:	9806      	ldr	r0, [sp, #24]
   83578:	f7ff fa50 	bl	82a1c <__sprint_r.part.0>
   8357c:	2800      	cmp	r0, #0
   8357e:	f47f af44 	bne.w	8340a <_vfiprintf_r+0x96e>
   83582:	9810      	ldr	r0, [sp, #64]	; 0x40
   83584:	46d1      	mov	r9, sl
   83586:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83588:	3001      	adds	r0, #1
   8358a:	e668      	b.n	8325e <_vfiprintf_r+0x7c2>
   8358c:	46cb      	mov	fp, r9
   8358e:	e6d7      	b.n	83340 <_vfiprintf_r+0x8a4>
   83590:	9d07      	ldr	r5, [sp, #28]
   83592:	3507      	adds	r5, #7
   83594:	f025 0507 	bic.w	r5, r5, #7
   83598:	f105 0208 	add.w	r2, r5, #8
   8359c:	e9d5 0100 	ldrd	r0, r1, [r5]
   835a0:	9207      	str	r2, [sp, #28]
   835a2:	4606      	mov	r6, r0
   835a4:	460f      	mov	r7, r1
   835a6:	e4c5      	b.n	82f34 <_vfiprintf_r+0x498>
   835a8:	9d07      	ldr	r5, [sp, #28]
   835aa:	3507      	adds	r5, #7
   835ac:	f025 0207 	bic.w	r2, r5, #7
   835b0:	f102 0108 	add.w	r1, r2, #8
   835b4:	e9d2 6700 	ldrd	r6, r7, [r2]
   835b8:	9107      	str	r1, [sp, #28]
   835ba:	2201      	movs	r2, #1
   835bc:	f7ff bba7 	b.w	82d0e <_vfiprintf_r+0x272>
   835c0:	9d07      	ldr	r5, [sp, #28]
   835c2:	3507      	adds	r5, #7
   835c4:	f025 0207 	bic.w	r2, r5, #7
   835c8:	f102 0108 	add.w	r1, r2, #8
   835cc:	e9d2 6700 	ldrd	r6, r7, [r2]
   835d0:	9107      	str	r1, [sp, #28]
   835d2:	2200      	movs	r2, #0
   835d4:	f7ff bb9b 	b.w	82d0e <_vfiprintf_r+0x272>
   835d8:	9d07      	ldr	r5, [sp, #28]
   835da:	3507      	adds	r5, #7
   835dc:	f025 0107 	bic.w	r1, r5, #7
   835e0:	f101 0008 	add.w	r0, r1, #8
   835e4:	9007      	str	r0, [sp, #28]
   835e6:	e9d1 6700 	ldrd	r6, r7, [r1]
   835ea:	e51c      	b.n	83026 <_vfiprintf_r+0x58a>
   835ec:	46d3      	mov	fp, sl
   835ee:	f7ff bbad 	b.w	82d4c <_vfiprintf_r+0x2b0>
   835f2:	252d      	movs	r5, #45	; 0x2d
   835f4:	4276      	negs	r6, r6
   835f6:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   835fa:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   835fe:	2201      	movs	r2, #1
   83600:	f7ff bb8a 	b.w	82d18 <_vfiprintf_r+0x27c>
   83604:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83606:	b9b3      	cbnz	r3, 83636 <_vfiprintf_r+0xb9a>
   83608:	4611      	mov	r1, r2
   8360a:	2001      	movs	r0, #1
   8360c:	46d1      	mov	r9, sl
   8360e:	e5f2      	b.n	831f6 <_vfiprintf_r+0x75a>
   83610:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   83614:	f000 fdf4 	bl	84200 <__retarget_lock_release_recursive>
   83618:	f04f 33ff 	mov.w	r3, #4294967295
   8361c:	9303      	str	r3, [sp, #12]
   8361e:	f7ff bb4c 	b.w	82cba <_vfiprintf_r+0x21e>
   83622:	aa0f      	add	r2, sp, #60	; 0x3c
   83624:	9904      	ldr	r1, [sp, #16]
   83626:	9806      	ldr	r0, [sp, #24]
   83628:	f7ff f9f8 	bl	82a1c <__sprint_r.part.0>
   8362c:	2800      	cmp	r0, #0
   8362e:	f47f aeec 	bne.w	8340a <_vfiprintf_r+0x96e>
   83632:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83634:	e6aa      	b.n	8338c <_vfiprintf_r+0x8f0>
   83636:	2202      	movs	r2, #2
   83638:	ab0e      	add	r3, sp, #56	; 0x38
   8363a:	921d      	str	r2, [sp, #116]	; 0x74
   8363c:	931c      	str	r3, [sp, #112]	; 0x70
   8363e:	2001      	movs	r0, #1
   83640:	46d1      	mov	r9, sl
   83642:	e5d0      	b.n	831e6 <_vfiprintf_r+0x74a>
   83644:	4d34      	ldr	r5, [pc, #208]	; (83718 <_vfiprintf_r+0xc7c>)
   83646:	e5fd      	b.n	83244 <_vfiprintf_r+0x7a8>
   83648:	9a07      	ldr	r2, [sp, #28]
   8364a:	4613      	mov	r3, r2
   8364c:	3304      	adds	r3, #4
   8364e:	9307      	str	r3, [sp, #28]
   83650:	9b03      	ldr	r3, [sp, #12]
   83652:	6811      	ldr	r1, [r2, #0]
   83654:	17dd      	asrs	r5, r3, #31
   83656:	461a      	mov	r2, r3
   83658:	462b      	mov	r3, r5
   8365a:	e9c1 2300 	strd	r2, r3, [r1]
   8365e:	f7ff ba5a 	b.w	82b16 <_vfiprintf_r+0x7a>
   83662:	4658      	mov	r0, fp
   83664:	9507      	str	r5, [sp, #28]
   83666:	9302      	str	r3, [sp, #8]
   83668:	f7ff f9aa 	bl	829c0 <strlen>
   8366c:	2400      	movs	r4, #0
   8366e:	9005      	str	r0, [sp, #20]
   83670:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   83674:	f7ff bb6a 	b.w	82d4c <_vfiprintf_r+0x2b0>
   83678:	aa0f      	add	r2, sp, #60	; 0x3c
   8367a:	9904      	ldr	r1, [sp, #16]
   8367c:	9806      	ldr	r0, [sp, #24]
   8367e:	f7ff f9cd 	bl	82a1c <__sprint_r.part.0>
   83682:	2800      	cmp	r0, #0
   83684:	f47f aec1 	bne.w	8340a <_vfiprintf_r+0x96e>
   83688:	9910      	ldr	r1, [sp, #64]	; 0x40
   8368a:	46d1      	mov	r9, sl
   8368c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8368e:	1c48      	adds	r0, r1, #1
   83690:	e5b1      	b.n	831f6 <_vfiprintf_r+0x75a>
   83692:	9910      	ldr	r1, [sp, #64]	; 0x40
   83694:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83696:	3101      	adds	r1, #1
   83698:	4e20      	ldr	r6, [pc, #128]	; (8371c <_vfiprintf_r+0xc80>)
   8369a:	f7ff bb9c 	b.w	82dd6 <_vfiprintf_r+0x33a>
   8369e:	2c06      	cmp	r4, #6
   836a0:	bf28      	it	cs
   836a2:	2406      	movcs	r4, #6
   836a4:	9507      	str	r5, [sp, #28]
   836a6:	9405      	str	r4, [sp, #20]
   836a8:	9401      	str	r4, [sp, #4]
   836aa:	f8df b074 	ldr.w	fp, [pc, #116]	; 83720 <_vfiprintf_r+0xc84>
   836ae:	e4e3      	b.n	83078 <_vfiprintf_r+0x5dc>
   836b0:	9810      	ldr	r0, [sp, #64]	; 0x40
   836b2:	4e1a      	ldr	r6, [pc, #104]	; (8371c <_vfiprintf_r+0xc80>)
   836b4:	3001      	adds	r0, #1
   836b6:	e60e      	b.n	832d6 <_vfiprintf_r+0x83a>
   836b8:	4686      	mov	lr, r0
   836ba:	4d17      	ldr	r5, [pc, #92]	; (83718 <_vfiprintf_r+0xc7c>)
   836bc:	f7ff bbe2 	b.w	82e84 <_vfiprintf_r+0x3e8>
   836c0:	9405      	str	r4, [sp, #20]
   836c2:	9507      	str	r5, [sp, #28]
   836c4:	9302      	str	r3, [sp, #8]
   836c6:	4604      	mov	r4, r0
   836c8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   836cc:	f7ff bb3e 	b.w	82d4c <_vfiprintf_r+0x2b0>
   836d0:	9806      	ldr	r0, [sp, #24]
   836d2:	aa0f      	add	r2, sp, #60	; 0x3c
   836d4:	4659      	mov	r1, fp
   836d6:	f7ff f9a1 	bl	82a1c <__sprint_r.part.0>
   836da:	2800      	cmp	r0, #0
   836dc:	f43f ae2e 	beq.w	8333c <_vfiprintf_r+0x8a0>
   836e0:	e62e      	b.n	83340 <_vfiprintf_r+0x8a4>
   836e2:	9907      	ldr	r1, [sp, #28]
   836e4:	f898 2001 	ldrb.w	r2, [r8, #1]
   836e8:	680c      	ldr	r4, [r1, #0]
   836ea:	3104      	adds	r1, #4
   836ec:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   836f0:	46b8      	mov	r8, r7
   836f2:	9107      	str	r1, [sp, #28]
   836f4:	f7ff ba44 	b.w	82b80 <_vfiprintf_r+0xe4>
   836f8:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   836fc:	e4a7      	b.n	8304e <_vfiprintf_r+0x5b2>
   836fe:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83702:	e521      	b.n	83148 <_vfiprintf_r+0x6ac>
   83704:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83708:	e47c      	b.n	83004 <_vfiprintf_r+0x568>
   8370a:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8370e:	e43f      	b.n	82f90 <_vfiprintf_r+0x4f4>
   83710:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83714:	f7ff bbfa 	b.w	82f0c <_vfiprintf_r+0x470>
   83718:	000856c4 	.word	0x000856c4
   8371c:	000856b4 	.word	0x000856b4
   83720:	000856ac 	.word	0x000856ac

00083724 <__sbprintf>:
   83724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83728:	460c      	mov	r4, r1
   8372a:	f04f 0e00 	mov.w	lr, #0
   8372e:	f44f 6580 	mov.w	r5, #1024	; 0x400
   83732:	4606      	mov	r6, r0
   83734:	4617      	mov	r7, r2
   83736:	4698      	mov	r8, r3
   83738:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8373a:	89e3      	ldrh	r3, [r4, #14]
   8373c:	8989      	ldrh	r1, [r1, #12]
   8373e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   83742:	f021 0102 	bic.w	r1, r1, #2
   83746:	9219      	str	r2, [sp, #100]	; 0x64
   83748:	f8ad 300e 	strh.w	r3, [sp, #14]
   8374c:	69e2      	ldr	r2, [r4, #28]
   8374e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   83750:	f8ad 100c 	strh.w	r1, [sp, #12]
   83754:	a816      	add	r0, sp, #88	; 0x58
   83756:	a91a      	add	r1, sp, #104	; 0x68
   83758:	f8cd e018 	str.w	lr, [sp, #24]
   8375c:	9207      	str	r2, [sp, #28]
   8375e:	9309      	str	r3, [sp, #36]	; 0x24
   83760:	9100      	str	r1, [sp, #0]
   83762:	9104      	str	r1, [sp, #16]
   83764:	9502      	str	r5, [sp, #8]
   83766:	9505      	str	r5, [sp, #20]
   83768:	f000 fd44 	bl	841f4 <__retarget_lock_init_recursive>
   8376c:	4643      	mov	r3, r8
   8376e:	463a      	mov	r2, r7
   83770:	4669      	mov	r1, sp
   83772:	4630      	mov	r0, r6
   83774:	f7ff f992 	bl	82a9c <_vfiprintf_r>
   83778:	1e05      	subs	r5, r0, #0
   8377a:	db07      	blt.n	8378c <__sbprintf+0x68>
   8377c:	4630      	mov	r0, r6
   8377e:	4669      	mov	r1, sp
   83780:	f000 f924 	bl	839cc <_fflush_r>
   83784:	2800      	cmp	r0, #0
   83786:	bf18      	it	ne
   83788:	f04f 35ff 	movne.w	r5, #4294967295
   8378c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   83790:	065b      	lsls	r3, r3, #25
   83792:	d503      	bpl.n	8379c <__sbprintf+0x78>
   83794:	89a3      	ldrh	r3, [r4, #12]
   83796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8379a:	81a3      	strh	r3, [r4, #12]
   8379c:	9816      	ldr	r0, [sp, #88]	; 0x58
   8379e:	f000 fd2b 	bl	841f8 <__retarget_lock_close_recursive>
   837a2:	4628      	mov	r0, r5
   837a4:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   837a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000837ac <__swsetup_r>:
   837ac:	b538      	push	{r3, r4, r5, lr}
   837ae:	4b30      	ldr	r3, [pc, #192]	; (83870 <__swsetup_r+0xc4>)
   837b0:	4605      	mov	r5, r0
   837b2:	6818      	ldr	r0, [r3, #0]
   837b4:	460c      	mov	r4, r1
   837b6:	b110      	cbz	r0, 837be <__swsetup_r+0x12>
   837b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   837ba:	2b00      	cmp	r3, #0
   837bc:	d038      	beq.n	83830 <__swsetup_r+0x84>
   837be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   837c2:	b293      	uxth	r3, r2
   837c4:	0718      	lsls	r0, r3, #28
   837c6:	d50c      	bpl.n	837e2 <__swsetup_r+0x36>
   837c8:	6920      	ldr	r0, [r4, #16]
   837ca:	b1a8      	cbz	r0, 837f8 <__swsetup_r+0x4c>
   837cc:	f013 0201 	ands.w	r2, r3, #1
   837d0:	d01e      	beq.n	83810 <__swsetup_r+0x64>
   837d2:	2200      	movs	r2, #0
   837d4:	6963      	ldr	r3, [r4, #20]
   837d6:	60a2      	str	r2, [r4, #8]
   837d8:	425b      	negs	r3, r3
   837da:	61a3      	str	r3, [r4, #24]
   837dc:	b1f0      	cbz	r0, 8381c <__swsetup_r+0x70>
   837de:	2000      	movs	r0, #0
   837e0:	bd38      	pop	{r3, r4, r5, pc}
   837e2:	06d9      	lsls	r1, r3, #27
   837e4:	d53b      	bpl.n	8385e <__swsetup_r+0xb2>
   837e6:	0758      	lsls	r0, r3, #29
   837e8:	d425      	bmi.n	83836 <__swsetup_r+0x8a>
   837ea:	6920      	ldr	r0, [r4, #16]
   837ec:	f042 0308 	orr.w	r3, r2, #8
   837f0:	81a3      	strh	r3, [r4, #12]
   837f2:	b29b      	uxth	r3, r3
   837f4:	2800      	cmp	r0, #0
   837f6:	d1e9      	bne.n	837cc <__swsetup_r+0x20>
   837f8:	f403 7220 	and.w	r2, r3, #640	; 0x280
   837fc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   83800:	d0e4      	beq.n	837cc <__swsetup_r+0x20>
   83802:	4628      	mov	r0, r5
   83804:	4621      	mov	r1, r4
   83806:	f000 fd2b 	bl	84260 <__smakebuf_r>
   8380a:	89a3      	ldrh	r3, [r4, #12]
   8380c:	6920      	ldr	r0, [r4, #16]
   8380e:	e7dd      	b.n	837cc <__swsetup_r+0x20>
   83810:	0799      	lsls	r1, r3, #30
   83812:	bf58      	it	pl
   83814:	6962      	ldrpl	r2, [r4, #20]
   83816:	60a2      	str	r2, [r4, #8]
   83818:	2800      	cmp	r0, #0
   8381a:	d1e0      	bne.n	837de <__swsetup_r+0x32>
   8381c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83820:	061a      	lsls	r2, r3, #24
   83822:	d5dd      	bpl.n	837e0 <__swsetup_r+0x34>
   83824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83828:	81a3      	strh	r3, [r4, #12]
   8382a:	f04f 30ff 	mov.w	r0, #4294967295
   8382e:	bd38      	pop	{r3, r4, r5, pc}
   83830:	f000 f924 	bl	83a7c <__sinit>
   83834:	e7c3      	b.n	837be <__swsetup_r+0x12>
   83836:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83838:	b151      	cbz	r1, 83850 <__swsetup_r+0xa4>
   8383a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8383e:	4299      	cmp	r1, r3
   83840:	d004      	beq.n	8384c <__swsetup_r+0xa0>
   83842:	4628      	mov	r0, r5
   83844:	f000 fa40 	bl	83cc8 <_free_r>
   83848:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8384c:	2300      	movs	r3, #0
   8384e:	6323      	str	r3, [r4, #48]	; 0x30
   83850:	2300      	movs	r3, #0
   83852:	6920      	ldr	r0, [r4, #16]
   83854:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   83858:	e884 0009 	stmia.w	r4, {r0, r3}
   8385c:	e7c6      	b.n	837ec <__swsetup_r+0x40>
   8385e:	2309      	movs	r3, #9
   83860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   83864:	602b      	str	r3, [r5, #0]
   83866:	f04f 30ff 	mov.w	r0, #4294967295
   8386a:	81a2      	strh	r2, [r4, #12]
   8386c:	bd38      	pop	{r3, r4, r5, pc}
   8386e:	bf00      	nop
   83870:	20070160 	.word	0x20070160

00083874 <register_fini>:
   83874:	4b02      	ldr	r3, [pc, #8]	; (83880 <register_fini+0xc>)
   83876:	b113      	cbz	r3, 8387e <register_fini+0xa>
   83878:	4802      	ldr	r0, [pc, #8]	; (83884 <register_fini+0x10>)
   8387a:	f000 b805 	b.w	83888 <atexit>
   8387e:	4770      	bx	lr
   83880:	00000000 	.word	0x00000000
   83884:	00083af5 	.word	0x00083af5

00083888 <atexit>:
   83888:	2300      	movs	r3, #0
   8388a:	4601      	mov	r1, r0
   8388c:	461a      	mov	r2, r3
   8388e:	4618      	mov	r0, r3
   83890:	f001 bbcc 	b.w	8502c <__register_exitproc>

00083894 <__sflush_r>:
   83894:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   83898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8389c:	b29a      	uxth	r2, r3
   8389e:	460d      	mov	r5, r1
   838a0:	0711      	lsls	r1, r2, #28
   838a2:	4680      	mov	r8, r0
   838a4:	d43a      	bmi.n	8391c <__sflush_r+0x88>
   838a6:	686a      	ldr	r2, [r5, #4]
   838a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   838ac:	2a00      	cmp	r2, #0
   838ae:	81ab      	strh	r3, [r5, #12]
   838b0:	dd70      	ble.n	83994 <__sflush_r+0x100>
   838b2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   838b4:	2c00      	cmp	r4, #0
   838b6:	d04a      	beq.n	8394e <__sflush_r+0xba>
   838b8:	2200      	movs	r2, #0
   838ba:	b29b      	uxth	r3, r3
   838bc:	f8d8 6000 	ldr.w	r6, [r8]
   838c0:	f8c8 2000 	str.w	r2, [r8]
   838c4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   838c8:	d068      	beq.n	8399c <__sflush_r+0x108>
   838ca:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   838cc:	075f      	lsls	r7, r3, #29
   838ce:	d505      	bpl.n	838dc <__sflush_r+0x48>
   838d0:	6869      	ldr	r1, [r5, #4]
   838d2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   838d4:	1a52      	subs	r2, r2, r1
   838d6:	b10b      	cbz	r3, 838dc <__sflush_r+0x48>
   838d8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   838da:	1ad2      	subs	r2, r2, r3
   838dc:	2300      	movs	r3, #0
   838de:	69e9      	ldr	r1, [r5, #28]
   838e0:	4640      	mov	r0, r8
   838e2:	47a0      	blx	r4
   838e4:	1c44      	adds	r4, r0, #1
   838e6:	d03d      	beq.n	83964 <__sflush_r+0xd0>
   838e8:	2100      	movs	r1, #0
   838ea:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   838ee:	692a      	ldr	r2, [r5, #16]
   838f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   838f4:	81ab      	strh	r3, [r5, #12]
   838f6:	04db      	lsls	r3, r3, #19
   838f8:	6069      	str	r1, [r5, #4]
   838fa:	602a      	str	r2, [r5, #0]
   838fc:	d448      	bmi.n	83990 <__sflush_r+0xfc>
   838fe:	6b29      	ldr	r1, [r5, #48]	; 0x30
   83900:	f8c8 6000 	str.w	r6, [r8]
   83904:	b319      	cbz	r1, 8394e <__sflush_r+0xba>
   83906:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8390a:	4299      	cmp	r1, r3
   8390c:	d002      	beq.n	83914 <__sflush_r+0x80>
   8390e:	4640      	mov	r0, r8
   83910:	f000 f9da 	bl	83cc8 <_free_r>
   83914:	2000      	movs	r0, #0
   83916:	6328      	str	r0, [r5, #48]	; 0x30
   83918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8391c:	692e      	ldr	r6, [r5, #16]
   8391e:	b1b6      	cbz	r6, 8394e <__sflush_r+0xba>
   83920:	0791      	lsls	r1, r2, #30
   83922:	bf18      	it	ne
   83924:	2300      	movne	r3, #0
   83926:	682c      	ldr	r4, [r5, #0]
   83928:	bf08      	it	eq
   8392a:	696b      	ldreq	r3, [r5, #20]
   8392c:	602e      	str	r6, [r5, #0]
   8392e:	1ba4      	subs	r4, r4, r6
   83930:	60ab      	str	r3, [r5, #8]
   83932:	e00a      	b.n	8394a <__sflush_r+0xb6>
   83934:	4623      	mov	r3, r4
   83936:	4632      	mov	r2, r6
   83938:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   8393a:	69e9      	ldr	r1, [r5, #28]
   8393c:	4640      	mov	r0, r8
   8393e:	47b8      	blx	r7
   83940:	2800      	cmp	r0, #0
   83942:	eba4 0400 	sub.w	r4, r4, r0
   83946:	4406      	add	r6, r0
   83948:	dd04      	ble.n	83954 <__sflush_r+0xc0>
   8394a:	2c00      	cmp	r4, #0
   8394c:	dcf2      	bgt.n	83934 <__sflush_r+0xa0>
   8394e:	2000      	movs	r0, #0
   83950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83954:	89ab      	ldrh	r3, [r5, #12]
   83956:	f04f 30ff 	mov.w	r0, #4294967295
   8395a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8395e:	81ab      	strh	r3, [r5, #12]
   83960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83964:	f8d8 4000 	ldr.w	r4, [r8]
   83968:	2c1d      	cmp	r4, #29
   8396a:	d8f3      	bhi.n	83954 <__sflush_r+0xc0>
   8396c:	4b16      	ldr	r3, [pc, #88]	; (839c8 <__sflush_r+0x134>)
   8396e:	40e3      	lsrs	r3, r4
   83970:	43db      	mvns	r3, r3
   83972:	f013 0301 	ands.w	r3, r3, #1
   83976:	d1ed      	bne.n	83954 <__sflush_r+0xc0>
   83978:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   8397c:	6929      	ldr	r1, [r5, #16]
   8397e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   83982:	81aa      	strh	r2, [r5, #12]
   83984:	04d2      	lsls	r2, r2, #19
   83986:	606b      	str	r3, [r5, #4]
   83988:	6029      	str	r1, [r5, #0]
   8398a:	d5b8      	bpl.n	838fe <__sflush_r+0x6a>
   8398c:	2c00      	cmp	r4, #0
   8398e:	d1b6      	bne.n	838fe <__sflush_r+0x6a>
   83990:	6528      	str	r0, [r5, #80]	; 0x50
   83992:	e7b4      	b.n	838fe <__sflush_r+0x6a>
   83994:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   83996:	2a00      	cmp	r2, #0
   83998:	dc8b      	bgt.n	838b2 <__sflush_r+0x1e>
   8399a:	e7d8      	b.n	8394e <__sflush_r+0xba>
   8399c:	2301      	movs	r3, #1
   8399e:	69e9      	ldr	r1, [r5, #28]
   839a0:	4640      	mov	r0, r8
   839a2:	47a0      	blx	r4
   839a4:	1c43      	adds	r3, r0, #1
   839a6:	4602      	mov	r2, r0
   839a8:	d002      	beq.n	839b0 <__sflush_r+0x11c>
   839aa:	89ab      	ldrh	r3, [r5, #12]
   839ac:	6aac      	ldr	r4, [r5, #40]	; 0x28
   839ae:	e78d      	b.n	838cc <__sflush_r+0x38>
   839b0:	f8d8 3000 	ldr.w	r3, [r8]
   839b4:	2b00      	cmp	r3, #0
   839b6:	d0f8      	beq.n	839aa <__sflush_r+0x116>
   839b8:	2b1d      	cmp	r3, #29
   839ba:	d001      	beq.n	839c0 <__sflush_r+0x12c>
   839bc:	2b16      	cmp	r3, #22
   839be:	d1c9      	bne.n	83954 <__sflush_r+0xc0>
   839c0:	f8c8 6000 	str.w	r6, [r8]
   839c4:	e7c3      	b.n	8394e <__sflush_r+0xba>
   839c6:	bf00      	nop
   839c8:	20400001 	.word	0x20400001

000839cc <_fflush_r>:
   839cc:	b538      	push	{r3, r4, r5, lr}
   839ce:	460d      	mov	r5, r1
   839d0:	4604      	mov	r4, r0
   839d2:	b108      	cbz	r0, 839d8 <_fflush_r+0xc>
   839d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   839d6:	b1bb      	cbz	r3, 83a08 <_fflush_r+0x3c>
   839d8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   839dc:	b188      	cbz	r0, 83a02 <_fflush_r+0x36>
   839de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   839e0:	07db      	lsls	r3, r3, #31
   839e2:	d401      	bmi.n	839e8 <_fflush_r+0x1c>
   839e4:	0581      	lsls	r1, r0, #22
   839e6:	d517      	bpl.n	83a18 <_fflush_r+0x4c>
   839e8:	4620      	mov	r0, r4
   839ea:	4629      	mov	r1, r5
   839ec:	f7ff ff52 	bl	83894 <__sflush_r>
   839f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   839f2:	4604      	mov	r4, r0
   839f4:	07da      	lsls	r2, r3, #31
   839f6:	d402      	bmi.n	839fe <_fflush_r+0x32>
   839f8:	89ab      	ldrh	r3, [r5, #12]
   839fa:	059b      	lsls	r3, r3, #22
   839fc:	d507      	bpl.n	83a0e <_fflush_r+0x42>
   839fe:	4620      	mov	r0, r4
   83a00:	bd38      	pop	{r3, r4, r5, pc}
   83a02:	4604      	mov	r4, r0
   83a04:	4620      	mov	r0, r4
   83a06:	bd38      	pop	{r3, r4, r5, pc}
   83a08:	f000 f838 	bl	83a7c <__sinit>
   83a0c:	e7e4      	b.n	839d8 <_fflush_r+0xc>
   83a0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   83a10:	f000 fbf6 	bl	84200 <__retarget_lock_release_recursive>
   83a14:	4620      	mov	r0, r4
   83a16:	bd38      	pop	{r3, r4, r5, pc}
   83a18:	6da8      	ldr	r0, [r5, #88]	; 0x58
   83a1a:	f000 fbef 	bl	841fc <__retarget_lock_acquire_recursive>
   83a1e:	e7e3      	b.n	839e8 <_fflush_r+0x1c>

00083a20 <_cleanup_r>:
   83a20:	4901      	ldr	r1, [pc, #4]	; (83a28 <_cleanup_r+0x8>)
   83a22:	f000 bbb1 	b.w	84188 <_fwalk_reent>
   83a26:	bf00      	nop
   83a28:	00085115 	.word	0x00085115

00083a2c <std.isra.0>:
   83a2c:	2300      	movs	r3, #0
   83a2e:	b510      	push	{r4, lr}
   83a30:	4604      	mov	r4, r0
   83a32:	8181      	strh	r1, [r0, #12]
   83a34:	81c2      	strh	r2, [r0, #14]
   83a36:	6003      	str	r3, [r0, #0]
   83a38:	6043      	str	r3, [r0, #4]
   83a3a:	6083      	str	r3, [r0, #8]
   83a3c:	6643      	str	r3, [r0, #100]	; 0x64
   83a3e:	6103      	str	r3, [r0, #16]
   83a40:	6143      	str	r3, [r0, #20]
   83a42:	6183      	str	r3, [r0, #24]
   83a44:	4619      	mov	r1, r3
   83a46:	2208      	movs	r2, #8
   83a48:	305c      	adds	r0, #92	; 0x5c
   83a4a:	f7fe fe9b 	bl	82784 <memset>
   83a4e:	4807      	ldr	r0, [pc, #28]	; (83a6c <std.isra.0+0x40>)
   83a50:	4907      	ldr	r1, [pc, #28]	; (83a70 <std.isra.0+0x44>)
   83a52:	4a08      	ldr	r2, [pc, #32]	; (83a74 <std.isra.0+0x48>)
   83a54:	4b08      	ldr	r3, [pc, #32]	; (83a78 <std.isra.0+0x4c>)
   83a56:	6220      	str	r0, [r4, #32]
   83a58:	61e4      	str	r4, [r4, #28]
   83a5a:	6261      	str	r1, [r4, #36]	; 0x24
   83a5c:	62a2      	str	r2, [r4, #40]	; 0x28
   83a5e:	62e3      	str	r3, [r4, #44]	; 0x2c
   83a60:	f104 0058 	add.w	r0, r4, #88	; 0x58
   83a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83a68:	f000 bbc4 	b.w	841f4 <__retarget_lock_init_recursive>
   83a6c:	00084e5d 	.word	0x00084e5d
   83a70:	00084e81 	.word	0x00084e81
   83a74:	00084ebd 	.word	0x00084ebd
   83a78:	00084edd 	.word	0x00084edd

00083a7c <__sinit>:
   83a7c:	b510      	push	{r4, lr}
   83a7e:	4604      	mov	r4, r0
   83a80:	4814      	ldr	r0, [pc, #80]	; (83ad4 <__sinit+0x58>)
   83a82:	f000 fbbb 	bl	841fc <__retarget_lock_acquire_recursive>
   83a86:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   83a88:	b9fa      	cbnz	r2, 83aca <__sinit+0x4e>
   83a8a:	2003      	movs	r0, #3
   83a8c:	4912      	ldr	r1, [pc, #72]	; (83ad8 <__sinit+0x5c>)
   83a8e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   83a92:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   83a96:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   83a9a:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   83a9e:	63e1      	str	r1, [r4, #60]	; 0x3c
   83aa0:	6860      	ldr	r0, [r4, #4]
   83aa2:	2104      	movs	r1, #4
   83aa4:	f7ff ffc2 	bl	83a2c <std.isra.0>
   83aa8:	68a0      	ldr	r0, [r4, #8]
   83aaa:	2201      	movs	r2, #1
   83aac:	2109      	movs	r1, #9
   83aae:	f7ff ffbd 	bl	83a2c <std.isra.0>
   83ab2:	68e0      	ldr	r0, [r4, #12]
   83ab4:	2202      	movs	r2, #2
   83ab6:	2112      	movs	r1, #18
   83ab8:	f7ff ffb8 	bl	83a2c <std.isra.0>
   83abc:	2301      	movs	r3, #1
   83abe:	4805      	ldr	r0, [pc, #20]	; (83ad4 <__sinit+0x58>)
   83ac0:	63a3      	str	r3, [r4, #56]	; 0x38
   83ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83ac6:	f000 bb9b 	b.w	84200 <__retarget_lock_release_recursive>
   83aca:	4802      	ldr	r0, [pc, #8]	; (83ad4 <__sinit+0x58>)
   83acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83ad0:	f000 bb96 	b.w	84200 <__retarget_lock_release_recursive>
   83ad4:	20070fd8 	.word	0x20070fd8
   83ad8:	00083a21 	.word	0x00083a21

00083adc <__sfp_lock_acquire>:
   83adc:	4801      	ldr	r0, [pc, #4]	; (83ae4 <__sfp_lock_acquire+0x8>)
   83ade:	f000 bb8d 	b.w	841fc <__retarget_lock_acquire_recursive>
   83ae2:	bf00      	nop
   83ae4:	20070fec 	.word	0x20070fec

00083ae8 <__sfp_lock_release>:
   83ae8:	4801      	ldr	r0, [pc, #4]	; (83af0 <__sfp_lock_release+0x8>)
   83aea:	f000 bb89 	b.w	84200 <__retarget_lock_release_recursive>
   83aee:	bf00      	nop
   83af0:	20070fec 	.word	0x20070fec

00083af4 <__libc_fini_array>:
   83af4:	b538      	push	{r3, r4, r5, lr}
   83af6:	4c0a      	ldr	r4, [pc, #40]	; (83b20 <__libc_fini_array+0x2c>)
   83af8:	4d0a      	ldr	r5, [pc, #40]	; (83b24 <__libc_fini_array+0x30>)
   83afa:	1b64      	subs	r4, r4, r5
   83afc:	10a4      	asrs	r4, r4, #2
   83afe:	d00a      	beq.n	83b16 <__libc_fini_array+0x22>
   83b00:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   83b04:	3b01      	subs	r3, #1
   83b06:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   83b0a:	3c01      	subs	r4, #1
   83b0c:	f855 3904 	ldr.w	r3, [r5], #-4
   83b10:	4798      	blx	r3
   83b12:	2c00      	cmp	r4, #0
   83b14:	d1f9      	bne.n	83b0a <__libc_fini_array+0x16>
   83b16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   83b1a:	f001 be6f 	b.w	857fc <_fini>
   83b1e:	bf00      	nop
   83b20:	0008580c 	.word	0x0008580c
   83b24:	00085808 	.word	0x00085808

00083b28 <__fputwc>:
   83b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83b2c:	b083      	sub	sp, #12
   83b2e:	4607      	mov	r7, r0
   83b30:	4688      	mov	r8, r1
   83b32:	4614      	mov	r4, r2
   83b34:	f000 fb50 	bl	841d8 <__locale_mb_cur_max>
   83b38:	2801      	cmp	r0, #1
   83b3a:	d033      	beq.n	83ba4 <__fputwc+0x7c>
   83b3c:	4642      	mov	r2, r8
   83b3e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   83b42:	a901      	add	r1, sp, #4
   83b44:	4638      	mov	r0, r7
   83b46:	f001 fa25 	bl	84f94 <_wcrtomb_r>
   83b4a:	1c42      	adds	r2, r0, #1
   83b4c:	4606      	mov	r6, r0
   83b4e:	d022      	beq.n	83b96 <__fputwc+0x6e>
   83b50:	b390      	cbz	r0, 83bb8 <__fputwc+0x90>
   83b52:	f89d 1004 	ldrb.w	r1, [sp, #4]
   83b56:	2500      	movs	r5, #0
   83b58:	f10d 0904 	add.w	r9, sp, #4
   83b5c:	e008      	b.n	83b70 <__fputwc+0x48>
   83b5e:	6823      	ldr	r3, [r4, #0]
   83b60:	1c5a      	adds	r2, r3, #1
   83b62:	6022      	str	r2, [r4, #0]
   83b64:	7019      	strb	r1, [r3, #0]
   83b66:	3501      	adds	r5, #1
   83b68:	42b5      	cmp	r5, r6
   83b6a:	d225      	bcs.n	83bb8 <__fputwc+0x90>
   83b6c:	f815 1009 	ldrb.w	r1, [r5, r9]
   83b70:	68a3      	ldr	r3, [r4, #8]
   83b72:	3b01      	subs	r3, #1
   83b74:	2b00      	cmp	r3, #0
   83b76:	60a3      	str	r3, [r4, #8]
   83b78:	daf1      	bge.n	83b5e <__fputwc+0x36>
   83b7a:	69a2      	ldr	r2, [r4, #24]
   83b7c:	4293      	cmp	r3, r2
   83b7e:	db01      	blt.n	83b84 <__fputwc+0x5c>
   83b80:	290a      	cmp	r1, #10
   83b82:	d1ec      	bne.n	83b5e <__fputwc+0x36>
   83b84:	4622      	mov	r2, r4
   83b86:	4638      	mov	r0, r7
   83b88:	f001 f9ac 	bl	84ee4 <__swbuf_r>
   83b8c:	1c43      	adds	r3, r0, #1
   83b8e:	d1ea      	bne.n	83b66 <__fputwc+0x3e>
   83b90:	b003      	add	sp, #12
   83b92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83b96:	89a3      	ldrh	r3, [r4, #12]
   83b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83b9c:	81a3      	strh	r3, [r4, #12]
   83b9e:	b003      	add	sp, #12
   83ba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83ba4:	f108 33ff 	add.w	r3, r8, #4294967295
   83ba8:	2bfe      	cmp	r3, #254	; 0xfe
   83baa:	d8c7      	bhi.n	83b3c <__fputwc+0x14>
   83bac:	fa5f f188 	uxtb.w	r1, r8
   83bb0:	4606      	mov	r6, r0
   83bb2:	f88d 1004 	strb.w	r1, [sp, #4]
   83bb6:	e7ce      	b.n	83b56 <__fputwc+0x2e>
   83bb8:	4640      	mov	r0, r8
   83bba:	b003      	add	sp, #12
   83bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00083bc0 <_fputwc_r>:
   83bc0:	b530      	push	{r4, r5, lr}
   83bc2:	6e53      	ldr	r3, [r2, #100]	; 0x64
   83bc4:	4614      	mov	r4, r2
   83bc6:	f013 0f01 	tst.w	r3, #1
   83bca:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   83bce:	b083      	sub	sp, #12
   83bd0:	4605      	mov	r5, r0
   83bd2:	b29a      	uxth	r2, r3
   83bd4:	d101      	bne.n	83bda <_fputwc_r+0x1a>
   83bd6:	0590      	lsls	r0, r2, #22
   83bd8:	d51c      	bpl.n	83c14 <_fputwc_r+0x54>
   83bda:	0490      	lsls	r0, r2, #18
   83bdc:	d406      	bmi.n	83bec <_fputwc_r+0x2c>
   83bde:	6e62      	ldr	r2, [r4, #100]	; 0x64
   83be0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   83be4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83be8:	81a3      	strh	r3, [r4, #12]
   83bea:	6662      	str	r2, [r4, #100]	; 0x64
   83bec:	4628      	mov	r0, r5
   83bee:	4622      	mov	r2, r4
   83bf0:	f7ff ff9a 	bl	83b28 <__fputwc>
   83bf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83bf6:	4605      	mov	r5, r0
   83bf8:	07da      	lsls	r2, r3, #31
   83bfa:	d402      	bmi.n	83c02 <_fputwc_r+0x42>
   83bfc:	89a3      	ldrh	r3, [r4, #12]
   83bfe:	059b      	lsls	r3, r3, #22
   83c00:	d502      	bpl.n	83c08 <_fputwc_r+0x48>
   83c02:	4628      	mov	r0, r5
   83c04:	b003      	add	sp, #12
   83c06:	bd30      	pop	{r4, r5, pc}
   83c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83c0a:	f000 faf9 	bl	84200 <__retarget_lock_release_recursive>
   83c0e:	4628      	mov	r0, r5
   83c10:	b003      	add	sp, #12
   83c12:	bd30      	pop	{r4, r5, pc}
   83c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83c16:	9101      	str	r1, [sp, #4]
   83c18:	f000 faf0 	bl	841fc <__retarget_lock_acquire_recursive>
   83c1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83c20:	9901      	ldr	r1, [sp, #4]
   83c22:	b29a      	uxth	r2, r3
   83c24:	e7d9      	b.n	83bda <_fputwc_r+0x1a>
   83c26:	bf00      	nop

00083c28 <_malloc_trim_r>:
   83c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83c2a:	460c      	mov	r4, r1
   83c2c:	4f23      	ldr	r7, [pc, #140]	; (83cbc <_malloc_trim_r+0x94>)
   83c2e:	4606      	mov	r6, r0
   83c30:	f000 ff40 	bl	84ab4 <__malloc_lock>
   83c34:	68bb      	ldr	r3, [r7, #8]
   83c36:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   83c3a:	685d      	ldr	r5, [r3, #4]
   83c3c:	310f      	adds	r1, #15
   83c3e:	f025 0503 	bic.w	r5, r5, #3
   83c42:	4429      	add	r1, r5
   83c44:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   83c48:	f021 010f 	bic.w	r1, r1, #15
   83c4c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   83c50:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   83c54:	db07      	blt.n	83c66 <_malloc_trim_r+0x3e>
   83c56:	2100      	movs	r1, #0
   83c58:	4630      	mov	r0, r6
   83c5a:	f001 f8ed 	bl	84e38 <_sbrk_r>
   83c5e:	68bb      	ldr	r3, [r7, #8]
   83c60:	442b      	add	r3, r5
   83c62:	4298      	cmp	r0, r3
   83c64:	d004      	beq.n	83c70 <_malloc_trim_r+0x48>
   83c66:	4630      	mov	r0, r6
   83c68:	f000 ff2a 	bl	84ac0 <__malloc_unlock>
   83c6c:	2000      	movs	r0, #0
   83c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83c70:	4261      	negs	r1, r4
   83c72:	4630      	mov	r0, r6
   83c74:	f001 f8e0 	bl	84e38 <_sbrk_r>
   83c78:	3001      	adds	r0, #1
   83c7a:	d00d      	beq.n	83c98 <_malloc_trim_r+0x70>
   83c7c:	4b10      	ldr	r3, [pc, #64]	; (83cc0 <_malloc_trim_r+0x98>)
   83c7e:	68ba      	ldr	r2, [r7, #8]
   83c80:	6819      	ldr	r1, [r3, #0]
   83c82:	1b2d      	subs	r5, r5, r4
   83c84:	f045 0501 	orr.w	r5, r5, #1
   83c88:	4630      	mov	r0, r6
   83c8a:	1b09      	subs	r1, r1, r4
   83c8c:	6055      	str	r5, [r2, #4]
   83c8e:	6019      	str	r1, [r3, #0]
   83c90:	f000 ff16 	bl	84ac0 <__malloc_unlock>
   83c94:	2001      	movs	r0, #1
   83c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83c98:	2100      	movs	r1, #0
   83c9a:	4630      	mov	r0, r6
   83c9c:	f001 f8cc 	bl	84e38 <_sbrk_r>
   83ca0:	68ba      	ldr	r2, [r7, #8]
   83ca2:	1a83      	subs	r3, r0, r2
   83ca4:	2b0f      	cmp	r3, #15
   83ca6:	ddde      	ble.n	83c66 <_malloc_trim_r+0x3e>
   83ca8:	4c06      	ldr	r4, [pc, #24]	; (83cc4 <_malloc_trim_r+0x9c>)
   83caa:	4905      	ldr	r1, [pc, #20]	; (83cc0 <_malloc_trim_r+0x98>)
   83cac:	6824      	ldr	r4, [r4, #0]
   83cae:	f043 0301 	orr.w	r3, r3, #1
   83cb2:	1b00      	subs	r0, r0, r4
   83cb4:	6053      	str	r3, [r2, #4]
   83cb6:	6008      	str	r0, [r1, #0]
   83cb8:	e7d5      	b.n	83c66 <_malloc_trim_r+0x3e>
   83cba:	bf00      	nop
   83cbc:	20070700 	.word	0x20070700
   83cc0:	20070f6c 	.word	0x20070f6c
   83cc4:	20070b08 	.word	0x20070b08

00083cc8 <_free_r>:
   83cc8:	2900      	cmp	r1, #0
   83cca:	d044      	beq.n	83d56 <_free_r+0x8e>
   83ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83cd0:	460d      	mov	r5, r1
   83cd2:	4680      	mov	r8, r0
   83cd4:	f000 feee 	bl	84ab4 <__malloc_lock>
   83cd8:	f855 7c04 	ldr.w	r7, [r5, #-4]
   83cdc:	4969      	ldr	r1, [pc, #420]	; (83e84 <_free_r+0x1bc>)
   83cde:	f1a5 0408 	sub.w	r4, r5, #8
   83ce2:	f027 0301 	bic.w	r3, r7, #1
   83ce6:	18e2      	adds	r2, r4, r3
   83ce8:	688e      	ldr	r6, [r1, #8]
   83cea:	6850      	ldr	r0, [r2, #4]
   83cec:	42b2      	cmp	r2, r6
   83cee:	f020 0003 	bic.w	r0, r0, #3
   83cf2:	d05e      	beq.n	83db2 <_free_r+0xea>
   83cf4:	07fe      	lsls	r6, r7, #31
   83cf6:	6050      	str	r0, [r2, #4]
   83cf8:	d40b      	bmi.n	83d12 <_free_r+0x4a>
   83cfa:	f855 7c08 	ldr.w	r7, [r5, #-8]
   83cfe:	f101 0e08 	add.w	lr, r1, #8
   83d02:	1be4      	subs	r4, r4, r7
   83d04:	68a5      	ldr	r5, [r4, #8]
   83d06:	443b      	add	r3, r7
   83d08:	4575      	cmp	r5, lr
   83d0a:	d06d      	beq.n	83de8 <_free_r+0x120>
   83d0c:	68e7      	ldr	r7, [r4, #12]
   83d0e:	60ef      	str	r7, [r5, #12]
   83d10:	60bd      	str	r5, [r7, #8]
   83d12:	1815      	adds	r5, r2, r0
   83d14:	686d      	ldr	r5, [r5, #4]
   83d16:	07ed      	lsls	r5, r5, #31
   83d18:	d53e      	bpl.n	83d98 <_free_r+0xd0>
   83d1a:	f043 0201 	orr.w	r2, r3, #1
   83d1e:	6062      	str	r2, [r4, #4]
   83d20:	50e3      	str	r3, [r4, r3]
   83d22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83d26:	d217      	bcs.n	83d58 <_free_r+0x90>
   83d28:	2201      	movs	r2, #1
   83d2a:	08db      	lsrs	r3, r3, #3
   83d2c:	1098      	asrs	r0, r3, #2
   83d2e:	684d      	ldr	r5, [r1, #4]
   83d30:	4413      	add	r3, r2
   83d32:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   83d36:	4082      	lsls	r2, r0
   83d38:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   83d3c:	432a      	orrs	r2, r5
   83d3e:	3808      	subs	r0, #8
   83d40:	60e0      	str	r0, [r4, #12]
   83d42:	60a7      	str	r7, [r4, #8]
   83d44:	604a      	str	r2, [r1, #4]
   83d46:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   83d4a:	60fc      	str	r4, [r7, #12]
   83d4c:	4640      	mov	r0, r8
   83d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83d52:	f000 beb5 	b.w	84ac0 <__malloc_unlock>
   83d56:	4770      	bx	lr
   83d58:	0a5a      	lsrs	r2, r3, #9
   83d5a:	2a04      	cmp	r2, #4
   83d5c:	d852      	bhi.n	83e04 <_free_r+0x13c>
   83d5e:	099a      	lsrs	r2, r3, #6
   83d60:	f102 0739 	add.w	r7, r2, #57	; 0x39
   83d64:	00ff      	lsls	r7, r7, #3
   83d66:	f102 0538 	add.w	r5, r2, #56	; 0x38
   83d6a:	19c8      	adds	r0, r1, r7
   83d6c:	59ca      	ldr	r2, [r1, r7]
   83d6e:	3808      	subs	r0, #8
   83d70:	4290      	cmp	r0, r2
   83d72:	d04f      	beq.n	83e14 <_free_r+0x14c>
   83d74:	6851      	ldr	r1, [r2, #4]
   83d76:	f021 0103 	bic.w	r1, r1, #3
   83d7a:	428b      	cmp	r3, r1
   83d7c:	d232      	bcs.n	83de4 <_free_r+0x11c>
   83d7e:	6892      	ldr	r2, [r2, #8]
   83d80:	4290      	cmp	r0, r2
   83d82:	d1f7      	bne.n	83d74 <_free_r+0xac>
   83d84:	68c3      	ldr	r3, [r0, #12]
   83d86:	60a0      	str	r0, [r4, #8]
   83d88:	60e3      	str	r3, [r4, #12]
   83d8a:	609c      	str	r4, [r3, #8]
   83d8c:	60c4      	str	r4, [r0, #12]
   83d8e:	4640      	mov	r0, r8
   83d90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83d94:	f000 be94 	b.w	84ac0 <__malloc_unlock>
   83d98:	6895      	ldr	r5, [r2, #8]
   83d9a:	4f3b      	ldr	r7, [pc, #236]	; (83e88 <_free_r+0x1c0>)
   83d9c:	4403      	add	r3, r0
   83d9e:	42bd      	cmp	r5, r7
   83da0:	d040      	beq.n	83e24 <_free_r+0x15c>
   83da2:	68d0      	ldr	r0, [r2, #12]
   83da4:	f043 0201 	orr.w	r2, r3, #1
   83da8:	60e8      	str	r0, [r5, #12]
   83daa:	6085      	str	r5, [r0, #8]
   83dac:	6062      	str	r2, [r4, #4]
   83dae:	50e3      	str	r3, [r4, r3]
   83db0:	e7b7      	b.n	83d22 <_free_r+0x5a>
   83db2:	07ff      	lsls	r7, r7, #31
   83db4:	4403      	add	r3, r0
   83db6:	d407      	bmi.n	83dc8 <_free_r+0x100>
   83db8:	f855 5c08 	ldr.w	r5, [r5, #-8]
   83dbc:	1b64      	subs	r4, r4, r5
   83dbe:	68e2      	ldr	r2, [r4, #12]
   83dc0:	68a0      	ldr	r0, [r4, #8]
   83dc2:	442b      	add	r3, r5
   83dc4:	60c2      	str	r2, [r0, #12]
   83dc6:	6090      	str	r0, [r2, #8]
   83dc8:	4a30      	ldr	r2, [pc, #192]	; (83e8c <_free_r+0x1c4>)
   83dca:	f043 0001 	orr.w	r0, r3, #1
   83dce:	6812      	ldr	r2, [r2, #0]
   83dd0:	6060      	str	r0, [r4, #4]
   83dd2:	4293      	cmp	r3, r2
   83dd4:	608c      	str	r4, [r1, #8]
   83dd6:	d3b9      	bcc.n	83d4c <_free_r+0x84>
   83dd8:	4b2d      	ldr	r3, [pc, #180]	; (83e90 <_free_r+0x1c8>)
   83dda:	4640      	mov	r0, r8
   83ddc:	6819      	ldr	r1, [r3, #0]
   83dde:	f7ff ff23 	bl	83c28 <_malloc_trim_r>
   83de2:	e7b3      	b.n	83d4c <_free_r+0x84>
   83de4:	4610      	mov	r0, r2
   83de6:	e7cd      	b.n	83d84 <_free_r+0xbc>
   83de8:	1811      	adds	r1, r2, r0
   83dea:	6849      	ldr	r1, [r1, #4]
   83dec:	07c9      	lsls	r1, r1, #31
   83dee:	d444      	bmi.n	83e7a <_free_r+0x1b2>
   83df0:	6891      	ldr	r1, [r2, #8]
   83df2:	4403      	add	r3, r0
   83df4:	68d2      	ldr	r2, [r2, #12]
   83df6:	f043 0001 	orr.w	r0, r3, #1
   83dfa:	60ca      	str	r2, [r1, #12]
   83dfc:	6091      	str	r1, [r2, #8]
   83dfe:	6060      	str	r0, [r4, #4]
   83e00:	50e3      	str	r3, [r4, r3]
   83e02:	e7a3      	b.n	83d4c <_free_r+0x84>
   83e04:	2a14      	cmp	r2, #20
   83e06:	d816      	bhi.n	83e36 <_free_r+0x16e>
   83e08:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   83e0c:	00ff      	lsls	r7, r7, #3
   83e0e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   83e12:	e7aa      	b.n	83d6a <_free_r+0xa2>
   83e14:	2301      	movs	r3, #1
   83e16:	10aa      	asrs	r2, r5, #2
   83e18:	684d      	ldr	r5, [r1, #4]
   83e1a:	4093      	lsls	r3, r2
   83e1c:	432b      	orrs	r3, r5
   83e1e:	604b      	str	r3, [r1, #4]
   83e20:	4603      	mov	r3, r0
   83e22:	e7b0      	b.n	83d86 <_free_r+0xbe>
   83e24:	f043 0201 	orr.w	r2, r3, #1
   83e28:	614c      	str	r4, [r1, #20]
   83e2a:	610c      	str	r4, [r1, #16]
   83e2c:	60e5      	str	r5, [r4, #12]
   83e2e:	60a5      	str	r5, [r4, #8]
   83e30:	6062      	str	r2, [r4, #4]
   83e32:	50e3      	str	r3, [r4, r3]
   83e34:	e78a      	b.n	83d4c <_free_r+0x84>
   83e36:	2a54      	cmp	r2, #84	; 0x54
   83e38:	d806      	bhi.n	83e48 <_free_r+0x180>
   83e3a:	0b1a      	lsrs	r2, r3, #12
   83e3c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   83e40:	00ff      	lsls	r7, r7, #3
   83e42:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   83e46:	e790      	b.n	83d6a <_free_r+0xa2>
   83e48:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83e4c:	d806      	bhi.n	83e5c <_free_r+0x194>
   83e4e:	0bda      	lsrs	r2, r3, #15
   83e50:	f102 0778 	add.w	r7, r2, #120	; 0x78
   83e54:	00ff      	lsls	r7, r7, #3
   83e56:	f102 0577 	add.w	r5, r2, #119	; 0x77
   83e5a:	e786      	b.n	83d6a <_free_r+0xa2>
   83e5c:	f240 5054 	movw	r0, #1364	; 0x554
   83e60:	4282      	cmp	r2, r0
   83e62:	d806      	bhi.n	83e72 <_free_r+0x1aa>
   83e64:	0c9a      	lsrs	r2, r3, #18
   83e66:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   83e6a:	00ff      	lsls	r7, r7, #3
   83e6c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   83e70:	e77b      	b.n	83d6a <_free_r+0xa2>
   83e72:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   83e76:	257e      	movs	r5, #126	; 0x7e
   83e78:	e777      	b.n	83d6a <_free_r+0xa2>
   83e7a:	f043 0101 	orr.w	r1, r3, #1
   83e7e:	6061      	str	r1, [r4, #4]
   83e80:	6013      	str	r3, [r2, #0]
   83e82:	e763      	b.n	83d4c <_free_r+0x84>
   83e84:	20070700 	.word	0x20070700
   83e88:	20070708 	.word	0x20070708
   83e8c:	20070b0c 	.word	0x20070b0c
   83e90:	20070f9c 	.word	0x20070f9c

00083e94 <__sfvwrite_r>:
   83e94:	6893      	ldr	r3, [r2, #8]
   83e96:	2b00      	cmp	r3, #0
   83e98:	d071      	beq.n	83f7e <__sfvwrite_r+0xea>
   83e9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83e9e:	898b      	ldrh	r3, [r1, #12]
   83ea0:	b083      	sub	sp, #12
   83ea2:	460c      	mov	r4, r1
   83ea4:	0719      	lsls	r1, r3, #28
   83ea6:	9000      	str	r0, [sp, #0]
   83ea8:	4616      	mov	r6, r2
   83eaa:	d525      	bpl.n	83ef8 <__sfvwrite_r+0x64>
   83eac:	6922      	ldr	r2, [r4, #16]
   83eae:	b31a      	cbz	r2, 83ef8 <__sfvwrite_r+0x64>
   83eb0:	f013 0002 	ands.w	r0, r3, #2
   83eb4:	6835      	ldr	r5, [r6, #0]
   83eb6:	d02b      	beq.n	83f10 <__sfvwrite_r+0x7c>
   83eb8:	f04f 0900 	mov.w	r9, #0
   83ebc:	46b0      	mov	r8, r6
   83ebe:	464f      	mov	r7, r9
   83ec0:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 84184 <__sfvwrite_r+0x2f0>
   83ec4:	2f00      	cmp	r7, #0
   83ec6:	d055      	beq.n	83f74 <__sfvwrite_r+0xe0>
   83ec8:	4557      	cmp	r7, sl
   83eca:	463b      	mov	r3, r7
   83ecc:	464a      	mov	r2, r9
   83ece:	bf28      	it	cs
   83ed0:	4653      	movcs	r3, sl
   83ed2:	69e1      	ldr	r1, [r4, #28]
   83ed4:	9800      	ldr	r0, [sp, #0]
   83ed6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   83ed8:	47b0      	blx	r6
   83eda:	2800      	cmp	r0, #0
   83edc:	dd56      	ble.n	83f8c <__sfvwrite_r+0xf8>
   83ede:	f8d8 3008 	ldr.w	r3, [r8, #8]
   83ee2:	4481      	add	r9, r0
   83ee4:	1a1b      	subs	r3, r3, r0
   83ee6:	1a3f      	subs	r7, r7, r0
   83ee8:	f8c8 3008 	str.w	r3, [r8, #8]
   83eec:	2b00      	cmp	r3, #0
   83eee:	d1e9      	bne.n	83ec4 <__sfvwrite_r+0x30>
   83ef0:	2000      	movs	r0, #0
   83ef2:	b003      	add	sp, #12
   83ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83ef8:	4621      	mov	r1, r4
   83efa:	9800      	ldr	r0, [sp, #0]
   83efc:	f7ff fc56 	bl	837ac <__swsetup_r>
   83f00:	2800      	cmp	r0, #0
   83f02:	f040 8135 	bne.w	84170 <__sfvwrite_r+0x2dc>
   83f06:	89a3      	ldrh	r3, [r4, #12]
   83f08:	6835      	ldr	r5, [r6, #0]
   83f0a:	f013 0002 	ands.w	r0, r3, #2
   83f0e:	d1d3      	bne.n	83eb8 <__sfvwrite_r+0x24>
   83f10:	f013 0901 	ands.w	r9, r3, #1
   83f14:	d144      	bne.n	83fa0 <__sfvwrite_r+0x10c>
   83f16:	464f      	mov	r7, r9
   83f18:	9601      	str	r6, [sp, #4]
   83f1a:	b337      	cbz	r7, 83f6a <__sfvwrite_r+0xd6>
   83f1c:	059a      	lsls	r2, r3, #22
   83f1e:	f8d4 8008 	ldr.w	r8, [r4, #8]
   83f22:	f140 8085 	bpl.w	84030 <__sfvwrite_r+0x19c>
   83f26:	4547      	cmp	r7, r8
   83f28:	46c3      	mov	fp, r8
   83f2a:	f0c0 80ad 	bcc.w	84088 <__sfvwrite_r+0x1f4>
   83f2e:	f413 6f90 	tst.w	r3, #1152	; 0x480
   83f32:	f040 80ae 	bne.w	84092 <__sfvwrite_r+0x1fe>
   83f36:	46ba      	mov	sl, r7
   83f38:	6820      	ldr	r0, [r4, #0]
   83f3a:	465a      	mov	r2, fp
   83f3c:	4649      	mov	r1, r9
   83f3e:	f000 fd55 	bl	849ec <memmove>
   83f42:	68a2      	ldr	r2, [r4, #8]
   83f44:	6823      	ldr	r3, [r4, #0]
   83f46:	eba2 0208 	sub.w	r2, r2, r8
   83f4a:	445b      	add	r3, fp
   83f4c:	60a2      	str	r2, [r4, #8]
   83f4e:	6023      	str	r3, [r4, #0]
   83f50:	9a01      	ldr	r2, [sp, #4]
   83f52:	44d1      	add	r9, sl
   83f54:	6893      	ldr	r3, [r2, #8]
   83f56:	eba7 070a 	sub.w	r7, r7, sl
   83f5a:	eba3 030a 	sub.w	r3, r3, sl
   83f5e:	6093      	str	r3, [r2, #8]
   83f60:	2b00      	cmp	r3, #0
   83f62:	d0c5      	beq.n	83ef0 <__sfvwrite_r+0x5c>
   83f64:	89a3      	ldrh	r3, [r4, #12]
   83f66:	2f00      	cmp	r7, #0
   83f68:	d1d8      	bne.n	83f1c <__sfvwrite_r+0x88>
   83f6a:	f8d5 9000 	ldr.w	r9, [r5]
   83f6e:	686f      	ldr	r7, [r5, #4]
   83f70:	3508      	adds	r5, #8
   83f72:	e7d2      	b.n	83f1a <__sfvwrite_r+0x86>
   83f74:	f8d5 9000 	ldr.w	r9, [r5]
   83f78:	686f      	ldr	r7, [r5, #4]
   83f7a:	3508      	adds	r5, #8
   83f7c:	e7a2      	b.n	83ec4 <__sfvwrite_r+0x30>
   83f7e:	2000      	movs	r0, #0
   83f80:	4770      	bx	lr
   83f82:	4621      	mov	r1, r4
   83f84:	9800      	ldr	r0, [sp, #0]
   83f86:	f7ff fd21 	bl	839cc <_fflush_r>
   83f8a:	b378      	cbz	r0, 83fec <__sfvwrite_r+0x158>
   83f8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83f90:	f04f 30ff 	mov.w	r0, #4294967295
   83f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83f98:	81a3      	strh	r3, [r4, #12]
   83f9a:	b003      	add	sp, #12
   83f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83fa0:	4681      	mov	r9, r0
   83fa2:	4633      	mov	r3, r6
   83fa4:	464e      	mov	r6, r9
   83fa6:	46a8      	mov	r8, r5
   83fa8:	469a      	mov	sl, r3
   83faa:	464d      	mov	r5, r9
   83fac:	b356      	cbz	r6, 84004 <__sfvwrite_r+0x170>
   83fae:	2800      	cmp	r0, #0
   83fb0:	d032      	beq.n	84018 <__sfvwrite_r+0x184>
   83fb2:	45b1      	cmp	r9, r6
   83fb4:	46cb      	mov	fp, r9
   83fb6:	bf28      	it	cs
   83fb8:	46b3      	movcs	fp, r6
   83fba:	6820      	ldr	r0, [r4, #0]
   83fbc:	6923      	ldr	r3, [r4, #16]
   83fbe:	465f      	mov	r7, fp
   83fc0:	4298      	cmp	r0, r3
   83fc2:	6962      	ldr	r2, [r4, #20]
   83fc4:	d904      	bls.n	83fd0 <__sfvwrite_r+0x13c>
   83fc6:	68a3      	ldr	r3, [r4, #8]
   83fc8:	4413      	add	r3, r2
   83fca:	459b      	cmp	fp, r3
   83fcc:	f300 80a8 	bgt.w	84120 <__sfvwrite_r+0x28c>
   83fd0:	4593      	cmp	fp, r2
   83fd2:	db4d      	blt.n	84070 <__sfvwrite_r+0x1dc>
   83fd4:	4613      	mov	r3, r2
   83fd6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83fd8:	462a      	mov	r2, r5
   83fda:	69e1      	ldr	r1, [r4, #28]
   83fdc:	9800      	ldr	r0, [sp, #0]
   83fde:	47b8      	blx	r7
   83fe0:	1e07      	subs	r7, r0, #0
   83fe2:	ddd3      	ble.n	83f8c <__sfvwrite_r+0xf8>
   83fe4:	ebb9 0907 	subs.w	r9, r9, r7
   83fe8:	d0cb      	beq.n	83f82 <__sfvwrite_r+0xee>
   83fea:	2001      	movs	r0, #1
   83fec:	f8da 3008 	ldr.w	r3, [sl, #8]
   83ff0:	443d      	add	r5, r7
   83ff2:	1bdb      	subs	r3, r3, r7
   83ff4:	1bf6      	subs	r6, r6, r7
   83ff6:	f8ca 3008 	str.w	r3, [sl, #8]
   83ffa:	2b00      	cmp	r3, #0
   83ffc:	f43f af78 	beq.w	83ef0 <__sfvwrite_r+0x5c>
   84000:	2e00      	cmp	r6, #0
   84002:	d1d4      	bne.n	83fae <__sfvwrite_r+0x11a>
   84004:	f108 0308 	add.w	r3, r8, #8
   84008:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8400c:	4698      	mov	r8, r3
   8400e:	f853 5c08 	ldr.w	r5, [r3, #-8]
   84012:	3308      	adds	r3, #8
   84014:	2e00      	cmp	r6, #0
   84016:	d0f7      	beq.n	84008 <__sfvwrite_r+0x174>
   84018:	4632      	mov	r2, r6
   8401a:	210a      	movs	r1, #10
   8401c:	4628      	mov	r0, r5
   8401e:	f000 fc29 	bl	84874 <memchr>
   84022:	2800      	cmp	r0, #0
   84024:	f000 80a1 	beq.w	8416a <__sfvwrite_r+0x2d6>
   84028:	3001      	adds	r0, #1
   8402a:	eba0 0905 	sub.w	r9, r0, r5
   8402e:	e7c0      	b.n	83fb2 <__sfvwrite_r+0x11e>
   84030:	6820      	ldr	r0, [r4, #0]
   84032:	6923      	ldr	r3, [r4, #16]
   84034:	4298      	cmp	r0, r3
   84036:	d802      	bhi.n	8403e <__sfvwrite_r+0x1aa>
   84038:	6963      	ldr	r3, [r4, #20]
   8403a:	429f      	cmp	r7, r3
   8403c:	d25d      	bcs.n	840fa <__sfvwrite_r+0x266>
   8403e:	45b8      	cmp	r8, r7
   84040:	bf28      	it	cs
   84042:	46b8      	movcs	r8, r7
   84044:	4649      	mov	r1, r9
   84046:	4642      	mov	r2, r8
   84048:	f000 fcd0 	bl	849ec <memmove>
   8404c:	68a3      	ldr	r3, [r4, #8]
   8404e:	6822      	ldr	r2, [r4, #0]
   84050:	eba3 0308 	sub.w	r3, r3, r8
   84054:	4442      	add	r2, r8
   84056:	60a3      	str	r3, [r4, #8]
   84058:	6022      	str	r2, [r4, #0]
   8405a:	b10b      	cbz	r3, 84060 <__sfvwrite_r+0x1cc>
   8405c:	46c2      	mov	sl, r8
   8405e:	e777      	b.n	83f50 <__sfvwrite_r+0xbc>
   84060:	4621      	mov	r1, r4
   84062:	9800      	ldr	r0, [sp, #0]
   84064:	f7ff fcb2 	bl	839cc <_fflush_r>
   84068:	2800      	cmp	r0, #0
   8406a:	d18f      	bne.n	83f8c <__sfvwrite_r+0xf8>
   8406c:	46c2      	mov	sl, r8
   8406e:	e76f      	b.n	83f50 <__sfvwrite_r+0xbc>
   84070:	465a      	mov	r2, fp
   84072:	4629      	mov	r1, r5
   84074:	f000 fcba 	bl	849ec <memmove>
   84078:	68a2      	ldr	r2, [r4, #8]
   8407a:	6823      	ldr	r3, [r4, #0]
   8407c:	eba2 020b 	sub.w	r2, r2, fp
   84080:	445b      	add	r3, fp
   84082:	60a2      	str	r2, [r4, #8]
   84084:	6023      	str	r3, [r4, #0]
   84086:	e7ad      	b.n	83fe4 <__sfvwrite_r+0x150>
   84088:	46b8      	mov	r8, r7
   8408a:	46ba      	mov	sl, r7
   8408c:	46bb      	mov	fp, r7
   8408e:	6820      	ldr	r0, [r4, #0]
   84090:	e753      	b.n	83f3a <__sfvwrite_r+0xa6>
   84092:	6962      	ldr	r2, [r4, #20]
   84094:	6820      	ldr	r0, [r4, #0]
   84096:	6921      	ldr	r1, [r4, #16]
   84098:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   8409c:	eba0 0a01 	sub.w	sl, r0, r1
   840a0:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   840a4:	f10a 0001 	add.w	r0, sl, #1
   840a8:	ea4f 0868 	mov.w	r8, r8, asr #1
   840ac:	4438      	add	r0, r7
   840ae:	4540      	cmp	r0, r8
   840b0:	4642      	mov	r2, r8
   840b2:	bf84      	itt	hi
   840b4:	4680      	movhi	r8, r0
   840b6:	4642      	movhi	r2, r8
   840b8:	055b      	lsls	r3, r3, #21
   840ba:	d544      	bpl.n	84146 <__sfvwrite_r+0x2b2>
   840bc:	4611      	mov	r1, r2
   840be:	9800      	ldr	r0, [sp, #0]
   840c0:	f000 f920 	bl	84304 <_malloc_r>
   840c4:	4683      	mov	fp, r0
   840c6:	2800      	cmp	r0, #0
   840c8:	d055      	beq.n	84176 <__sfvwrite_r+0x2e2>
   840ca:	4652      	mov	r2, sl
   840cc:	6921      	ldr	r1, [r4, #16]
   840ce:	f000 fc17 	bl	84900 <memcpy>
   840d2:	89a3      	ldrh	r3, [r4, #12]
   840d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   840d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   840dc:	81a3      	strh	r3, [r4, #12]
   840de:	eb0b 000a 	add.w	r0, fp, sl
   840e2:	eba8 030a 	sub.w	r3, r8, sl
   840e6:	f8c4 b010 	str.w	fp, [r4, #16]
   840ea:	f8c4 8014 	str.w	r8, [r4, #20]
   840ee:	6020      	str	r0, [r4, #0]
   840f0:	60a3      	str	r3, [r4, #8]
   840f2:	46b8      	mov	r8, r7
   840f4:	46ba      	mov	sl, r7
   840f6:	46bb      	mov	fp, r7
   840f8:	e71f      	b.n	83f3a <__sfvwrite_r+0xa6>
   840fa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   840fe:	42ba      	cmp	r2, r7
   84100:	bf28      	it	cs
   84102:	463a      	movcs	r2, r7
   84104:	fb92 f2f3 	sdiv	r2, r2, r3
   84108:	69e1      	ldr	r1, [r4, #28]
   8410a:	fb03 f302 	mul.w	r3, r3, r2
   8410e:	9800      	ldr	r0, [sp, #0]
   84110:	464a      	mov	r2, r9
   84112:	6a66      	ldr	r6, [r4, #36]	; 0x24
   84114:	47b0      	blx	r6
   84116:	f1b0 0a00 	subs.w	sl, r0, #0
   8411a:	f73f af19 	bgt.w	83f50 <__sfvwrite_r+0xbc>
   8411e:	e735      	b.n	83f8c <__sfvwrite_r+0xf8>
   84120:	461a      	mov	r2, r3
   84122:	4629      	mov	r1, r5
   84124:	9301      	str	r3, [sp, #4]
   84126:	f000 fc61 	bl	849ec <memmove>
   8412a:	6822      	ldr	r2, [r4, #0]
   8412c:	9b01      	ldr	r3, [sp, #4]
   8412e:	4621      	mov	r1, r4
   84130:	441a      	add	r2, r3
   84132:	6022      	str	r2, [r4, #0]
   84134:	9800      	ldr	r0, [sp, #0]
   84136:	f7ff fc49 	bl	839cc <_fflush_r>
   8413a:	9b01      	ldr	r3, [sp, #4]
   8413c:	2800      	cmp	r0, #0
   8413e:	f47f af25 	bne.w	83f8c <__sfvwrite_r+0xf8>
   84142:	461f      	mov	r7, r3
   84144:	e74e      	b.n	83fe4 <__sfvwrite_r+0x150>
   84146:	9800      	ldr	r0, [sp, #0]
   84148:	f000 fcc0 	bl	84acc <_realloc_r>
   8414c:	4683      	mov	fp, r0
   8414e:	2800      	cmp	r0, #0
   84150:	d1c5      	bne.n	840de <__sfvwrite_r+0x24a>
   84152:	9d00      	ldr	r5, [sp, #0]
   84154:	6921      	ldr	r1, [r4, #16]
   84156:	4628      	mov	r0, r5
   84158:	f7ff fdb6 	bl	83cc8 <_free_r>
   8415c:	220c      	movs	r2, #12
   8415e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84162:	602a      	str	r2, [r5, #0]
   84164:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   84168:	e712      	b.n	83f90 <__sfvwrite_r+0xfc>
   8416a:	f106 0901 	add.w	r9, r6, #1
   8416e:	e720      	b.n	83fb2 <__sfvwrite_r+0x11e>
   84170:	f04f 30ff 	mov.w	r0, #4294967295
   84174:	e6bd      	b.n	83ef2 <__sfvwrite_r+0x5e>
   84176:	220c      	movs	r2, #12
   84178:	9900      	ldr	r1, [sp, #0]
   8417a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8417e:	600a      	str	r2, [r1, #0]
   84180:	e706      	b.n	83f90 <__sfvwrite_r+0xfc>
   84182:	bf00      	nop
   84184:	7ffffc00 	.word	0x7ffffc00

00084188 <_fwalk_reent>:
   84188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8418c:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   84190:	d01e      	beq.n	841d0 <_fwalk_reent+0x48>
   84192:	4688      	mov	r8, r1
   84194:	4607      	mov	r7, r0
   84196:	f04f 0900 	mov.w	r9, #0
   8419a:	6875      	ldr	r5, [r6, #4]
   8419c:	68b4      	ldr	r4, [r6, #8]
   8419e:	3d01      	subs	r5, #1
   841a0:	d410      	bmi.n	841c4 <_fwalk_reent+0x3c>
   841a2:	89a3      	ldrh	r3, [r4, #12]
   841a4:	3d01      	subs	r5, #1
   841a6:	2b01      	cmp	r3, #1
   841a8:	d908      	bls.n	841bc <_fwalk_reent+0x34>
   841aa:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   841ae:	3301      	adds	r3, #1
   841b0:	d004      	beq.n	841bc <_fwalk_reent+0x34>
   841b2:	4621      	mov	r1, r4
   841b4:	4638      	mov	r0, r7
   841b6:	47c0      	blx	r8
   841b8:	ea49 0900 	orr.w	r9, r9, r0
   841bc:	1c6b      	adds	r3, r5, #1
   841be:	f104 0468 	add.w	r4, r4, #104	; 0x68
   841c2:	d1ee      	bne.n	841a2 <_fwalk_reent+0x1a>
   841c4:	6836      	ldr	r6, [r6, #0]
   841c6:	2e00      	cmp	r6, #0
   841c8:	d1e7      	bne.n	8419a <_fwalk_reent+0x12>
   841ca:	4648      	mov	r0, r9
   841cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   841d0:	46b1      	mov	r9, r6
   841d2:	4648      	mov	r0, r9
   841d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000841d8 <__locale_mb_cur_max>:
   841d8:	4b04      	ldr	r3, [pc, #16]	; (841ec <__locale_mb_cur_max+0x14>)
   841da:	4a05      	ldr	r2, [pc, #20]	; (841f0 <__locale_mb_cur_max+0x18>)
   841dc:	681b      	ldr	r3, [r3, #0]
   841de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   841e0:	2b00      	cmp	r3, #0
   841e2:	bf08      	it	eq
   841e4:	4613      	moveq	r3, r2
   841e6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   841ea:	4770      	bx	lr
   841ec:	20070160 	.word	0x20070160
   841f0:	20070594 	.word	0x20070594

000841f4 <__retarget_lock_init_recursive>:
   841f4:	4770      	bx	lr
   841f6:	bf00      	nop

000841f8 <__retarget_lock_close_recursive>:
   841f8:	4770      	bx	lr
   841fa:	bf00      	nop

000841fc <__retarget_lock_acquire_recursive>:
   841fc:	4770      	bx	lr
   841fe:	bf00      	nop

00084200 <__retarget_lock_release_recursive>:
   84200:	4770      	bx	lr
   84202:	bf00      	nop

00084204 <__swhatbuf_r>:
   84204:	b570      	push	{r4, r5, r6, lr}
   84206:	460c      	mov	r4, r1
   84208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8420c:	b090      	sub	sp, #64	; 0x40
   8420e:	2900      	cmp	r1, #0
   84210:	4615      	mov	r5, r2
   84212:	461e      	mov	r6, r3
   84214:	db14      	blt.n	84240 <__swhatbuf_r+0x3c>
   84216:	aa01      	add	r2, sp, #4
   84218:	f000 ffde 	bl	851d8 <_fstat_r>
   8421c:	2800      	cmp	r0, #0
   8421e:	db0f      	blt.n	84240 <__swhatbuf_r+0x3c>
   84220:	9a02      	ldr	r2, [sp, #8]
   84222:	f44f 6380 	mov.w	r3, #1024	; 0x400
   84226:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8422a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8422e:	fab2 f282 	clz	r2, r2
   84232:	f44f 6000 	mov.w	r0, #2048	; 0x800
   84236:	0952      	lsrs	r2, r2, #5
   84238:	6032      	str	r2, [r6, #0]
   8423a:	602b      	str	r3, [r5, #0]
   8423c:	b010      	add	sp, #64	; 0x40
   8423e:	bd70      	pop	{r4, r5, r6, pc}
   84240:	2300      	movs	r3, #0
   84242:	89a2      	ldrh	r2, [r4, #12]
   84244:	6033      	str	r3, [r6, #0]
   84246:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   8424a:	d004      	beq.n	84256 <__swhatbuf_r+0x52>
   8424c:	2240      	movs	r2, #64	; 0x40
   8424e:	4618      	mov	r0, r3
   84250:	602a      	str	r2, [r5, #0]
   84252:	b010      	add	sp, #64	; 0x40
   84254:	bd70      	pop	{r4, r5, r6, pc}
   84256:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8425a:	602b      	str	r3, [r5, #0]
   8425c:	b010      	add	sp, #64	; 0x40
   8425e:	bd70      	pop	{r4, r5, r6, pc}

00084260 <__smakebuf_r>:
   84260:	898a      	ldrh	r2, [r1, #12]
   84262:	460b      	mov	r3, r1
   84264:	0792      	lsls	r2, r2, #30
   84266:	d506      	bpl.n	84276 <__smakebuf_r+0x16>
   84268:	2101      	movs	r1, #1
   8426a:	f103 0243 	add.w	r2, r3, #67	; 0x43
   8426e:	6159      	str	r1, [r3, #20]
   84270:	601a      	str	r2, [r3, #0]
   84272:	611a      	str	r2, [r3, #16]
   84274:	4770      	bx	lr
   84276:	b5f0      	push	{r4, r5, r6, r7, lr}
   84278:	b083      	sub	sp, #12
   8427a:	ab01      	add	r3, sp, #4
   8427c:	466a      	mov	r2, sp
   8427e:	460c      	mov	r4, r1
   84280:	4606      	mov	r6, r0
   84282:	f7ff ffbf 	bl	84204 <__swhatbuf_r>
   84286:	9900      	ldr	r1, [sp, #0]
   84288:	4605      	mov	r5, r0
   8428a:	4630      	mov	r0, r6
   8428c:	f000 f83a 	bl	84304 <_malloc_r>
   84290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84294:	b1d8      	cbz	r0, 842ce <__smakebuf_r+0x6e>
   84296:	e89d 0006 	ldmia.w	sp, {r1, r2}
   8429a:	4f15      	ldr	r7, [pc, #84]	; (842f0 <__smakebuf_r+0x90>)
   8429c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   842a0:	63f7      	str	r7, [r6, #60]	; 0x3c
   842a2:	81a3      	strh	r3, [r4, #12]
   842a4:	6020      	str	r0, [r4, #0]
   842a6:	6120      	str	r0, [r4, #16]
   842a8:	6161      	str	r1, [r4, #20]
   842aa:	b91a      	cbnz	r2, 842b4 <__smakebuf_r+0x54>
   842ac:	432b      	orrs	r3, r5
   842ae:	81a3      	strh	r3, [r4, #12]
   842b0:	b003      	add	sp, #12
   842b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   842b4:	4630      	mov	r0, r6
   842b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   842ba:	f000 ffa1 	bl	85200 <_isatty_r>
   842be:	b1a0      	cbz	r0, 842ea <__smakebuf_r+0x8a>
   842c0:	89a3      	ldrh	r3, [r4, #12]
   842c2:	f023 0303 	bic.w	r3, r3, #3
   842c6:	f043 0301 	orr.w	r3, r3, #1
   842ca:	b21b      	sxth	r3, r3
   842cc:	e7ee      	b.n	842ac <__smakebuf_r+0x4c>
   842ce:	059a      	lsls	r2, r3, #22
   842d0:	d4ee      	bmi.n	842b0 <__smakebuf_r+0x50>
   842d2:	2101      	movs	r1, #1
   842d4:	f023 0303 	bic.w	r3, r3, #3
   842d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
   842dc:	f043 0302 	orr.w	r3, r3, #2
   842e0:	81a3      	strh	r3, [r4, #12]
   842e2:	6161      	str	r1, [r4, #20]
   842e4:	6022      	str	r2, [r4, #0]
   842e6:	6122      	str	r2, [r4, #16]
   842e8:	e7e2      	b.n	842b0 <__smakebuf_r+0x50>
   842ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   842ee:	e7dd      	b.n	842ac <__smakebuf_r+0x4c>
   842f0:	00083a21 	.word	0x00083a21

000842f4 <malloc>:
   842f4:	4b02      	ldr	r3, [pc, #8]	; (84300 <malloc+0xc>)
   842f6:	4601      	mov	r1, r0
   842f8:	6818      	ldr	r0, [r3, #0]
   842fa:	f000 b803 	b.w	84304 <_malloc_r>
   842fe:	bf00      	nop
   84300:	20070160 	.word	0x20070160

00084304 <_malloc_r>:
   84304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84308:	f101 060b 	add.w	r6, r1, #11
   8430c:	2e16      	cmp	r6, #22
   8430e:	b083      	sub	sp, #12
   84310:	4605      	mov	r5, r0
   84312:	f240 809e 	bls.w	84452 <_malloc_r+0x14e>
   84316:	f036 0607 	bics.w	r6, r6, #7
   8431a:	f100 80bd 	bmi.w	84498 <_malloc_r+0x194>
   8431e:	42b1      	cmp	r1, r6
   84320:	f200 80ba 	bhi.w	84498 <_malloc_r+0x194>
   84324:	f000 fbc6 	bl	84ab4 <__malloc_lock>
   84328:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   8432c:	f0c0 8285 	bcc.w	8483a <_malloc_r+0x536>
   84330:	0a73      	lsrs	r3, r6, #9
   84332:	f000 80b8 	beq.w	844a6 <_malloc_r+0x1a2>
   84336:	2b04      	cmp	r3, #4
   84338:	f200 816c 	bhi.w	84614 <_malloc_r+0x310>
   8433c:	09b3      	lsrs	r3, r6, #6
   8433e:	f103 0039 	add.w	r0, r3, #57	; 0x39
   84342:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   84346:	00c1      	lsls	r1, r0, #3
   84348:	4fb8      	ldr	r7, [pc, #736]	; (8462c <_malloc_r+0x328>)
   8434a:	4439      	add	r1, r7
   8434c:	684c      	ldr	r4, [r1, #4]
   8434e:	3908      	subs	r1, #8
   84350:	42a1      	cmp	r1, r4
   84352:	d106      	bne.n	84362 <_malloc_r+0x5e>
   84354:	e00c      	b.n	84370 <_malloc_r+0x6c>
   84356:	2a00      	cmp	r2, #0
   84358:	f280 80ab 	bge.w	844b2 <_malloc_r+0x1ae>
   8435c:	68e4      	ldr	r4, [r4, #12]
   8435e:	42a1      	cmp	r1, r4
   84360:	d006      	beq.n	84370 <_malloc_r+0x6c>
   84362:	6863      	ldr	r3, [r4, #4]
   84364:	f023 0303 	bic.w	r3, r3, #3
   84368:	1b9a      	subs	r2, r3, r6
   8436a:	2a0f      	cmp	r2, #15
   8436c:	ddf3      	ble.n	84356 <_malloc_r+0x52>
   8436e:	4670      	mov	r0, lr
   84370:	693c      	ldr	r4, [r7, #16]
   84372:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 84640 <_malloc_r+0x33c>
   84376:	4574      	cmp	r4, lr
   84378:	f000 819e 	beq.w	846b8 <_malloc_r+0x3b4>
   8437c:	6863      	ldr	r3, [r4, #4]
   8437e:	f023 0303 	bic.w	r3, r3, #3
   84382:	1b9a      	subs	r2, r3, r6
   84384:	2a0f      	cmp	r2, #15
   84386:	f300 8183 	bgt.w	84690 <_malloc_r+0x38c>
   8438a:	2a00      	cmp	r2, #0
   8438c:	f8c7 e014 	str.w	lr, [r7, #20]
   84390:	f8c7 e010 	str.w	lr, [r7, #16]
   84394:	f280 8091 	bge.w	844ba <_malloc_r+0x1b6>
   84398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8439c:	f080 8154 	bcs.w	84648 <_malloc_r+0x344>
   843a0:	2201      	movs	r2, #1
   843a2:	08db      	lsrs	r3, r3, #3
   843a4:	6879      	ldr	r1, [r7, #4]
   843a6:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   843aa:	4413      	add	r3, r2
   843ac:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   843b0:	fa02 f20c 	lsl.w	r2, r2, ip
   843b4:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   843b8:	430a      	orrs	r2, r1
   843ba:	f1ac 0108 	sub.w	r1, ip, #8
   843be:	60e1      	str	r1, [r4, #12]
   843c0:	f8c4 8008 	str.w	r8, [r4, #8]
   843c4:	607a      	str	r2, [r7, #4]
   843c6:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   843ca:	f8c8 400c 	str.w	r4, [r8, #12]
   843ce:	2401      	movs	r4, #1
   843d0:	1083      	asrs	r3, r0, #2
   843d2:	409c      	lsls	r4, r3
   843d4:	4294      	cmp	r4, r2
   843d6:	d87d      	bhi.n	844d4 <_malloc_r+0x1d0>
   843d8:	4214      	tst	r4, r2
   843da:	d106      	bne.n	843ea <_malloc_r+0xe6>
   843dc:	f020 0003 	bic.w	r0, r0, #3
   843e0:	0064      	lsls	r4, r4, #1
   843e2:	4214      	tst	r4, r2
   843e4:	f100 0004 	add.w	r0, r0, #4
   843e8:	d0fa      	beq.n	843e0 <_malloc_r+0xdc>
   843ea:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   843ee:	46cc      	mov	ip, r9
   843f0:	4680      	mov	r8, r0
   843f2:	f8dc 300c 	ldr.w	r3, [ip, #12]
   843f6:	459c      	cmp	ip, r3
   843f8:	d107      	bne.n	8440a <_malloc_r+0x106>
   843fa:	e15f      	b.n	846bc <_malloc_r+0x3b8>
   843fc:	2a00      	cmp	r2, #0
   843fe:	f280 816d 	bge.w	846dc <_malloc_r+0x3d8>
   84402:	68db      	ldr	r3, [r3, #12]
   84404:	459c      	cmp	ip, r3
   84406:	f000 8159 	beq.w	846bc <_malloc_r+0x3b8>
   8440a:	6859      	ldr	r1, [r3, #4]
   8440c:	f021 0103 	bic.w	r1, r1, #3
   84410:	1b8a      	subs	r2, r1, r6
   84412:	2a0f      	cmp	r2, #15
   84414:	ddf2      	ble.n	843fc <_malloc_r+0xf8>
   84416:	68dc      	ldr	r4, [r3, #12]
   84418:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8441c:	f046 0801 	orr.w	r8, r6, #1
   84420:	4628      	mov	r0, r5
   84422:	441e      	add	r6, r3
   84424:	f042 0501 	orr.w	r5, r2, #1
   84428:	f8c3 8004 	str.w	r8, [r3, #4]
   8442c:	f8cc 400c 	str.w	r4, [ip, #12]
   84430:	f8c4 c008 	str.w	ip, [r4, #8]
   84434:	617e      	str	r6, [r7, #20]
   84436:	613e      	str	r6, [r7, #16]
   84438:	f8c6 e00c 	str.w	lr, [r6, #12]
   8443c:	f8c6 e008 	str.w	lr, [r6, #8]
   84440:	6075      	str	r5, [r6, #4]
   84442:	505a      	str	r2, [r3, r1]
   84444:	9300      	str	r3, [sp, #0]
   84446:	f000 fb3b 	bl	84ac0 <__malloc_unlock>
   8444a:	9b00      	ldr	r3, [sp, #0]
   8444c:	f103 0408 	add.w	r4, r3, #8
   84450:	e01e      	b.n	84490 <_malloc_r+0x18c>
   84452:	2910      	cmp	r1, #16
   84454:	d820      	bhi.n	84498 <_malloc_r+0x194>
   84456:	f000 fb2d 	bl	84ab4 <__malloc_lock>
   8445a:	2610      	movs	r6, #16
   8445c:	2318      	movs	r3, #24
   8445e:	2002      	movs	r0, #2
   84460:	4f72      	ldr	r7, [pc, #456]	; (8462c <_malloc_r+0x328>)
   84462:	443b      	add	r3, r7
   84464:	685c      	ldr	r4, [r3, #4]
   84466:	f1a3 0208 	sub.w	r2, r3, #8
   8446a:	4294      	cmp	r4, r2
   8446c:	f000 812f 	beq.w	846ce <_malloc_r+0x3ca>
   84470:	6863      	ldr	r3, [r4, #4]
   84472:	68e1      	ldr	r1, [r4, #12]
   84474:	f023 0303 	bic.w	r3, r3, #3
   84478:	4423      	add	r3, r4
   8447a:	685a      	ldr	r2, [r3, #4]
   8447c:	68a6      	ldr	r6, [r4, #8]
   8447e:	f042 0201 	orr.w	r2, r2, #1
   84482:	60f1      	str	r1, [r6, #12]
   84484:	4628      	mov	r0, r5
   84486:	608e      	str	r6, [r1, #8]
   84488:	605a      	str	r2, [r3, #4]
   8448a:	f000 fb19 	bl	84ac0 <__malloc_unlock>
   8448e:	3408      	adds	r4, #8
   84490:	4620      	mov	r0, r4
   84492:	b003      	add	sp, #12
   84494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84498:	2400      	movs	r4, #0
   8449a:	230c      	movs	r3, #12
   8449c:	4620      	mov	r0, r4
   8449e:	602b      	str	r3, [r5, #0]
   844a0:	b003      	add	sp, #12
   844a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   844a6:	2040      	movs	r0, #64	; 0x40
   844a8:	f44f 7100 	mov.w	r1, #512	; 0x200
   844ac:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   844b0:	e74a      	b.n	84348 <_malloc_r+0x44>
   844b2:	4423      	add	r3, r4
   844b4:	685a      	ldr	r2, [r3, #4]
   844b6:	68e1      	ldr	r1, [r4, #12]
   844b8:	e7e0      	b.n	8447c <_malloc_r+0x178>
   844ba:	4423      	add	r3, r4
   844bc:	685a      	ldr	r2, [r3, #4]
   844be:	4628      	mov	r0, r5
   844c0:	f042 0201 	orr.w	r2, r2, #1
   844c4:	605a      	str	r2, [r3, #4]
   844c6:	3408      	adds	r4, #8
   844c8:	f000 fafa 	bl	84ac0 <__malloc_unlock>
   844cc:	4620      	mov	r0, r4
   844ce:	b003      	add	sp, #12
   844d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   844d4:	68bc      	ldr	r4, [r7, #8]
   844d6:	6863      	ldr	r3, [r4, #4]
   844d8:	f023 0803 	bic.w	r8, r3, #3
   844dc:	45b0      	cmp	r8, r6
   844de:	d304      	bcc.n	844ea <_malloc_r+0x1e6>
   844e0:	eba8 0306 	sub.w	r3, r8, r6
   844e4:	2b0f      	cmp	r3, #15
   844e6:	f300 8085 	bgt.w	845f4 <_malloc_r+0x2f0>
   844ea:	f8df 9158 	ldr.w	r9, [pc, #344]	; 84644 <_malloc_r+0x340>
   844ee:	4b50      	ldr	r3, [pc, #320]	; (84630 <_malloc_r+0x32c>)
   844f0:	f8d9 2000 	ldr.w	r2, [r9]
   844f4:	681b      	ldr	r3, [r3, #0]
   844f6:	3201      	adds	r2, #1
   844f8:	4433      	add	r3, r6
   844fa:	eb04 0a08 	add.w	sl, r4, r8
   844fe:	f000 8154 	beq.w	847aa <_malloc_r+0x4a6>
   84502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   84506:	330f      	adds	r3, #15
   84508:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   8450c:	f02b 0b0f 	bic.w	fp, fp, #15
   84510:	4659      	mov	r1, fp
   84512:	4628      	mov	r0, r5
   84514:	f000 fc90 	bl	84e38 <_sbrk_r>
   84518:	1c41      	adds	r1, r0, #1
   8451a:	4602      	mov	r2, r0
   8451c:	f000 80fb 	beq.w	84716 <_malloc_r+0x412>
   84520:	4582      	cmp	sl, r0
   84522:	f200 80f6 	bhi.w	84712 <_malloc_r+0x40e>
   84526:	4b43      	ldr	r3, [pc, #268]	; (84634 <_malloc_r+0x330>)
   84528:	6819      	ldr	r1, [r3, #0]
   8452a:	4459      	add	r1, fp
   8452c:	6019      	str	r1, [r3, #0]
   8452e:	f000 814c 	beq.w	847ca <_malloc_r+0x4c6>
   84532:	f8d9 0000 	ldr.w	r0, [r9]
   84536:	3001      	adds	r0, #1
   84538:	bf1b      	ittet	ne
   8453a:	eba2 0a0a 	subne.w	sl, r2, sl
   8453e:	4451      	addne	r1, sl
   84540:	f8c9 2000 	streq.w	r2, [r9]
   84544:	6019      	strne	r1, [r3, #0]
   84546:	f012 0107 	ands.w	r1, r2, #7
   8454a:	f000 8114 	beq.w	84776 <_malloc_r+0x472>
   8454e:	f1c1 0008 	rsb	r0, r1, #8
   84552:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   84556:	4402      	add	r2, r0
   84558:	3108      	adds	r1, #8
   8455a:	eb02 090b 	add.w	r9, r2, fp
   8455e:	f3c9 090b 	ubfx	r9, r9, #0, #12
   84562:	eba1 0909 	sub.w	r9, r1, r9
   84566:	4649      	mov	r1, r9
   84568:	4628      	mov	r0, r5
   8456a:	9301      	str	r3, [sp, #4]
   8456c:	9200      	str	r2, [sp, #0]
   8456e:	f000 fc63 	bl	84e38 <_sbrk_r>
   84572:	1c43      	adds	r3, r0, #1
   84574:	e89d 000c 	ldmia.w	sp, {r2, r3}
   84578:	f000 8142 	beq.w	84800 <_malloc_r+0x4fc>
   8457c:	1a80      	subs	r0, r0, r2
   8457e:	4448      	add	r0, r9
   84580:	f040 0001 	orr.w	r0, r0, #1
   84584:	6819      	ldr	r1, [r3, #0]
   84586:	42bc      	cmp	r4, r7
   84588:	4449      	add	r1, r9
   8458a:	60ba      	str	r2, [r7, #8]
   8458c:	6019      	str	r1, [r3, #0]
   8458e:	6050      	str	r0, [r2, #4]
   84590:	d017      	beq.n	845c2 <_malloc_r+0x2be>
   84592:	f1b8 0f0f 	cmp.w	r8, #15
   84596:	f240 80fa 	bls.w	8478e <_malloc_r+0x48a>
   8459a:	f04f 0c05 	mov.w	ip, #5
   8459e:	6862      	ldr	r2, [r4, #4]
   845a0:	f1a8 000c 	sub.w	r0, r8, #12
   845a4:	f020 0007 	bic.w	r0, r0, #7
   845a8:	f002 0201 	and.w	r2, r2, #1
   845ac:	eb04 0e00 	add.w	lr, r4, r0
   845b0:	4302      	orrs	r2, r0
   845b2:	280f      	cmp	r0, #15
   845b4:	6062      	str	r2, [r4, #4]
   845b6:	f8ce c004 	str.w	ip, [lr, #4]
   845ba:	f8ce c008 	str.w	ip, [lr, #8]
   845be:	f200 8116 	bhi.w	847ee <_malloc_r+0x4ea>
   845c2:	4b1d      	ldr	r3, [pc, #116]	; (84638 <_malloc_r+0x334>)
   845c4:	68bc      	ldr	r4, [r7, #8]
   845c6:	681a      	ldr	r2, [r3, #0]
   845c8:	4291      	cmp	r1, r2
   845ca:	bf88      	it	hi
   845cc:	6019      	strhi	r1, [r3, #0]
   845ce:	4b1b      	ldr	r3, [pc, #108]	; (8463c <_malloc_r+0x338>)
   845d0:	681a      	ldr	r2, [r3, #0]
   845d2:	4291      	cmp	r1, r2
   845d4:	6862      	ldr	r2, [r4, #4]
   845d6:	bf88      	it	hi
   845d8:	6019      	strhi	r1, [r3, #0]
   845da:	f022 0203 	bic.w	r2, r2, #3
   845de:	4296      	cmp	r6, r2
   845e0:	eba2 0306 	sub.w	r3, r2, r6
   845e4:	d801      	bhi.n	845ea <_malloc_r+0x2e6>
   845e6:	2b0f      	cmp	r3, #15
   845e8:	dc04      	bgt.n	845f4 <_malloc_r+0x2f0>
   845ea:	4628      	mov	r0, r5
   845ec:	f000 fa68 	bl	84ac0 <__malloc_unlock>
   845f0:	2400      	movs	r4, #0
   845f2:	e74d      	b.n	84490 <_malloc_r+0x18c>
   845f4:	f046 0201 	orr.w	r2, r6, #1
   845f8:	f043 0301 	orr.w	r3, r3, #1
   845fc:	4426      	add	r6, r4
   845fe:	6062      	str	r2, [r4, #4]
   84600:	4628      	mov	r0, r5
   84602:	60be      	str	r6, [r7, #8]
   84604:	3408      	adds	r4, #8
   84606:	6073      	str	r3, [r6, #4]
   84608:	f000 fa5a 	bl	84ac0 <__malloc_unlock>
   8460c:	4620      	mov	r0, r4
   8460e:	b003      	add	sp, #12
   84610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84614:	2b14      	cmp	r3, #20
   84616:	d970      	bls.n	846fa <_malloc_r+0x3f6>
   84618:	2b54      	cmp	r3, #84	; 0x54
   8461a:	f200 80a2 	bhi.w	84762 <_malloc_r+0x45e>
   8461e:	0b33      	lsrs	r3, r6, #12
   84620:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   84624:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   84628:	00c1      	lsls	r1, r0, #3
   8462a:	e68d      	b.n	84348 <_malloc_r+0x44>
   8462c:	20070700 	.word	0x20070700
   84630:	20070f9c 	.word	0x20070f9c
   84634:	20070f6c 	.word	0x20070f6c
   84638:	20070f94 	.word	0x20070f94
   8463c:	20070f98 	.word	0x20070f98
   84640:	20070708 	.word	0x20070708
   84644:	20070b08 	.word	0x20070b08
   84648:	0a5a      	lsrs	r2, r3, #9
   8464a:	2a04      	cmp	r2, #4
   8464c:	d95b      	bls.n	84706 <_malloc_r+0x402>
   8464e:	2a14      	cmp	r2, #20
   84650:	f200 80ae 	bhi.w	847b0 <_malloc_r+0x4ac>
   84654:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   84658:	00c9      	lsls	r1, r1, #3
   8465a:	325b      	adds	r2, #91	; 0x5b
   8465c:	eb07 0c01 	add.w	ip, r7, r1
   84660:	5879      	ldr	r1, [r7, r1]
   84662:	f1ac 0c08 	sub.w	ip, ip, #8
   84666:	458c      	cmp	ip, r1
   84668:	f000 8088 	beq.w	8477c <_malloc_r+0x478>
   8466c:	684a      	ldr	r2, [r1, #4]
   8466e:	f022 0203 	bic.w	r2, r2, #3
   84672:	4293      	cmp	r3, r2
   84674:	d273      	bcs.n	8475e <_malloc_r+0x45a>
   84676:	6889      	ldr	r1, [r1, #8]
   84678:	458c      	cmp	ip, r1
   8467a:	d1f7      	bne.n	8466c <_malloc_r+0x368>
   8467c:	f8dc 300c 	ldr.w	r3, [ip, #12]
   84680:	687a      	ldr	r2, [r7, #4]
   84682:	60e3      	str	r3, [r4, #12]
   84684:	f8c4 c008 	str.w	ip, [r4, #8]
   84688:	609c      	str	r4, [r3, #8]
   8468a:	f8cc 400c 	str.w	r4, [ip, #12]
   8468e:	e69e      	b.n	843ce <_malloc_r+0xca>
   84690:	f046 0c01 	orr.w	ip, r6, #1
   84694:	f042 0101 	orr.w	r1, r2, #1
   84698:	4426      	add	r6, r4
   8469a:	f8c4 c004 	str.w	ip, [r4, #4]
   8469e:	4628      	mov	r0, r5
   846a0:	617e      	str	r6, [r7, #20]
   846a2:	613e      	str	r6, [r7, #16]
   846a4:	f8c6 e00c 	str.w	lr, [r6, #12]
   846a8:	f8c6 e008 	str.w	lr, [r6, #8]
   846ac:	6071      	str	r1, [r6, #4]
   846ae:	50e2      	str	r2, [r4, r3]
   846b0:	f000 fa06 	bl	84ac0 <__malloc_unlock>
   846b4:	3408      	adds	r4, #8
   846b6:	e6eb      	b.n	84490 <_malloc_r+0x18c>
   846b8:	687a      	ldr	r2, [r7, #4]
   846ba:	e688      	b.n	843ce <_malloc_r+0xca>
   846bc:	f108 0801 	add.w	r8, r8, #1
   846c0:	f018 0f03 	tst.w	r8, #3
   846c4:	f10c 0c08 	add.w	ip, ip, #8
   846c8:	f47f ae93 	bne.w	843f2 <_malloc_r+0xee>
   846cc:	e02d      	b.n	8472a <_malloc_r+0x426>
   846ce:	68dc      	ldr	r4, [r3, #12]
   846d0:	42a3      	cmp	r3, r4
   846d2:	bf08      	it	eq
   846d4:	3002      	addeq	r0, #2
   846d6:	f43f ae4b 	beq.w	84370 <_malloc_r+0x6c>
   846da:	e6c9      	b.n	84470 <_malloc_r+0x16c>
   846dc:	461c      	mov	r4, r3
   846de:	4419      	add	r1, r3
   846e0:	684a      	ldr	r2, [r1, #4]
   846e2:	68db      	ldr	r3, [r3, #12]
   846e4:	f854 6f08 	ldr.w	r6, [r4, #8]!
   846e8:	f042 0201 	orr.w	r2, r2, #1
   846ec:	604a      	str	r2, [r1, #4]
   846ee:	4628      	mov	r0, r5
   846f0:	60f3      	str	r3, [r6, #12]
   846f2:	609e      	str	r6, [r3, #8]
   846f4:	f000 f9e4 	bl	84ac0 <__malloc_unlock>
   846f8:	e6ca      	b.n	84490 <_malloc_r+0x18c>
   846fa:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   846fe:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   84702:	00c1      	lsls	r1, r0, #3
   84704:	e620      	b.n	84348 <_malloc_r+0x44>
   84706:	099a      	lsrs	r2, r3, #6
   84708:	f102 0139 	add.w	r1, r2, #57	; 0x39
   8470c:	00c9      	lsls	r1, r1, #3
   8470e:	3238      	adds	r2, #56	; 0x38
   84710:	e7a4      	b.n	8465c <_malloc_r+0x358>
   84712:	42bc      	cmp	r4, r7
   84714:	d054      	beq.n	847c0 <_malloc_r+0x4bc>
   84716:	68bc      	ldr	r4, [r7, #8]
   84718:	6862      	ldr	r2, [r4, #4]
   8471a:	f022 0203 	bic.w	r2, r2, #3
   8471e:	e75e      	b.n	845de <_malloc_r+0x2da>
   84720:	f859 3908 	ldr.w	r3, [r9], #-8
   84724:	4599      	cmp	r9, r3
   84726:	f040 8086 	bne.w	84836 <_malloc_r+0x532>
   8472a:	f010 0f03 	tst.w	r0, #3
   8472e:	f100 30ff 	add.w	r0, r0, #4294967295
   84732:	d1f5      	bne.n	84720 <_malloc_r+0x41c>
   84734:	687b      	ldr	r3, [r7, #4]
   84736:	ea23 0304 	bic.w	r3, r3, r4
   8473a:	607b      	str	r3, [r7, #4]
   8473c:	0064      	lsls	r4, r4, #1
   8473e:	429c      	cmp	r4, r3
   84740:	f63f aec8 	bhi.w	844d4 <_malloc_r+0x1d0>
   84744:	2c00      	cmp	r4, #0
   84746:	f43f aec5 	beq.w	844d4 <_malloc_r+0x1d0>
   8474a:	421c      	tst	r4, r3
   8474c:	4640      	mov	r0, r8
   8474e:	f47f ae4c 	bne.w	843ea <_malloc_r+0xe6>
   84752:	0064      	lsls	r4, r4, #1
   84754:	421c      	tst	r4, r3
   84756:	f100 0004 	add.w	r0, r0, #4
   8475a:	d0fa      	beq.n	84752 <_malloc_r+0x44e>
   8475c:	e645      	b.n	843ea <_malloc_r+0xe6>
   8475e:	468c      	mov	ip, r1
   84760:	e78c      	b.n	8467c <_malloc_r+0x378>
   84762:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   84766:	d815      	bhi.n	84794 <_malloc_r+0x490>
   84768:	0bf3      	lsrs	r3, r6, #15
   8476a:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8476e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   84772:	00c1      	lsls	r1, r0, #3
   84774:	e5e8      	b.n	84348 <_malloc_r+0x44>
   84776:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8477a:	e6ee      	b.n	8455a <_malloc_r+0x256>
   8477c:	2101      	movs	r1, #1
   8477e:	687b      	ldr	r3, [r7, #4]
   84780:	1092      	asrs	r2, r2, #2
   84782:	fa01 f202 	lsl.w	r2, r1, r2
   84786:	431a      	orrs	r2, r3
   84788:	607a      	str	r2, [r7, #4]
   8478a:	4663      	mov	r3, ip
   8478c:	e779      	b.n	84682 <_malloc_r+0x37e>
   8478e:	2301      	movs	r3, #1
   84790:	6053      	str	r3, [r2, #4]
   84792:	e72a      	b.n	845ea <_malloc_r+0x2e6>
   84794:	f240 5254 	movw	r2, #1364	; 0x554
   84798:	4293      	cmp	r3, r2
   8479a:	d822      	bhi.n	847e2 <_malloc_r+0x4de>
   8479c:	0cb3      	lsrs	r3, r6, #18
   8479e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   847a2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   847a6:	00c1      	lsls	r1, r0, #3
   847a8:	e5ce      	b.n	84348 <_malloc_r+0x44>
   847aa:	f103 0b10 	add.w	fp, r3, #16
   847ae:	e6af      	b.n	84510 <_malloc_r+0x20c>
   847b0:	2a54      	cmp	r2, #84	; 0x54
   847b2:	d829      	bhi.n	84808 <_malloc_r+0x504>
   847b4:	0b1a      	lsrs	r2, r3, #12
   847b6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   847ba:	00c9      	lsls	r1, r1, #3
   847bc:	326e      	adds	r2, #110	; 0x6e
   847be:	e74d      	b.n	8465c <_malloc_r+0x358>
   847c0:	4b20      	ldr	r3, [pc, #128]	; (84844 <_malloc_r+0x540>)
   847c2:	6819      	ldr	r1, [r3, #0]
   847c4:	4459      	add	r1, fp
   847c6:	6019      	str	r1, [r3, #0]
   847c8:	e6b3      	b.n	84532 <_malloc_r+0x22e>
   847ca:	f3ca 000b 	ubfx	r0, sl, #0, #12
   847ce:	2800      	cmp	r0, #0
   847d0:	f47f aeaf 	bne.w	84532 <_malloc_r+0x22e>
   847d4:	eb08 030b 	add.w	r3, r8, fp
   847d8:	68ba      	ldr	r2, [r7, #8]
   847da:	f043 0301 	orr.w	r3, r3, #1
   847de:	6053      	str	r3, [r2, #4]
   847e0:	e6ef      	b.n	845c2 <_malloc_r+0x2be>
   847e2:	207f      	movs	r0, #127	; 0x7f
   847e4:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   847e8:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   847ec:	e5ac      	b.n	84348 <_malloc_r+0x44>
   847ee:	f104 0108 	add.w	r1, r4, #8
   847f2:	4628      	mov	r0, r5
   847f4:	9300      	str	r3, [sp, #0]
   847f6:	f7ff fa67 	bl	83cc8 <_free_r>
   847fa:	9b00      	ldr	r3, [sp, #0]
   847fc:	6819      	ldr	r1, [r3, #0]
   847fe:	e6e0      	b.n	845c2 <_malloc_r+0x2be>
   84800:	2001      	movs	r0, #1
   84802:	f04f 0900 	mov.w	r9, #0
   84806:	e6bd      	b.n	84584 <_malloc_r+0x280>
   84808:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8480c:	d805      	bhi.n	8481a <_malloc_r+0x516>
   8480e:	0bda      	lsrs	r2, r3, #15
   84810:	f102 0178 	add.w	r1, r2, #120	; 0x78
   84814:	00c9      	lsls	r1, r1, #3
   84816:	3277      	adds	r2, #119	; 0x77
   84818:	e720      	b.n	8465c <_malloc_r+0x358>
   8481a:	f240 5154 	movw	r1, #1364	; 0x554
   8481e:	428a      	cmp	r2, r1
   84820:	d805      	bhi.n	8482e <_malloc_r+0x52a>
   84822:	0c9a      	lsrs	r2, r3, #18
   84824:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   84828:	00c9      	lsls	r1, r1, #3
   8482a:	327c      	adds	r2, #124	; 0x7c
   8482c:	e716      	b.n	8465c <_malloc_r+0x358>
   8482e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   84832:	227e      	movs	r2, #126	; 0x7e
   84834:	e712      	b.n	8465c <_malloc_r+0x358>
   84836:	687b      	ldr	r3, [r7, #4]
   84838:	e780      	b.n	8473c <_malloc_r+0x438>
   8483a:	08f0      	lsrs	r0, r6, #3
   8483c:	f106 0308 	add.w	r3, r6, #8
   84840:	e60e      	b.n	84460 <_malloc_r+0x15c>
   84842:	bf00      	nop
   84844:	20070f6c 	.word	0x20070f6c

00084848 <__ascii_mbtowc>:
   84848:	b082      	sub	sp, #8
   8484a:	b149      	cbz	r1, 84860 <__ascii_mbtowc+0x18>
   8484c:	b15a      	cbz	r2, 84866 <__ascii_mbtowc+0x1e>
   8484e:	b16b      	cbz	r3, 8486c <__ascii_mbtowc+0x24>
   84850:	7813      	ldrb	r3, [r2, #0]
   84852:	600b      	str	r3, [r1, #0]
   84854:	7812      	ldrb	r2, [r2, #0]
   84856:	1c10      	adds	r0, r2, #0
   84858:	bf18      	it	ne
   8485a:	2001      	movne	r0, #1
   8485c:	b002      	add	sp, #8
   8485e:	4770      	bx	lr
   84860:	a901      	add	r1, sp, #4
   84862:	2a00      	cmp	r2, #0
   84864:	d1f3      	bne.n	8484e <__ascii_mbtowc+0x6>
   84866:	4610      	mov	r0, r2
   84868:	b002      	add	sp, #8
   8486a:	4770      	bx	lr
   8486c:	f06f 0001 	mvn.w	r0, #1
   84870:	e7f4      	b.n	8485c <__ascii_mbtowc+0x14>
   84872:	bf00      	nop

00084874 <memchr>:
   84874:	0783      	lsls	r3, r0, #30
   84876:	b470      	push	{r4, r5, r6}
   84878:	b2cd      	uxtb	r5, r1
   8487a:	d03d      	beq.n	848f8 <memchr+0x84>
   8487c:	1e54      	subs	r4, r2, #1
   8487e:	b30a      	cbz	r2, 848c4 <memchr+0x50>
   84880:	7803      	ldrb	r3, [r0, #0]
   84882:	42ab      	cmp	r3, r5
   84884:	d01f      	beq.n	848c6 <memchr+0x52>
   84886:	1c43      	adds	r3, r0, #1
   84888:	e005      	b.n	84896 <memchr+0x22>
   8488a:	f114 34ff 	adds.w	r4, r4, #4294967295
   8488e:	d319      	bcc.n	848c4 <memchr+0x50>
   84890:	7802      	ldrb	r2, [r0, #0]
   84892:	42aa      	cmp	r2, r5
   84894:	d017      	beq.n	848c6 <memchr+0x52>
   84896:	f013 0f03 	tst.w	r3, #3
   8489a:	4618      	mov	r0, r3
   8489c:	f103 0301 	add.w	r3, r3, #1
   848a0:	d1f3      	bne.n	8488a <memchr+0x16>
   848a2:	2c03      	cmp	r4, #3
   848a4:	d811      	bhi.n	848ca <memchr+0x56>
   848a6:	b34c      	cbz	r4, 848fc <memchr+0x88>
   848a8:	7803      	ldrb	r3, [r0, #0]
   848aa:	42ab      	cmp	r3, r5
   848ac:	d00b      	beq.n	848c6 <memchr+0x52>
   848ae:	4404      	add	r4, r0
   848b0:	1c43      	adds	r3, r0, #1
   848b2:	e002      	b.n	848ba <memchr+0x46>
   848b4:	7802      	ldrb	r2, [r0, #0]
   848b6:	42aa      	cmp	r2, r5
   848b8:	d005      	beq.n	848c6 <memchr+0x52>
   848ba:	429c      	cmp	r4, r3
   848bc:	4618      	mov	r0, r3
   848be:	f103 0301 	add.w	r3, r3, #1
   848c2:	d1f7      	bne.n	848b4 <memchr+0x40>
   848c4:	2000      	movs	r0, #0
   848c6:	bc70      	pop	{r4, r5, r6}
   848c8:	4770      	bx	lr
   848ca:	0209      	lsls	r1, r1, #8
   848cc:	b289      	uxth	r1, r1
   848ce:	4329      	orrs	r1, r5
   848d0:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   848d4:	6803      	ldr	r3, [r0, #0]
   848d6:	4606      	mov	r6, r0
   848d8:	404b      	eors	r3, r1
   848da:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   848de:	ea22 0303 	bic.w	r3, r2, r3
   848e2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   848e6:	f100 0004 	add.w	r0, r0, #4
   848ea:	d103      	bne.n	848f4 <memchr+0x80>
   848ec:	3c04      	subs	r4, #4
   848ee:	2c03      	cmp	r4, #3
   848f0:	d8f0      	bhi.n	848d4 <memchr+0x60>
   848f2:	e7d8      	b.n	848a6 <memchr+0x32>
   848f4:	4630      	mov	r0, r6
   848f6:	e7d7      	b.n	848a8 <memchr+0x34>
   848f8:	4614      	mov	r4, r2
   848fa:	e7d2      	b.n	848a2 <memchr+0x2e>
   848fc:	4620      	mov	r0, r4
   848fe:	e7e2      	b.n	848c6 <memchr+0x52>

00084900 <memcpy>:
   84900:	4684      	mov	ip, r0
   84902:	ea41 0300 	orr.w	r3, r1, r0
   84906:	f013 0303 	ands.w	r3, r3, #3
   8490a:	d149      	bne.n	849a0 <memcpy+0xa0>
   8490c:	3a40      	subs	r2, #64	; 0x40
   8490e:	d323      	bcc.n	84958 <memcpy+0x58>
   84910:	680b      	ldr	r3, [r1, #0]
   84912:	6003      	str	r3, [r0, #0]
   84914:	684b      	ldr	r3, [r1, #4]
   84916:	6043      	str	r3, [r0, #4]
   84918:	688b      	ldr	r3, [r1, #8]
   8491a:	6083      	str	r3, [r0, #8]
   8491c:	68cb      	ldr	r3, [r1, #12]
   8491e:	60c3      	str	r3, [r0, #12]
   84920:	690b      	ldr	r3, [r1, #16]
   84922:	6103      	str	r3, [r0, #16]
   84924:	694b      	ldr	r3, [r1, #20]
   84926:	6143      	str	r3, [r0, #20]
   84928:	698b      	ldr	r3, [r1, #24]
   8492a:	6183      	str	r3, [r0, #24]
   8492c:	69cb      	ldr	r3, [r1, #28]
   8492e:	61c3      	str	r3, [r0, #28]
   84930:	6a0b      	ldr	r3, [r1, #32]
   84932:	6203      	str	r3, [r0, #32]
   84934:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   84936:	6243      	str	r3, [r0, #36]	; 0x24
   84938:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8493a:	6283      	str	r3, [r0, #40]	; 0x28
   8493c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8493e:	62c3      	str	r3, [r0, #44]	; 0x2c
   84940:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   84942:	6303      	str	r3, [r0, #48]	; 0x30
   84944:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   84946:	6343      	str	r3, [r0, #52]	; 0x34
   84948:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8494a:	6383      	str	r3, [r0, #56]	; 0x38
   8494c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8494e:	63c3      	str	r3, [r0, #60]	; 0x3c
   84950:	3040      	adds	r0, #64	; 0x40
   84952:	3140      	adds	r1, #64	; 0x40
   84954:	3a40      	subs	r2, #64	; 0x40
   84956:	d2db      	bcs.n	84910 <memcpy+0x10>
   84958:	3230      	adds	r2, #48	; 0x30
   8495a:	d30b      	bcc.n	84974 <memcpy+0x74>
   8495c:	680b      	ldr	r3, [r1, #0]
   8495e:	6003      	str	r3, [r0, #0]
   84960:	684b      	ldr	r3, [r1, #4]
   84962:	6043      	str	r3, [r0, #4]
   84964:	688b      	ldr	r3, [r1, #8]
   84966:	6083      	str	r3, [r0, #8]
   84968:	68cb      	ldr	r3, [r1, #12]
   8496a:	60c3      	str	r3, [r0, #12]
   8496c:	3010      	adds	r0, #16
   8496e:	3110      	adds	r1, #16
   84970:	3a10      	subs	r2, #16
   84972:	d2f3      	bcs.n	8495c <memcpy+0x5c>
   84974:	320c      	adds	r2, #12
   84976:	d305      	bcc.n	84984 <memcpy+0x84>
   84978:	f851 3b04 	ldr.w	r3, [r1], #4
   8497c:	f840 3b04 	str.w	r3, [r0], #4
   84980:	3a04      	subs	r2, #4
   84982:	d2f9      	bcs.n	84978 <memcpy+0x78>
   84984:	3204      	adds	r2, #4
   84986:	d008      	beq.n	8499a <memcpy+0x9a>
   84988:	07d2      	lsls	r2, r2, #31
   8498a:	bf1c      	itt	ne
   8498c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   84990:	f800 3b01 	strbne.w	r3, [r0], #1
   84994:	d301      	bcc.n	8499a <memcpy+0x9a>
   84996:	880b      	ldrh	r3, [r1, #0]
   84998:	8003      	strh	r3, [r0, #0]
   8499a:	4660      	mov	r0, ip
   8499c:	4770      	bx	lr
   8499e:	bf00      	nop
   849a0:	2a08      	cmp	r2, #8
   849a2:	d313      	bcc.n	849cc <memcpy+0xcc>
   849a4:	078b      	lsls	r3, r1, #30
   849a6:	d0b1      	beq.n	8490c <memcpy+0xc>
   849a8:	f010 0303 	ands.w	r3, r0, #3
   849ac:	d0ae      	beq.n	8490c <memcpy+0xc>
   849ae:	f1c3 0304 	rsb	r3, r3, #4
   849b2:	1ad2      	subs	r2, r2, r3
   849b4:	07db      	lsls	r3, r3, #31
   849b6:	bf1c      	itt	ne
   849b8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   849bc:	f800 3b01 	strbne.w	r3, [r0], #1
   849c0:	d3a4      	bcc.n	8490c <memcpy+0xc>
   849c2:	f831 3b02 	ldrh.w	r3, [r1], #2
   849c6:	f820 3b02 	strh.w	r3, [r0], #2
   849ca:	e79f      	b.n	8490c <memcpy+0xc>
   849cc:	3a04      	subs	r2, #4
   849ce:	d3d9      	bcc.n	84984 <memcpy+0x84>
   849d0:	3a01      	subs	r2, #1
   849d2:	f811 3b01 	ldrb.w	r3, [r1], #1
   849d6:	f800 3b01 	strb.w	r3, [r0], #1
   849da:	d2f9      	bcs.n	849d0 <memcpy+0xd0>
   849dc:	780b      	ldrb	r3, [r1, #0]
   849de:	7003      	strb	r3, [r0, #0]
   849e0:	784b      	ldrb	r3, [r1, #1]
   849e2:	7043      	strb	r3, [r0, #1]
   849e4:	788b      	ldrb	r3, [r1, #2]
   849e6:	7083      	strb	r3, [r0, #2]
   849e8:	4660      	mov	r0, ip
   849ea:	4770      	bx	lr

000849ec <memmove>:
   849ec:	4288      	cmp	r0, r1
   849ee:	b5f0      	push	{r4, r5, r6, r7, lr}
   849f0:	d90d      	bls.n	84a0e <memmove+0x22>
   849f2:	188b      	adds	r3, r1, r2
   849f4:	4298      	cmp	r0, r3
   849f6:	d20a      	bcs.n	84a0e <memmove+0x22>
   849f8:	1884      	adds	r4, r0, r2
   849fa:	2a00      	cmp	r2, #0
   849fc:	d051      	beq.n	84aa2 <memmove+0xb6>
   849fe:	4622      	mov	r2, r4
   84a00:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   84a04:	4299      	cmp	r1, r3
   84a06:	f802 4d01 	strb.w	r4, [r2, #-1]!
   84a0a:	d1f9      	bne.n	84a00 <memmove+0x14>
   84a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84a0e:	2a0f      	cmp	r2, #15
   84a10:	d948      	bls.n	84aa4 <memmove+0xb8>
   84a12:	ea41 0300 	orr.w	r3, r1, r0
   84a16:	079b      	lsls	r3, r3, #30
   84a18:	d146      	bne.n	84aa8 <memmove+0xbc>
   84a1a:	4615      	mov	r5, r2
   84a1c:	f100 0410 	add.w	r4, r0, #16
   84a20:	f101 0310 	add.w	r3, r1, #16
   84a24:	f853 6c10 	ldr.w	r6, [r3, #-16]
   84a28:	3d10      	subs	r5, #16
   84a2a:	f844 6c10 	str.w	r6, [r4, #-16]
   84a2e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   84a32:	2d0f      	cmp	r5, #15
   84a34:	f844 6c0c 	str.w	r6, [r4, #-12]
   84a38:	f853 6c08 	ldr.w	r6, [r3, #-8]
   84a3c:	f104 0410 	add.w	r4, r4, #16
   84a40:	f844 6c18 	str.w	r6, [r4, #-24]
   84a44:	f853 6c04 	ldr.w	r6, [r3, #-4]
   84a48:	f103 0310 	add.w	r3, r3, #16
   84a4c:	f844 6c14 	str.w	r6, [r4, #-20]
   84a50:	d8e8      	bhi.n	84a24 <memmove+0x38>
   84a52:	f1a2 0310 	sub.w	r3, r2, #16
   84a56:	f023 030f 	bic.w	r3, r3, #15
   84a5a:	f002 0e0f 	and.w	lr, r2, #15
   84a5e:	3310      	adds	r3, #16
   84a60:	f1be 0f03 	cmp.w	lr, #3
   84a64:	4419      	add	r1, r3
   84a66:	4403      	add	r3, r0
   84a68:	d921      	bls.n	84aae <memmove+0xc2>
   84a6a:	460e      	mov	r6, r1
   84a6c:	4674      	mov	r4, lr
   84a6e:	1f1d      	subs	r5, r3, #4
   84a70:	f856 7b04 	ldr.w	r7, [r6], #4
   84a74:	3c04      	subs	r4, #4
   84a76:	2c03      	cmp	r4, #3
   84a78:	f845 7f04 	str.w	r7, [r5, #4]!
   84a7c:	d8f8      	bhi.n	84a70 <memmove+0x84>
   84a7e:	f1ae 0404 	sub.w	r4, lr, #4
   84a82:	f024 0403 	bic.w	r4, r4, #3
   84a86:	3404      	adds	r4, #4
   84a88:	4421      	add	r1, r4
   84a8a:	4423      	add	r3, r4
   84a8c:	f002 0203 	and.w	r2, r2, #3
   84a90:	b162      	cbz	r2, 84aac <memmove+0xc0>
   84a92:	3b01      	subs	r3, #1
   84a94:	440a      	add	r2, r1
   84a96:	f811 4b01 	ldrb.w	r4, [r1], #1
   84a9a:	428a      	cmp	r2, r1
   84a9c:	f803 4f01 	strb.w	r4, [r3, #1]!
   84aa0:	d1f9      	bne.n	84a96 <memmove+0xaa>
   84aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84aa4:	4603      	mov	r3, r0
   84aa6:	e7f3      	b.n	84a90 <memmove+0xa4>
   84aa8:	4603      	mov	r3, r0
   84aaa:	e7f2      	b.n	84a92 <memmove+0xa6>
   84aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84aae:	4672      	mov	r2, lr
   84ab0:	e7ee      	b.n	84a90 <memmove+0xa4>
   84ab2:	bf00      	nop

00084ab4 <__malloc_lock>:
   84ab4:	4801      	ldr	r0, [pc, #4]	; (84abc <__malloc_lock+0x8>)
   84ab6:	f7ff bba1 	b.w	841fc <__retarget_lock_acquire_recursive>
   84aba:	bf00      	nop
   84abc:	20070fdc 	.word	0x20070fdc

00084ac0 <__malloc_unlock>:
   84ac0:	4801      	ldr	r0, [pc, #4]	; (84ac8 <__malloc_unlock+0x8>)
   84ac2:	f7ff bb9d 	b.w	84200 <__retarget_lock_release_recursive>
   84ac6:	bf00      	nop
   84ac8:	20070fdc 	.word	0x20070fdc

00084acc <_realloc_r>:
   84acc:	2900      	cmp	r1, #0
   84ace:	f000 8094 	beq.w	84bfa <_realloc_r+0x12e>
   84ad2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84ad6:	460c      	mov	r4, r1
   84ad8:	4615      	mov	r5, r2
   84ada:	b083      	sub	sp, #12
   84adc:	4680      	mov	r8, r0
   84ade:	f105 060b 	add.w	r6, r5, #11
   84ae2:	f7ff ffe7 	bl	84ab4 <__malloc_lock>
   84ae6:	f854 ec04 	ldr.w	lr, [r4, #-4]
   84aea:	2e16      	cmp	r6, #22
   84aec:	f02e 0703 	bic.w	r7, lr, #3
   84af0:	f1a4 0908 	sub.w	r9, r4, #8
   84af4:	d83c      	bhi.n	84b70 <_realloc_r+0xa4>
   84af6:	2210      	movs	r2, #16
   84af8:	4616      	mov	r6, r2
   84afa:	42b5      	cmp	r5, r6
   84afc:	d83d      	bhi.n	84b7a <_realloc_r+0xae>
   84afe:	4297      	cmp	r7, r2
   84b00:	da43      	bge.n	84b8a <_realloc_r+0xbe>
   84b02:	4bc6      	ldr	r3, [pc, #792]	; (84e1c <_realloc_r+0x350>)
   84b04:	eb09 0007 	add.w	r0, r9, r7
   84b08:	6899      	ldr	r1, [r3, #8]
   84b0a:	4288      	cmp	r0, r1
   84b0c:	f000 80c3 	beq.w	84c96 <_realloc_r+0x1ca>
   84b10:	6843      	ldr	r3, [r0, #4]
   84b12:	f023 0101 	bic.w	r1, r3, #1
   84b16:	4401      	add	r1, r0
   84b18:	6849      	ldr	r1, [r1, #4]
   84b1a:	07c9      	lsls	r1, r1, #31
   84b1c:	d54d      	bpl.n	84bba <_realloc_r+0xee>
   84b1e:	f01e 0f01 	tst.w	lr, #1
   84b22:	f000 809b 	beq.w	84c5c <_realloc_r+0x190>
   84b26:	4629      	mov	r1, r5
   84b28:	4640      	mov	r0, r8
   84b2a:	f7ff fbeb 	bl	84304 <_malloc_r>
   84b2e:	4605      	mov	r5, r0
   84b30:	2800      	cmp	r0, #0
   84b32:	d03b      	beq.n	84bac <_realloc_r+0xe0>
   84b34:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84b38:	f1a0 0208 	sub.w	r2, r0, #8
   84b3c:	f023 0301 	bic.w	r3, r3, #1
   84b40:	444b      	add	r3, r9
   84b42:	429a      	cmp	r2, r3
   84b44:	f000 812b 	beq.w	84d9e <_realloc_r+0x2d2>
   84b48:	1f3a      	subs	r2, r7, #4
   84b4a:	2a24      	cmp	r2, #36	; 0x24
   84b4c:	f200 8118 	bhi.w	84d80 <_realloc_r+0x2b4>
   84b50:	2a13      	cmp	r2, #19
   84b52:	f200 80eb 	bhi.w	84d2c <_realloc_r+0x260>
   84b56:	4603      	mov	r3, r0
   84b58:	4622      	mov	r2, r4
   84b5a:	6811      	ldr	r1, [r2, #0]
   84b5c:	6019      	str	r1, [r3, #0]
   84b5e:	6851      	ldr	r1, [r2, #4]
   84b60:	6059      	str	r1, [r3, #4]
   84b62:	6892      	ldr	r2, [r2, #8]
   84b64:	609a      	str	r2, [r3, #8]
   84b66:	4621      	mov	r1, r4
   84b68:	4640      	mov	r0, r8
   84b6a:	f7ff f8ad 	bl	83cc8 <_free_r>
   84b6e:	e01d      	b.n	84bac <_realloc_r+0xe0>
   84b70:	f026 0607 	bic.w	r6, r6, #7
   84b74:	2e00      	cmp	r6, #0
   84b76:	4632      	mov	r2, r6
   84b78:	dabf      	bge.n	84afa <_realloc_r+0x2e>
   84b7a:	2500      	movs	r5, #0
   84b7c:	230c      	movs	r3, #12
   84b7e:	4628      	mov	r0, r5
   84b80:	f8c8 3000 	str.w	r3, [r8]
   84b84:	b003      	add	sp, #12
   84b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84b8a:	4625      	mov	r5, r4
   84b8c:	1bbb      	subs	r3, r7, r6
   84b8e:	2b0f      	cmp	r3, #15
   84b90:	f8d9 2004 	ldr.w	r2, [r9, #4]
   84b94:	d81d      	bhi.n	84bd2 <_realloc_r+0x106>
   84b96:	f002 0201 	and.w	r2, r2, #1
   84b9a:	433a      	orrs	r2, r7
   84b9c:	eb09 0107 	add.w	r1, r9, r7
   84ba0:	f8c9 2004 	str.w	r2, [r9, #4]
   84ba4:	684b      	ldr	r3, [r1, #4]
   84ba6:	f043 0301 	orr.w	r3, r3, #1
   84baa:	604b      	str	r3, [r1, #4]
   84bac:	4640      	mov	r0, r8
   84bae:	f7ff ff87 	bl	84ac0 <__malloc_unlock>
   84bb2:	4628      	mov	r0, r5
   84bb4:	b003      	add	sp, #12
   84bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84bba:	f023 0303 	bic.w	r3, r3, #3
   84bbe:	18f9      	adds	r1, r7, r3
   84bc0:	4291      	cmp	r1, r2
   84bc2:	db1d      	blt.n	84c00 <_realloc_r+0x134>
   84bc4:	68c3      	ldr	r3, [r0, #12]
   84bc6:	6882      	ldr	r2, [r0, #8]
   84bc8:	4625      	mov	r5, r4
   84bca:	60d3      	str	r3, [r2, #12]
   84bcc:	460f      	mov	r7, r1
   84bce:	609a      	str	r2, [r3, #8]
   84bd0:	e7dc      	b.n	84b8c <_realloc_r+0xc0>
   84bd2:	f002 0201 	and.w	r2, r2, #1
   84bd6:	eb09 0106 	add.w	r1, r9, r6
   84bda:	f043 0301 	orr.w	r3, r3, #1
   84bde:	4332      	orrs	r2, r6
   84be0:	f8c9 2004 	str.w	r2, [r9, #4]
   84be4:	444f      	add	r7, r9
   84be6:	604b      	str	r3, [r1, #4]
   84be8:	687b      	ldr	r3, [r7, #4]
   84bea:	3108      	adds	r1, #8
   84bec:	f043 0301 	orr.w	r3, r3, #1
   84bf0:	607b      	str	r3, [r7, #4]
   84bf2:	4640      	mov	r0, r8
   84bf4:	f7ff f868 	bl	83cc8 <_free_r>
   84bf8:	e7d8      	b.n	84bac <_realloc_r+0xe0>
   84bfa:	4611      	mov	r1, r2
   84bfc:	f7ff bb82 	b.w	84304 <_malloc_r>
   84c00:	f01e 0f01 	tst.w	lr, #1
   84c04:	d18f      	bne.n	84b26 <_realloc_r+0x5a>
   84c06:	f854 1c08 	ldr.w	r1, [r4, #-8]
   84c0a:	eba9 0a01 	sub.w	sl, r9, r1
   84c0e:	f8da 1004 	ldr.w	r1, [sl, #4]
   84c12:	f021 0103 	bic.w	r1, r1, #3
   84c16:	440b      	add	r3, r1
   84c18:	443b      	add	r3, r7
   84c1a:	4293      	cmp	r3, r2
   84c1c:	db26      	blt.n	84c6c <_realloc_r+0x1a0>
   84c1e:	4655      	mov	r5, sl
   84c20:	68c1      	ldr	r1, [r0, #12]
   84c22:	6880      	ldr	r0, [r0, #8]
   84c24:	1f3a      	subs	r2, r7, #4
   84c26:	60c1      	str	r1, [r0, #12]
   84c28:	6088      	str	r0, [r1, #8]
   84c2a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   84c2e:	f8da 100c 	ldr.w	r1, [sl, #12]
   84c32:	2a24      	cmp	r2, #36	; 0x24
   84c34:	60c1      	str	r1, [r0, #12]
   84c36:	6088      	str	r0, [r1, #8]
   84c38:	d826      	bhi.n	84c88 <_realloc_r+0x1bc>
   84c3a:	2a13      	cmp	r2, #19
   84c3c:	f240 8081 	bls.w	84d42 <_realloc_r+0x276>
   84c40:	6821      	ldr	r1, [r4, #0]
   84c42:	2a1b      	cmp	r2, #27
   84c44:	f8ca 1008 	str.w	r1, [sl, #8]
   84c48:	6861      	ldr	r1, [r4, #4]
   84c4a:	f8ca 100c 	str.w	r1, [sl, #12]
   84c4e:	f200 80ad 	bhi.w	84dac <_realloc_r+0x2e0>
   84c52:	f104 0008 	add.w	r0, r4, #8
   84c56:	f10a 0210 	add.w	r2, sl, #16
   84c5a:	e074      	b.n	84d46 <_realloc_r+0x27a>
   84c5c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   84c60:	eba9 0a03 	sub.w	sl, r9, r3
   84c64:	f8da 1004 	ldr.w	r1, [sl, #4]
   84c68:	f021 0103 	bic.w	r1, r1, #3
   84c6c:	187b      	adds	r3, r7, r1
   84c6e:	4293      	cmp	r3, r2
   84c70:	f6ff af59 	blt.w	84b26 <_realloc_r+0x5a>
   84c74:	4655      	mov	r5, sl
   84c76:	f8da 100c 	ldr.w	r1, [sl, #12]
   84c7a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   84c7e:	1f3a      	subs	r2, r7, #4
   84c80:	2a24      	cmp	r2, #36	; 0x24
   84c82:	60c1      	str	r1, [r0, #12]
   84c84:	6088      	str	r0, [r1, #8]
   84c86:	d9d8      	bls.n	84c3a <_realloc_r+0x16e>
   84c88:	4621      	mov	r1, r4
   84c8a:	4628      	mov	r0, r5
   84c8c:	461f      	mov	r7, r3
   84c8e:	46d1      	mov	r9, sl
   84c90:	f7ff feac 	bl	849ec <memmove>
   84c94:	e77a      	b.n	84b8c <_realloc_r+0xc0>
   84c96:	6841      	ldr	r1, [r0, #4]
   84c98:	f106 0010 	add.w	r0, r6, #16
   84c9c:	f021 0b03 	bic.w	fp, r1, #3
   84ca0:	44bb      	add	fp, r7
   84ca2:	4583      	cmp	fp, r0
   84ca4:	da58      	bge.n	84d58 <_realloc_r+0x28c>
   84ca6:	f01e 0f01 	tst.w	lr, #1
   84caa:	f47f af3c 	bne.w	84b26 <_realloc_r+0x5a>
   84cae:	f854 1c08 	ldr.w	r1, [r4, #-8]
   84cb2:	eba9 0a01 	sub.w	sl, r9, r1
   84cb6:	f8da 1004 	ldr.w	r1, [sl, #4]
   84cba:	f021 0103 	bic.w	r1, r1, #3
   84cbe:	448b      	add	fp, r1
   84cc0:	4558      	cmp	r0, fp
   84cc2:	dcd3      	bgt.n	84c6c <_realloc_r+0x1a0>
   84cc4:	4655      	mov	r5, sl
   84cc6:	f8da 100c 	ldr.w	r1, [sl, #12]
   84cca:	f855 0f08 	ldr.w	r0, [r5, #8]!
   84cce:	1f3a      	subs	r2, r7, #4
   84cd0:	2a24      	cmp	r2, #36	; 0x24
   84cd2:	60c1      	str	r1, [r0, #12]
   84cd4:	6088      	str	r0, [r1, #8]
   84cd6:	f200 808d 	bhi.w	84df4 <_realloc_r+0x328>
   84cda:	2a13      	cmp	r2, #19
   84cdc:	f240 8087 	bls.w	84dee <_realloc_r+0x322>
   84ce0:	6821      	ldr	r1, [r4, #0]
   84ce2:	2a1b      	cmp	r2, #27
   84ce4:	f8ca 1008 	str.w	r1, [sl, #8]
   84ce8:	6861      	ldr	r1, [r4, #4]
   84cea:	f8ca 100c 	str.w	r1, [sl, #12]
   84cee:	f200 8088 	bhi.w	84e02 <_realloc_r+0x336>
   84cf2:	f104 0108 	add.w	r1, r4, #8
   84cf6:	f10a 0210 	add.w	r2, sl, #16
   84cfa:	6808      	ldr	r0, [r1, #0]
   84cfc:	6010      	str	r0, [r2, #0]
   84cfe:	6848      	ldr	r0, [r1, #4]
   84d00:	6050      	str	r0, [r2, #4]
   84d02:	6889      	ldr	r1, [r1, #8]
   84d04:	6091      	str	r1, [r2, #8]
   84d06:	ebab 0206 	sub.w	r2, fp, r6
   84d0a:	eb0a 0106 	add.w	r1, sl, r6
   84d0e:	f042 0201 	orr.w	r2, r2, #1
   84d12:	6099      	str	r1, [r3, #8]
   84d14:	604a      	str	r2, [r1, #4]
   84d16:	f8da 3004 	ldr.w	r3, [sl, #4]
   84d1a:	4640      	mov	r0, r8
   84d1c:	f003 0301 	and.w	r3, r3, #1
   84d20:	431e      	orrs	r6, r3
   84d22:	f8ca 6004 	str.w	r6, [sl, #4]
   84d26:	f7ff fecb 	bl	84ac0 <__malloc_unlock>
   84d2a:	e742      	b.n	84bb2 <_realloc_r+0xe6>
   84d2c:	6823      	ldr	r3, [r4, #0]
   84d2e:	2a1b      	cmp	r2, #27
   84d30:	6003      	str	r3, [r0, #0]
   84d32:	6863      	ldr	r3, [r4, #4]
   84d34:	6043      	str	r3, [r0, #4]
   84d36:	d827      	bhi.n	84d88 <_realloc_r+0x2bc>
   84d38:	f100 0308 	add.w	r3, r0, #8
   84d3c:	f104 0208 	add.w	r2, r4, #8
   84d40:	e70b      	b.n	84b5a <_realloc_r+0x8e>
   84d42:	4620      	mov	r0, r4
   84d44:	462a      	mov	r2, r5
   84d46:	6801      	ldr	r1, [r0, #0]
   84d48:	461f      	mov	r7, r3
   84d4a:	6011      	str	r1, [r2, #0]
   84d4c:	6841      	ldr	r1, [r0, #4]
   84d4e:	46d1      	mov	r9, sl
   84d50:	6051      	str	r1, [r2, #4]
   84d52:	6883      	ldr	r3, [r0, #8]
   84d54:	6093      	str	r3, [r2, #8]
   84d56:	e719      	b.n	84b8c <_realloc_r+0xc0>
   84d58:	ebab 0b06 	sub.w	fp, fp, r6
   84d5c:	eb09 0106 	add.w	r1, r9, r6
   84d60:	f04b 0201 	orr.w	r2, fp, #1
   84d64:	6099      	str	r1, [r3, #8]
   84d66:	604a      	str	r2, [r1, #4]
   84d68:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84d6c:	4640      	mov	r0, r8
   84d6e:	f003 0301 	and.w	r3, r3, #1
   84d72:	431e      	orrs	r6, r3
   84d74:	f844 6c04 	str.w	r6, [r4, #-4]
   84d78:	f7ff fea2 	bl	84ac0 <__malloc_unlock>
   84d7c:	4625      	mov	r5, r4
   84d7e:	e718      	b.n	84bb2 <_realloc_r+0xe6>
   84d80:	4621      	mov	r1, r4
   84d82:	f7ff fe33 	bl	849ec <memmove>
   84d86:	e6ee      	b.n	84b66 <_realloc_r+0x9a>
   84d88:	68a3      	ldr	r3, [r4, #8]
   84d8a:	2a24      	cmp	r2, #36	; 0x24
   84d8c:	6083      	str	r3, [r0, #8]
   84d8e:	68e3      	ldr	r3, [r4, #12]
   84d90:	60c3      	str	r3, [r0, #12]
   84d92:	d018      	beq.n	84dc6 <_realloc_r+0x2fa>
   84d94:	f100 0310 	add.w	r3, r0, #16
   84d98:	f104 0210 	add.w	r2, r4, #16
   84d9c:	e6dd      	b.n	84b5a <_realloc_r+0x8e>
   84d9e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   84da2:	4625      	mov	r5, r4
   84da4:	f023 0303 	bic.w	r3, r3, #3
   84da8:	441f      	add	r7, r3
   84daa:	e6ef      	b.n	84b8c <_realloc_r+0xc0>
   84dac:	68a1      	ldr	r1, [r4, #8]
   84dae:	2a24      	cmp	r2, #36	; 0x24
   84db0:	f8ca 1010 	str.w	r1, [sl, #16]
   84db4:	68e1      	ldr	r1, [r4, #12]
   84db6:	f8ca 1014 	str.w	r1, [sl, #20]
   84dba:	d00d      	beq.n	84dd8 <_realloc_r+0x30c>
   84dbc:	f104 0010 	add.w	r0, r4, #16
   84dc0:	f10a 0218 	add.w	r2, sl, #24
   84dc4:	e7bf      	b.n	84d46 <_realloc_r+0x27a>
   84dc6:	6922      	ldr	r2, [r4, #16]
   84dc8:	f100 0318 	add.w	r3, r0, #24
   84dcc:	6102      	str	r2, [r0, #16]
   84dce:	6961      	ldr	r1, [r4, #20]
   84dd0:	f104 0218 	add.w	r2, r4, #24
   84dd4:	6141      	str	r1, [r0, #20]
   84dd6:	e6c0      	b.n	84b5a <_realloc_r+0x8e>
   84dd8:	6922      	ldr	r2, [r4, #16]
   84dda:	f104 0018 	add.w	r0, r4, #24
   84dde:	f8ca 2018 	str.w	r2, [sl, #24]
   84de2:	6961      	ldr	r1, [r4, #20]
   84de4:	f10a 0220 	add.w	r2, sl, #32
   84de8:	f8ca 101c 	str.w	r1, [sl, #28]
   84dec:	e7ab      	b.n	84d46 <_realloc_r+0x27a>
   84dee:	4621      	mov	r1, r4
   84df0:	462a      	mov	r2, r5
   84df2:	e782      	b.n	84cfa <_realloc_r+0x22e>
   84df4:	4621      	mov	r1, r4
   84df6:	4628      	mov	r0, r5
   84df8:	9301      	str	r3, [sp, #4]
   84dfa:	f7ff fdf7 	bl	849ec <memmove>
   84dfe:	9b01      	ldr	r3, [sp, #4]
   84e00:	e781      	b.n	84d06 <_realloc_r+0x23a>
   84e02:	68a1      	ldr	r1, [r4, #8]
   84e04:	2a24      	cmp	r2, #36	; 0x24
   84e06:	f8ca 1010 	str.w	r1, [sl, #16]
   84e0a:	68e1      	ldr	r1, [r4, #12]
   84e0c:	f8ca 1014 	str.w	r1, [sl, #20]
   84e10:	d006      	beq.n	84e20 <_realloc_r+0x354>
   84e12:	f104 0110 	add.w	r1, r4, #16
   84e16:	f10a 0218 	add.w	r2, sl, #24
   84e1a:	e76e      	b.n	84cfa <_realloc_r+0x22e>
   84e1c:	20070700 	.word	0x20070700
   84e20:	6922      	ldr	r2, [r4, #16]
   84e22:	f104 0118 	add.w	r1, r4, #24
   84e26:	f8ca 2018 	str.w	r2, [sl, #24]
   84e2a:	6960      	ldr	r0, [r4, #20]
   84e2c:	f10a 0220 	add.w	r2, sl, #32
   84e30:	f8ca 001c 	str.w	r0, [sl, #28]
   84e34:	e761      	b.n	84cfa <_realloc_r+0x22e>
   84e36:	bf00      	nop

00084e38 <_sbrk_r>:
   84e38:	b538      	push	{r3, r4, r5, lr}
   84e3a:	2300      	movs	r3, #0
   84e3c:	4c06      	ldr	r4, [pc, #24]	; (84e58 <_sbrk_r+0x20>)
   84e3e:	4605      	mov	r5, r0
   84e40:	4608      	mov	r0, r1
   84e42:	6023      	str	r3, [r4, #0]
   84e44:	f7fc fb3c 	bl	814c0 <_sbrk>
   84e48:	1c43      	adds	r3, r0, #1
   84e4a:	d000      	beq.n	84e4e <_sbrk_r+0x16>
   84e4c:	bd38      	pop	{r3, r4, r5, pc}
   84e4e:	6823      	ldr	r3, [r4, #0]
   84e50:	2b00      	cmp	r3, #0
   84e52:	d0fb      	beq.n	84e4c <_sbrk_r+0x14>
   84e54:	602b      	str	r3, [r5, #0]
   84e56:	bd38      	pop	{r3, r4, r5, pc}
   84e58:	20070ff0 	.word	0x20070ff0

00084e5c <__sread>:
   84e5c:	b510      	push	{r4, lr}
   84e5e:	460c      	mov	r4, r1
   84e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84e64:	f000 f9f4 	bl	85250 <_read_r>
   84e68:	2800      	cmp	r0, #0
   84e6a:	db03      	blt.n	84e74 <__sread+0x18>
   84e6c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   84e6e:	4403      	add	r3, r0
   84e70:	6523      	str	r3, [r4, #80]	; 0x50
   84e72:	bd10      	pop	{r4, pc}
   84e74:	89a3      	ldrh	r3, [r4, #12]
   84e76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   84e7a:	81a3      	strh	r3, [r4, #12]
   84e7c:	bd10      	pop	{r4, pc}
   84e7e:	bf00      	nop

00084e80 <__swrite>:
   84e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84e84:	460c      	mov	r4, r1
   84e86:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   84e8a:	461f      	mov	r7, r3
   84e8c:	05cb      	lsls	r3, r1, #23
   84e8e:	4616      	mov	r6, r2
   84e90:	4605      	mov	r5, r0
   84e92:	d507      	bpl.n	84ea4 <__swrite+0x24>
   84e94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84e98:	2302      	movs	r3, #2
   84e9a:	2200      	movs	r2, #0
   84e9c:	f000 f9c2 	bl	85224 <_lseek_r>
   84ea0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   84ea4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   84ea8:	81a1      	strh	r1, [r4, #12]
   84eaa:	463b      	mov	r3, r7
   84eac:	4632      	mov	r2, r6
   84eae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84eb2:	4628      	mov	r0, r5
   84eb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84eb8:	f000 b8a2 	b.w	85000 <_write_r>

00084ebc <__sseek>:
   84ebc:	b510      	push	{r4, lr}
   84ebe:	460c      	mov	r4, r1
   84ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84ec4:	f000 f9ae 	bl	85224 <_lseek_r>
   84ec8:	89a3      	ldrh	r3, [r4, #12]
   84eca:	1c42      	adds	r2, r0, #1
   84ecc:	bf0e      	itee	eq
   84ece:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   84ed2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   84ed6:	6520      	strne	r0, [r4, #80]	; 0x50
   84ed8:	81a3      	strh	r3, [r4, #12]
   84eda:	bd10      	pop	{r4, pc}

00084edc <__sclose>:
   84edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84ee0:	f000 b906 	b.w	850f0 <_close_r>

00084ee4 <__swbuf_r>:
   84ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84ee6:	460d      	mov	r5, r1
   84ee8:	4614      	mov	r4, r2
   84eea:	4606      	mov	r6, r0
   84eec:	b110      	cbz	r0, 84ef4 <__swbuf_r+0x10>
   84eee:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84ef0:	2b00      	cmp	r3, #0
   84ef2:	d04b      	beq.n	84f8c <__swbuf_r+0xa8>
   84ef4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84ef8:	69a3      	ldr	r3, [r4, #24]
   84efa:	b291      	uxth	r1, r2
   84efc:	0708      	lsls	r0, r1, #28
   84efe:	60a3      	str	r3, [r4, #8]
   84f00:	d539      	bpl.n	84f76 <__swbuf_r+0x92>
   84f02:	6923      	ldr	r3, [r4, #16]
   84f04:	2b00      	cmp	r3, #0
   84f06:	d036      	beq.n	84f76 <__swbuf_r+0x92>
   84f08:	b2ed      	uxtb	r5, r5
   84f0a:	0489      	lsls	r1, r1, #18
   84f0c:	462f      	mov	r7, r5
   84f0e:	d515      	bpl.n	84f3c <__swbuf_r+0x58>
   84f10:	6822      	ldr	r2, [r4, #0]
   84f12:	6961      	ldr	r1, [r4, #20]
   84f14:	1ad3      	subs	r3, r2, r3
   84f16:	428b      	cmp	r3, r1
   84f18:	da1c      	bge.n	84f54 <__swbuf_r+0x70>
   84f1a:	3301      	adds	r3, #1
   84f1c:	68a1      	ldr	r1, [r4, #8]
   84f1e:	1c50      	adds	r0, r2, #1
   84f20:	3901      	subs	r1, #1
   84f22:	60a1      	str	r1, [r4, #8]
   84f24:	6020      	str	r0, [r4, #0]
   84f26:	7015      	strb	r5, [r2, #0]
   84f28:	6962      	ldr	r2, [r4, #20]
   84f2a:	429a      	cmp	r2, r3
   84f2c:	d01a      	beq.n	84f64 <__swbuf_r+0x80>
   84f2e:	89a3      	ldrh	r3, [r4, #12]
   84f30:	07db      	lsls	r3, r3, #31
   84f32:	d501      	bpl.n	84f38 <__swbuf_r+0x54>
   84f34:	2d0a      	cmp	r5, #10
   84f36:	d015      	beq.n	84f64 <__swbuf_r+0x80>
   84f38:	4638      	mov	r0, r7
   84f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84f3c:	6e61      	ldr	r1, [r4, #100]	; 0x64
   84f3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   84f42:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   84f46:	81a2      	strh	r2, [r4, #12]
   84f48:	6822      	ldr	r2, [r4, #0]
   84f4a:	6661      	str	r1, [r4, #100]	; 0x64
   84f4c:	6961      	ldr	r1, [r4, #20]
   84f4e:	1ad3      	subs	r3, r2, r3
   84f50:	428b      	cmp	r3, r1
   84f52:	dbe2      	blt.n	84f1a <__swbuf_r+0x36>
   84f54:	4621      	mov	r1, r4
   84f56:	4630      	mov	r0, r6
   84f58:	f7fe fd38 	bl	839cc <_fflush_r>
   84f5c:	b940      	cbnz	r0, 84f70 <__swbuf_r+0x8c>
   84f5e:	2301      	movs	r3, #1
   84f60:	6822      	ldr	r2, [r4, #0]
   84f62:	e7db      	b.n	84f1c <__swbuf_r+0x38>
   84f64:	4621      	mov	r1, r4
   84f66:	4630      	mov	r0, r6
   84f68:	f7fe fd30 	bl	839cc <_fflush_r>
   84f6c:	2800      	cmp	r0, #0
   84f6e:	d0e3      	beq.n	84f38 <__swbuf_r+0x54>
   84f70:	f04f 37ff 	mov.w	r7, #4294967295
   84f74:	e7e0      	b.n	84f38 <__swbuf_r+0x54>
   84f76:	4621      	mov	r1, r4
   84f78:	4630      	mov	r0, r6
   84f7a:	f7fe fc17 	bl	837ac <__swsetup_r>
   84f7e:	2800      	cmp	r0, #0
   84f80:	d1f6      	bne.n	84f70 <__swbuf_r+0x8c>
   84f82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84f86:	6923      	ldr	r3, [r4, #16]
   84f88:	b291      	uxth	r1, r2
   84f8a:	e7bd      	b.n	84f08 <__swbuf_r+0x24>
   84f8c:	f7fe fd76 	bl	83a7c <__sinit>
   84f90:	e7b0      	b.n	84ef4 <__swbuf_r+0x10>
   84f92:	bf00      	nop

00084f94 <_wcrtomb_r>:
   84f94:	b5f0      	push	{r4, r5, r6, r7, lr}
   84f96:	4606      	mov	r6, r0
   84f98:	b085      	sub	sp, #20
   84f9a:	461f      	mov	r7, r3
   84f9c:	b189      	cbz	r1, 84fc2 <_wcrtomb_r+0x2e>
   84f9e:	4c10      	ldr	r4, [pc, #64]	; (84fe0 <_wcrtomb_r+0x4c>)
   84fa0:	4d10      	ldr	r5, [pc, #64]	; (84fe4 <_wcrtomb_r+0x50>)
   84fa2:	6824      	ldr	r4, [r4, #0]
   84fa4:	6b64      	ldr	r4, [r4, #52]	; 0x34
   84fa6:	2c00      	cmp	r4, #0
   84fa8:	bf08      	it	eq
   84faa:	462c      	moveq	r4, r5
   84fac:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   84fb0:	47a0      	blx	r4
   84fb2:	1c43      	adds	r3, r0, #1
   84fb4:	d103      	bne.n	84fbe <_wcrtomb_r+0x2a>
   84fb6:	2200      	movs	r2, #0
   84fb8:	238a      	movs	r3, #138	; 0x8a
   84fba:	603a      	str	r2, [r7, #0]
   84fbc:	6033      	str	r3, [r6, #0]
   84fbe:	b005      	add	sp, #20
   84fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84fc2:	460c      	mov	r4, r1
   84fc4:	4a06      	ldr	r2, [pc, #24]	; (84fe0 <_wcrtomb_r+0x4c>)
   84fc6:	4d07      	ldr	r5, [pc, #28]	; (84fe4 <_wcrtomb_r+0x50>)
   84fc8:	6811      	ldr	r1, [r2, #0]
   84fca:	4622      	mov	r2, r4
   84fcc:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   84fce:	a901      	add	r1, sp, #4
   84fd0:	2c00      	cmp	r4, #0
   84fd2:	bf08      	it	eq
   84fd4:	462c      	moveq	r4, r5
   84fd6:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   84fda:	47a0      	blx	r4
   84fdc:	e7e9      	b.n	84fb2 <_wcrtomb_r+0x1e>
   84fde:	bf00      	nop
   84fe0:	20070160 	.word	0x20070160
   84fe4:	20070594 	.word	0x20070594

00084fe8 <__ascii_wctomb>:
   84fe8:	b119      	cbz	r1, 84ff2 <__ascii_wctomb+0xa>
   84fea:	2aff      	cmp	r2, #255	; 0xff
   84fec:	d803      	bhi.n	84ff6 <__ascii_wctomb+0xe>
   84fee:	700a      	strb	r2, [r1, #0]
   84ff0:	2101      	movs	r1, #1
   84ff2:	4608      	mov	r0, r1
   84ff4:	4770      	bx	lr
   84ff6:	238a      	movs	r3, #138	; 0x8a
   84ff8:	f04f 31ff 	mov.w	r1, #4294967295
   84ffc:	6003      	str	r3, [r0, #0]
   84ffe:	e7f8      	b.n	84ff2 <__ascii_wctomb+0xa>

00085000 <_write_r>:
   85000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85002:	460e      	mov	r6, r1
   85004:	2500      	movs	r5, #0
   85006:	4c08      	ldr	r4, [pc, #32]	; (85028 <_write_r+0x28>)
   85008:	4611      	mov	r1, r2
   8500a:	4607      	mov	r7, r0
   8500c:	461a      	mov	r2, r3
   8500e:	4630      	mov	r0, r6
   85010:	6025      	str	r5, [r4, #0]
   85012:	f7fb f99b 	bl	8034c <_write>
   85016:	1c43      	adds	r3, r0, #1
   85018:	d000      	beq.n	8501c <_write_r+0x1c>
   8501a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8501c:	6823      	ldr	r3, [r4, #0]
   8501e:	2b00      	cmp	r3, #0
   85020:	d0fb      	beq.n	8501a <_write_r+0x1a>
   85022:	603b      	str	r3, [r7, #0]
   85024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85026:	bf00      	nop
   85028:	20070ff0 	.word	0x20070ff0

0008502c <__register_exitproc>:
   8502c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   85030:	4d2c      	ldr	r5, [pc, #176]	; (850e4 <__register_exitproc+0xb8>)
   85032:	4606      	mov	r6, r0
   85034:	6828      	ldr	r0, [r5, #0]
   85036:	4698      	mov	r8, r3
   85038:	460f      	mov	r7, r1
   8503a:	4691      	mov	r9, r2
   8503c:	f7ff f8de 	bl	841fc <__retarget_lock_acquire_recursive>
   85040:	4b29      	ldr	r3, [pc, #164]	; (850e8 <__register_exitproc+0xbc>)
   85042:	681c      	ldr	r4, [r3, #0]
   85044:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   85048:	2b00      	cmp	r3, #0
   8504a:	d03e      	beq.n	850ca <__register_exitproc+0x9e>
   8504c:	685a      	ldr	r2, [r3, #4]
   8504e:	2a1f      	cmp	r2, #31
   85050:	dc1c      	bgt.n	8508c <__register_exitproc+0x60>
   85052:	f102 0e01 	add.w	lr, r2, #1
   85056:	b176      	cbz	r6, 85076 <__register_exitproc+0x4a>
   85058:	2101      	movs	r1, #1
   8505a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8505e:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   85062:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   85066:	4091      	lsls	r1, r2
   85068:	4308      	orrs	r0, r1
   8506a:	2e02      	cmp	r6, #2
   8506c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   85070:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   85074:	d023      	beq.n	850be <__register_exitproc+0x92>
   85076:	3202      	adds	r2, #2
   85078:	f8c3 e004 	str.w	lr, [r3, #4]
   8507c:	6828      	ldr	r0, [r5, #0]
   8507e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   85082:	f7ff f8bd 	bl	84200 <__retarget_lock_release_recursive>
   85086:	2000      	movs	r0, #0
   85088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8508c:	4b17      	ldr	r3, [pc, #92]	; (850ec <__register_exitproc+0xc0>)
   8508e:	b30b      	cbz	r3, 850d4 <__register_exitproc+0xa8>
   85090:	f44f 70c8 	mov.w	r0, #400	; 0x190
   85094:	f7ff f92e 	bl	842f4 <malloc>
   85098:	4603      	mov	r3, r0
   8509a:	b1d8      	cbz	r0, 850d4 <__register_exitproc+0xa8>
   8509c:	2000      	movs	r0, #0
   8509e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   850a2:	f04f 0e01 	mov.w	lr, #1
   850a6:	6058      	str	r0, [r3, #4]
   850a8:	6019      	str	r1, [r3, #0]
   850aa:	4602      	mov	r2, r0
   850ac:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   850b0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   850b4:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   850b8:	2e00      	cmp	r6, #0
   850ba:	d0dc      	beq.n	85076 <__register_exitproc+0x4a>
   850bc:	e7cc      	b.n	85058 <__register_exitproc+0x2c>
   850be:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   850c2:	4301      	orrs	r1, r0
   850c4:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   850c8:	e7d5      	b.n	85076 <__register_exitproc+0x4a>
   850ca:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   850ce:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   850d2:	e7bb      	b.n	8504c <__register_exitproc+0x20>
   850d4:	6828      	ldr	r0, [r5, #0]
   850d6:	f7ff f893 	bl	84200 <__retarget_lock_release_recursive>
   850da:	f04f 30ff 	mov.w	r0, #4294967295
   850de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   850e2:	bf00      	nop
   850e4:	20070590 	.word	0x20070590
   850e8:	00085680 	.word	0x00085680
   850ec:	000842f5 	.word	0x000842f5

000850f0 <_close_r>:
   850f0:	b538      	push	{r3, r4, r5, lr}
   850f2:	2300      	movs	r3, #0
   850f4:	4c06      	ldr	r4, [pc, #24]	; (85110 <_close_r+0x20>)
   850f6:	4605      	mov	r5, r0
   850f8:	4608      	mov	r0, r1
   850fa:	6023      	str	r3, [r4, #0]
   850fc:	f7fc f9fc 	bl	814f8 <_close>
   85100:	1c43      	adds	r3, r0, #1
   85102:	d000      	beq.n	85106 <_close_r+0x16>
   85104:	bd38      	pop	{r3, r4, r5, pc}
   85106:	6823      	ldr	r3, [r4, #0]
   85108:	2b00      	cmp	r3, #0
   8510a:	d0fb      	beq.n	85104 <_close_r+0x14>
   8510c:	602b      	str	r3, [r5, #0]
   8510e:	bd38      	pop	{r3, r4, r5, pc}
   85110:	20070ff0 	.word	0x20070ff0

00085114 <_fclose_r>:
   85114:	b570      	push	{r4, r5, r6, lr}
   85116:	b159      	cbz	r1, 85130 <_fclose_r+0x1c>
   85118:	4605      	mov	r5, r0
   8511a:	460c      	mov	r4, r1
   8511c:	b110      	cbz	r0, 85124 <_fclose_r+0x10>
   8511e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85120:	2b00      	cmp	r3, #0
   85122:	d03c      	beq.n	8519e <_fclose_r+0x8a>
   85124:	6e63      	ldr	r3, [r4, #100]	; 0x64
   85126:	07d8      	lsls	r0, r3, #31
   85128:	d505      	bpl.n	85136 <_fclose_r+0x22>
   8512a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8512e:	b92b      	cbnz	r3, 8513c <_fclose_r+0x28>
   85130:	2600      	movs	r6, #0
   85132:	4630      	mov	r0, r6
   85134:	bd70      	pop	{r4, r5, r6, pc}
   85136:	89a3      	ldrh	r3, [r4, #12]
   85138:	0599      	lsls	r1, r3, #22
   8513a:	d53c      	bpl.n	851b6 <_fclose_r+0xa2>
   8513c:	4621      	mov	r1, r4
   8513e:	4628      	mov	r0, r5
   85140:	f7fe fba8 	bl	83894 <__sflush_r>
   85144:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   85146:	4606      	mov	r6, r0
   85148:	b133      	cbz	r3, 85158 <_fclose_r+0x44>
   8514a:	69e1      	ldr	r1, [r4, #28]
   8514c:	4628      	mov	r0, r5
   8514e:	4798      	blx	r3
   85150:	2800      	cmp	r0, #0
   85152:	bfb8      	it	lt
   85154:	f04f 36ff 	movlt.w	r6, #4294967295
   85158:	89a3      	ldrh	r3, [r4, #12]
   8515a:	061a      	lsls	r2, r3, #24
   8515c:	d422      	bmi.n	851a4 <_fclose_r+0x90>
   8515e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85160:	b141      	cbz	r1, 85174 <_fclose_r+0x60>
   85162:	f104 0340 	add.w	r3, r4, #64	; 0x40
   85166:	4299      	cmp	r1, r3
   85168:	d002      	beq.n	85170 <_fclose_r+0x5c>
   8516a:	4628      	mov	r0, r5
   8516c:	f7fe fdac 	bl	83cc8 <_free_r>
   85170:	2300      	movs	r3, #0
   85172:	6323      	str	r3, [r4, #48]	; 0x30
   85174:	6c61      	ldr	r1, [r4, #68]	; 0x44
   85176:	b121      	cbz	r1, 85182 <_fclose_r+0x6e>
   85178:	4628      	mov	r0, r5
   8517a:	f7fe fda5 	bl	83cc8 <_free_r>
   8517e:	2300      	movs	r3, #0
   85180:	6463      	str	r3, [r4, #68]	; 0x44
   85182:	f7fe fcab 	bl	83adc <__sfp_lock_acquire>
   85186:	2200      	movs	r2, #0
   85188:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8518a:	81a2      	strh	r2, [r4, #12]
   8518c:	07db      	lsls	r3, r3, #31
   8518e:	d50e      	bpl.n	851ae <_fclose_r+0x9a>
   85190:	6da0      	ldr	r0, [r4, #88]	; 0x58
   85192:	f7ff f831 	bl	841f8 <__retarget_lock_close_recursive>
   85196:	f7fe fca7 	bl	83ae8 <__sfp_lock_release>
   8519a:	4630      	mov	r0, r6
   8519c:	bd70      	pop	{r4, r5, r6, pc}
   8519e:	f7fe fc6d 	bl	83a7c <__sinit>
   851a2:	e7bf      	b.n	85124 <_fclose_r+0x10>
   851a4:	6921      	ldr	r1, [r4, #16]
   851a6:	4628      	mov	r0, r5
   851a8:	f7fe fd8e 	bl	83cc8 <_free_r>
   851ac:	e7d7      	b.n	8515e <_fclose_r+0x4a>
   851ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
   851b0:	f7ff f826 	bl	84200 <__retarget_lock_release_recursive>
   851b4:	e7ec      	b.n	85190 <_fclose_r+0x7c>
   851b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
   851b8:	f7ff f820 	bl	841fc <__retarget_lock_acquire_recursive>
   851bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   851c0:	2b00      	cmp	r3, #0
   851c2:	d1bb      	bne.n	8513c <_fclose_r+0x28>
   851c4:	6e66      	ldr	r6, [r4, #100]	; 0x64
   851c6:	f016 0601 	ands.w	r6, r6, #1
   851ca:	d1b1      	bne.n	85130 <_fclose_r+0x1c>
   851cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   851ce:	f7ff f817 	bl	84200 <__retarget_lock_release_recursive>
   851d2:	4630      	mov	r0, r6
   851d4:	bd70      	pop	{r4, r5, r6, pc}
   851d6:	bf00      	nop

000851d8 <_fstat_r>:
   851d8:	b570      	push	{r4, r5, r6, lr}
   851da:	460d      	mov	r5, r1
   851dc:	2300      	movs	r3, #0
   851de:	4c07      	ldr	r4, [pc, #28]	; (851fc <_fstat_r+0x24>)
   851e0:	4606      	mov	r6, r0
   851e2:	4611      	mov	r1, r2
   851e4:	4628      	mov	r0, r5
   851e6:	6023      	str	r3, [r4, #0]
   851e8:	f7fc f989 	bl	814fe <_fstat>
   851ec:	1c43      	adds	r3, r0, #1
   851ee:	d000      	beq.n	851f2 <_fstat_r+0x1a>
   851f0:	bd70      	pop	{r4, r5, r6, pc}
   851f2:	6823      	ldr	r3, [r4, #0]
   851f4:	2b00      	cmp	r3, #0
   851f6:	d0fb      	beq.n	851f0 <_fstat_r+0x18>
   851f8:	6033      	str	r3, [r6, #0]
   851fa:	bd70      	pop	{r4, r5, r6, pc}
   851fc:	20070ff0 	.word	0x20070ff0

00085200 <_isatty_r>:
   85200:	b538      	push	{r3, r4, r5, lr}
   85202:	2300      	movs	r3, #0
   85204:	4c06      	ldr	r4, [pc, #24]	; (85220 <_isatty_r+0x20>)
   85206:	4605      	mov	r5, r0
   85208:	4608      	mov	r0, r1
   8520a:	6023      	str	r3, [r4, #0]
   8520c:	f7fc f97c 	bl	81508 <_isatty>
   85210:	1c43      	adds	r3, r0, #1
   85212:	d000      	beq.n	85216 <_isatty_r+0x16>
   85214:	bd38      	pop	{r3, r4, r5, pc}
   85216:	6823      	ldr	r3, [r4, #0]
   85218:	2b00      	cmp	r3, #0
   8521a:	d0fb      	beq.n	85214 <_isatty_r+0x14>
   8521c:	602b      	str	r3, [r5, #0]
   8521e:	bd38      	pop	{r3, r4, r5, pc}
   85220:	20070ff0 	.word	0x20070ff0

00085224 <_lseek_r>:
   85224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85226:	460e      	mov	r6, r1
   85228:	2500      	movs	r5, #0
   8522a:	4c08      	ldr	r4, [pc, #32]	; (8524c <_lseek_r+0x28>)
   8522c:	4611      	mov	r1, r2
   8522e:	4607      	mov	r7, r0
   85230:	461a      	mov	r2, r3
   85232:	4630      	mov	r0, r6
   85234:	6025      	str	r5, [r4, #0]
   85236:	f7fc f969 	bl	8150c <_lseek>
   8523a:	1c43      	adds	r3, r0, #1
   8523c:	d000      	beq.n	85240 <_lseek_r+0x1c>
   8523e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85240:	6823      	ldr	r3, [r4, #0]
   85242:	2b00      	cmp	r3, #0
   85244:	d0fb      	beq.n	8523e <_lseek_r+0x1a>
   85246:	603b      	str	r3, [r7, #0]
   85248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8524a:	bf00      	nop
   8524c:	20070ff0 	.word	0x20070ff0

00085250 <_read_r>:
   85250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85252:	460e      	mov	r6, r1
   85254:	2500      	movs	r5, #0
   85256:	4c08      	ldr	r4, [pc, #32]	; (85278 <_read_r+0x28>)
   85258:	4611      	mov	r1, r2
   8525a:	4607      	mov	r7, r0
   8525c:	461a      	mov	r2, r3
   8525e:	4630      	mov	r0, r6
   85260:	6025      	str	r5, [r4, #0]
   85262:	f7fb f855 	bl	80310 <_read>
   85266:	1c43      	adds	r3, r0, #1
   85268:	d000      	beq.n	8526c <_read_r+0x1c>
   8526a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8526c:	6823      	ldr	r3, [r4, #0]
   8526e:	2b00      	cmp	r3, #0
   85270:	d0fb      	beq.n	8526a <_read_r+0x1a>
   85272:	603b      	str	r3, [r7, #0]
   85274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85276:	bf00      	nop
   85278:	20070ff0 	.word	0x20070ff0

0008527c <__aeabi_uldivmod>:
   8527c:	b953      	cbnz	r3, 85294 <__aeabi_uldivmod+0x18>
   8527e:	b94a      	cbnz	r2, 85294 <__aeabi_uldivmod+0x18>
   85280:	2900      	cmp	r1, #0
   85282:	bf08      	it	eq
   85284:	2800      	cmpeq	r0, #0
   85286:	bf1c      	itt	ne
   85288:	f04f 31ff 	movne.w	r1, #4294967295
   8528c:	f04f 30ff 	movne.w	r0, #4294967295
   85290:	f000 b97a 	b.w	85588 <__aeabi_idiv0>
   85294:	f1ad 0c08 	sub.w	ip, sp, #8
   85298:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8529c:	f000 f806 	bl	852ac <__udivmoddi4>
   852a0:	f8dd e004 	ldr.w	lr, [sp, #4]
   852a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   852a8:	b004      	add	sp, #16
   852aa:	4770      	bx	lr

000852ac <__udivmoddi4>:
   852ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   852b0:	468c      	mov	ip, r1
   852b2:	460e      	mov	r6, r1
   852b4:	4604      	mov	r4, r0
   852b6:	9d08      	ldr	r5, [sp, #32]
   852b8:	2b00      	cmp	r3, #0
   852ba:	d150      	bne.n	8535e <__udivmoddi4+0xb2>
   852bc:	428a      	cmp	r2, r1
   852be:	4617      	mov	r7, r2
   852c0:	d96c      	bls.n	8539c <__udivmoddi4+0xf0>
   852c2:	fab2 fe82 	clz	lr, r2
   852c6:	f1be 0f00 	cmp.w	lr, #0
   852ca:	d00b      	beq.n	852e4 <__udivmoddi4+0x38>
   852cc:	f1ce 0c20 	rsb	ip, lr, #32
   852d0:	fa01 f60e 	lsl.w	r6, r1, lr
   852d4:	fa20 fc0c 	lsr.w	ip, r0, ip
   852d8:	fa02 f70e 	lsl.w	r7, r2, lr
   852dc:	ea4c 0c06 	orr.w	ip, ip, r6
   852e0:	fa00 f40e 	lsl.w	r4, r0, lr
   852e4:	0c3a      	lsrs	r2, r7, #16
   852e6:	fbbc f9f2 	udiv	r9, ip, r2
   852ea:	b2bb      	uxth	r3, r7
   852ec:	fb02 cc19 	mls	ip, r2, r9, ip
   852f0:	fb09 fa03 	mul.w	sl, r9, r3
   852f4:	ea4f 4814 	mov.w	r8, r4, lsr #16
   852f8:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   852fc:	45b2      	cmp	sl, r6
   852fe:	d90a      	bls.n	85316 <__udivmoddi4+0x6a>
   85300:	19f6      	adds	r6, r6, r7
   85302:	f109 31ff 	add.w	r1, r9, #4294967295
   85306:	f080 8125 	bcs.w	85554 <__udivmoddi4+0x2a8>
   8530a:	45b2      	cmp	sl, r6
   8530c:	f240 8122 	bls.w	85554 <__udivmoddi4+0x2a8>
   85310:	f1a9 0902 	sub.w	r9, r9, #2
   85314:	443e      	add	r6, r7
   85316:	eba6 060a 	sub.w	r6, r6, sl
   8531a:	fbb6 f0f2 	udiv	r0, r6, r2
   8531e:	fb02 6610 	mls	r6, r2, r0, r6
   85322:	fb00 f303 	mul.w	r3, r0, r3
   85326:	b2a4      	uxth	r4, r4
   85328:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   8532c:	42a3      	cmp	r3, r4
   8532e:	d909      	bls.n	85344 <__udivmoddi4+0x98>
   85330:	19e4      	adds	r4, r4, r7
   85332:	f100 32ff 	add.w	r2, r0, #4294967295
   85336:	f080 810b 	bcs.w	85550 <__udivmoddi4+0x2a4>
   8533a:	42a3      	cmp	r3, r4
   8533c:	f240 8108 	bls.w	85550 <__udivmoddi4+0x2a4>
   85340:	3802      	subs	r0, #2
   85342:	443c      	add	r4, r7
   85344:	2100      	movs	r1, #0
   85346:	1ae4      	subs	r4, r4, r3
   85348:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8534c:	2d00      	cmp	r5, #0
   8534e:	d062      	beq.n	85416 <__udivmoddi4+0x16a>
   85350:	2300      	movs	r3, #0
   85352:	fa24 f40e 	lsr.w	r4, r4, lr
   85356:	602c      	str	r4, [r5, #0]
   85358:	606b      	str	r3, [r5, #4]
   8535a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8535e:	428b      	cmp	r3, r1
   85360:	d907      	bls.n	85372 <__udivmoddi4+0xc6>
   85362:	2d00      	cmp	r5, #0
   85364:	d055      	beq.n	85412 <__udivmoddi4+0x166>
   85366:	2100      	movs	r1, #0
   85368:	e885 0041 	stmia.w	r5, {r0, r6}
   8536c:	4608      	mov	r0, r1
   8536e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85372:	fab3 f183 	clz	r1, r3
   85376:	2900      	cmp	r1, #0
   85378:	f040 808f 	bne.w	8549a <__udivmoddi4+0x1ee>
   8537c:	42b3      	cmp	r3, r6
   8537e:	d302      	bcc.n	85386 <__udivmoddi4+0xda>
   85380:	4282      	cmp	r2, r0
   85382:	f200 80fc 	bhi.w	8557e <__udivmoddi4+0x2d2>
   85386:	1a84      	subs	r4, r0, r2
   85388:	eb66 0603 	sbc.w	r6, r6, r3
   8538c:	2001      	movs	r0, #1
   8538e:	46b4      	mov	ip, r6
   85390:	2d00      	cmp	r5, #0
   85392:	d040      	beq.n	85416 <__udivmoddi4+0x16a>
   85394:	e885 1010 	stmia.w	r5, {r4, ip}
   85398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8539c:	b912      	cbnz	r2, 853a4 <__udivmoddi4+0xf8>
   8539e:	2701      	movs	r7, #1
   853a0:	fbb7 f7f2 	udiv	r7, r7, r2
   853a4:	fab7 fe87 	clz	lr, r7
   853a8:	f1be 0f00 	cmp.w	lr, #0
   853ac:	d135      	bne.n	8541a <__udivmoddi4+0x16e>
   853ae:	2101      	movs	r1, #1
   853b0:	1bf6      	subs	r6, r6, r7
   853b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   853b6:	fa1f f887 	uxth.w	r8, r7
   853ba:	fbb6 f2fc 	udiv	r2, r6, ip
   853be:	fb0c 6612 	mls	r6, ip, r2, r6
   853c2:	fb08 f002 	mul.w	r0, r8, r2
   853c6:	0c23      	lsrs	r3, r4, #16
   853c8:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   853cc:	42b0      	cmp	r0, r6
   853ce:	d907      	bls.n	853e0 <__udivmoddi4+0x134>
   853d0:	19f6      	adds	r6, r6, r7
   853d2:	f102 33ff 	add.w	r3, r2, #4294967295
   853d6:	d202      	bcs.n	853de <__udivmoddi4+0x132>
   853d8:	42b0      	cmp	r0, r6
   853da:	f200 80d2 	bhi.w	85582 <__udivmoddi4+0x2d6>
   853de:	461a      	mov	r2, r3
   853e0:	1a36      	subs	r6, r6, r0
   853e2:	fbb6 f0fc 	udiv	r0, r6, ip
   853e6:	fb0c 6610 	mls	r6, ip, r0, r6
   853ea:	fb08 f800 	mul.w	r8, r8, r0
   853ee:	b2a3      	uxth	r3, r4
   853f0:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   853f4:	45a0      	cmp	r8, r4
   853f6:	d907      	bls.n	85408 <__udivmoddi4+0x15c>
   853f8:	19e4      	adds	r4, r4, r7
   853fa:	f100 33ff 	add.w	r3, r0, #4294967295
   853fe:	d202      	bcs.n	85406 <__udivmoddi4+0x15a>
   85400:	45a0      	cmp	r8, r4
   85402:	f200 80b9 	bhi.w	85578 <__udivmoddi4+0x2cc>
   85406:	4618      	mov	r0, r3
   85408:	eba4 0408 	sub.w	r4, r4, r8
   8540c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   85410:	e79c      	b.n	8534c <__udivmoddi4+0xa0>
   85412:	4629      	mov	r1, r5
   85414:	4628      	mov	r0, r5
   85416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8541a:	fa07 f70e 	lsl.w	r7, r7, lr
   8541e:	f1ce 0320 	rsb	r3, lr, #32
   85422:	fa26 f203 	lsr.w	r2, r6, r3
   85426:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   8542a:	fbb2 f1fc 	udiv	r1, r2, ip
   8542e:	fa1f f887 	uxth.w	r8, r7
   85432:	fb0c 2211 	mls	r2, ip, r1, r2
   85436:	fa06 f60e 	lsl.w	r6, r6, lr
   8543a:	fa20 f303 	lsr.w	r3, r0, r3
   8543e:	fb01 f908 	mul.w	r9, r1, r8
   85442:	4333      	orrs	r3, r6
   85444:	0c1e      	lsrs	r6, r3, #16
   85446:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   8544a:	45b1      	cmp	r9, r6
   8544c:	fa00 f40e 	lsl.w	r4, r0, lr
   85450:	d909      	bls.n	85466 <__udivmoddi4+0x1ba>
   85452:	19f6      	adds	r6, r6, r7
   85454:	f101 32ff 	add.w	r2, r1, #4294967295
   85458:	f080 808c 	bcs.w	85574 <__udivmoddi4+0x2c8>
   8545c:	45b1      	cmp	r9, r6
   8545e:	f240 8089 	bls.w	85574 <__udivmoddi4+0x2c8>
   85462:	3902      	subs	r1, #2
   85464:	443e      	add	r6, r7
   85466:	eba6 0609 	sub.w	r6, r6, r9
   8546a:	fbb6 f0fc 	udiv	r0, r6, ip
   8546e:	fb0c 6210 	mls	r2, ip, r0, r6
   85472:	fb00 f908 	mul.w	r9, r0, r8
   85476:	b29e      	uxth	r6, r3
   85478:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   8547c:	45b1      	cmp	r9, r6
   8547e:	d907      	bls.n	85490 <__udivmoddi4+0x1e4>
   85480:	19f6      	adds	r6, r6, r7
   85482:	f100 33ff 	add.w	r3, r0, #4294967295
   85486:	d271      	bcs.n	8556c <__udivmoddi4+0x2c0>
   85488:	45b1      	cmp	r9, r6
   8548a:	d96f      	bls.n	8556c <__udivmoddi4+0x2c0>
   8548c:	3802      	subs	r0, #2
   8548e:	443e      	add	r6, r7
   85490:	eba6 0609 	sub.w	r6, r6, r9
   85494:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   85498:	e78f      	b.n	853ba <__udivmoddi4+0x10e>
   8549a:	f1c1 0720 	rsb	r7, r1, #32
   8549e:	fa22 f807 	lsr.w	r8, r2, r7
   854a2:	408b      	lsls	r3, r1
   854a4:	ea48 0303 	orr.w	r3, r8, r3
   854a8:	fa26 f407 	lsr.w	r4, r6, r7
   854ac:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   854b0:	fbb4 f9fe 	udiv	r9, r4, lr
   854b4:	fa1f fc83 	uxth.w	ip, r3
   854b8:	fb0e 4419 	mls	r4, lr, r9, r4
   854bc:	408e      	lsls	r6, r1
   854be:	fa20 f807 	lsr.w	r8, r0, r7
   854c2:	fb09 fa0c 	mul.w	sl, r9, ip
   854c6:	ea48 0806 	orr.w	r8, r8, r6
   854ca:	ea4f 4618 	mov.w	r6, r8, lsr #16
   854ce:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   854d2:	45a2      	cmp	sl, r4
   854d4:	fa02 f201 	lsl.w	r2, r2, r1
   854d8:	fa00 f601 	lsl.w	r6, r0, r1
   854dc:	d908      	bls.n	854f0 <__udivmoddi4+0x244>
   854de:	18e4      	adds	r4, r4, r3
   854e0:	f109 30ff 	add.w	r0, r9, #4294967295
   854e4:	d244      	bcs.n	85570 <__udivmoddi4+0x2c4>
   854e6:	45a2      	cmp	sl, r4
   854e8:	d942      	bls.n	85570 <__udivmoddi4+0x2c4>
   854ea:	f1a9 0902 	sub.w	r9, r9, #2
   854ee:	441c      	add	r4, r3
   854f0:	eba4 040a 	sub.w	r4, r4, sl
   854f4:	fbb4 f0fe 	udiv	r0, r4, lr
   854f8:	fb0e 4410 	mls	r4, lr, r0, r4
   854fc:	fb00 fc0c 	mul.w	ip, r0, ip
   85500:	fa1f f888 	uxth.w	r8, r8
   85504:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   85508:	45a4      	cmp	ip, r4
   8550a:	d907      	bls.n	8551c <__udivmoddi4+0x270>
   8550c:	18e4      	adds	r4, r4, r3
   8550e:	f100 3eff 	add.w	lr, r0, #4294967295
   85512:	d229      	bcs.n	85568 <__udivmoddi4+0x2bc>
   85514:	45a4      	cmp	ip, r4
   85516:	d927      	bls.n	85568 <__udivmoddi4+0x2bc>
   85518:	3802      	subs	r0, #2
   8551a:	441c      	add	r4, r3
   8551c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   85520:	fba0 8902 	umull	r8, r9, r0, r2
   85524:	eba4 0c0c 	sub.w	ip, r4, ip
   85528:	45cc      	cmp	ip, r9
   8552a:	46c2      	mov	sl, r8
   8552c:	46ce      	mov	lr, r9
   8552e:	d315      	bcc.n	8555c <__udivmoddi4+0x2b0>
   85530:	d012      	beq.n	85558 <__udivmoddi4+0x2ac>
   85532:	b155      	cbz	r5, 8554a <__udivmoddi4+0x29e>
   85534:	ebb6 030a 	subs.w	r3, r6, sl
   85538:	eb6c 060e 	sbc.w	r6, ip, lr
   8553c:	fa06 f707 	lsl.w	r7, r6, r7
   85540:	40cb      	lsrs	r3, r1
   85542:	431f      	orrs	r7, r3
   85544:	40ce      	lsrs	r6, r1
   85546:	602f      	str	r7, [r5, #0]
   85548:	606e      	str	r6, [r5, #4]
   8554a:	2100      	movs	r1, #0
   8554c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85550:	4610      	mov	r0, r2
   85552:	e6f7      	b.n	85344 <__udivmoddi4+0x98>
   85554:	4689      	mov	r9, r1
   85556:	e6de      	b.n	85316 <__udivmoddi4+0x6a>
   85558:	4546      	cmp	r6, r8
   8555a:	d2ea      	bcs.n	85532 <__udivmoddi4+0x286>
   8555c:	ebb8 0a02 	subs.w	sl, r8, r2
   85560:	eb69 0e03 	sbc.w	lr, r9, r3
   85564:	3801      	subs	r0, #1
   85566:	e7e4      	b.n	85532 <__udivmoddi4+0x286>
   85568:	4670      	mov	r0, lr
   8556a:	e7d7      	b.n	8551c <__udivmoddi4+0x270>
   8556c:	4618      	mov	r0, r3
   8556e:	e78f      	b.n	85490 <__udivmoddi4+0x1e4>
   85570:	4681      	mov	r9, r0
   85572:	e7bd      	b.n	854f0 <__udivmoddi4+0x244>
   85574:	4611      	mov	r1, r2
   85576:	e776      	b.n	85466 <__udivmoddi4+0x1ba>
   85578:	3802      	subs	r0, #2
   8557a:	443c      	add	r4, r7
   8557c:	e744      	b.n	85408 <__udivmoddi4+0x15c>
   8557e:	4608      	mov	r0, r1
   85580:	e706      	b.n	85390 <__udivmoddi4+0xe4>
   85582:	3a02      	subs	r2, #2
   85584:	443e      	add	r6, r7
   85586:	e72b      	b.n	853e0 <__udivmoddi4+0x134>

00085588 <__aeabi_idiv0>:
   85588:	4770      	bx	lr
   8558a:	bf00      	nop
   8558c:	736e6f43 	.word	0x736e6f43
   85590:	20656c6f 	.word	0x20656c6f
   85594:	64616572 	.word	0x64616572
   85598:	00000a79 	.word	0x00000a79
   8559c:	3d3d3d3d 	.word	0x3d3d3d3d
   855a0:	3d3d3d3d 	.word	0x3d3d3d3d
   855a4:	3d3d3d3d 	.word	0x3d3d3d3d
   855a8:	00000a3d 	.word	0x00000a3d
   855ac:	0c040800 	.word	0x0c040800
   855b0:	0e060a02 	.word	0x0e060a02
   855b4:	0d050901 	.word	0x0d050901
   855b8:	0f070b03 	.word	0x0f070b03

000855bc <b>:
   855bc:	bc0b4b09 bb33cac5 3bf5649e 3c909d95     .K....3..d.;...<
   855cc:	3c87ca5d 3b2cdf9e bc377a7e bc19d04d     ]..<..,;~z7.M...
   855dc:	3bfd6e75 3ca94b44 3c323c14 bc7ab1e4     un.;DK.<.<2<..z.
   855ec:	bce82956 bbebf1ad 3cfd7680 3d273899     V).......v.<.8'=
   855fc:	bb15365c bd81a9a7 bd86f503 3d1ad364     \6..........d..=
   8560c:	3e56b120 3eaf2137 3eaf2137 3e56b120      .V>7!.>7!.> .V>
   8561c:	3d1ad364 bd86f503 bd81a9a7 bb15365c     d..=........\6..
   8562c:	3d273899 3cfd7680 bbebf1ad bce82956     .8'=.v.<....V)..
   8563c:	bc7ab1e4 3c323c14 3ca94b44 3bfd6e75     ..z..<2<DK.<un.;
   8564c:	bc19d04d bc377a7e 3b2cdf9e 3c87ca5d     M...~z7...,;]..<
   8565c:	3c909d95 3bf5649e bb33cac5 bc0b4b09     ...<.d.;..3..K..
   8566c:	65666645 203a746b 00006425 74727173     Effekt: %d..sqrt
   8567c:	00000000                                ....

00085680 <_global_impure_ptr>:
   85680:	20070168 33323130 37363534 42413938     h.. 0123456789AB
   85690:	46454443 00000000 33323130 37363534     CDEF....01234567
   856a0:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   856b0:	0000296c                                l)..

000856b4 <blanks.7217>:
   856b4:	20202020 20202020 20202020 20202020                     

000856c4 <zeroes.7218>:
   856c4:	30303030 30303030 30303030 30303030     0000000000000000
   856d4:	00000043 49534f50 00000058 0000002e     C...POSIX.......

000856e4 <_ctype_>:
   856e4:	20202000 20202020 28282020 20282828     .         ((((( 
   856f4:	20202020 20202020 20202020 20202020                     
   85704:	10108820 10101010 10101010 10101010      ...............
   85714:	04040410 04040404 10040404 10101010     ................
   85724:	41411010 41414141 01010101 01010101     ..AAAAAA........
   85734:	01010101 01010101 01010101 10101010     ................
   85744:	42421010 42424242 02020202 02020202     ..BBBBBB........
   85754:	02020202 02020202 02020202 10101010     ................
   85764:	00000020 00000000 00000000 00000000      ...............
	...

000857e8 <_init>:
   857e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   857ea:	bf00      	nop
   857ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
   857ee:	bc08      	pop	{r3}
   857f0:	469e      	mov	lr, r3
   857f2:	4770      	bx	lr

000857f4 <__init_array_start>:
   857f4:	00083875 	.word	0x00083875

000857f8 <__frame_dummy_init_array_entry>:
   857f8:	00080119                                ....

000857fc <_fini>:
   857fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   857fe:	bf00      	nop
   85800:	bcf8      	pop	{r3, r4, r5, r6, r7}
   85802:	bc08      	pop	{r3}
   85804:	469e      	mov	lr, r3
   85806:	4770      	bx	lr

00085808 <__fini_array_start>:
   85808:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070154 	.word	0x20070154

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <eight>:
2007012c:	01000000                                ....

20070130 <five>:
20070130:	00010001                                ....

20070134 <four>:
20070134:	00010000                                ....

20070138 <nine>:
20070138:	01000001                                ....

2007013c <one>:
2007013c:	00000001                                ....

20070140 <seven>:
20070140:	00010101                                ....

20070144 <six>:
20070144:	00010100                                ....

20070148 <three>:
20070148:	00000101                                ....

2007014c <two>:
2007014c:	00000100                                ....

20070150 <g_interrupt_enabled>:
20070150:	00000001                                ....

20070154 <SystemCoreClock>:
20070154:	003d0900                                ..=.

20070158 <testaddr>:
20070158:	00010001                                ....

2007015c <__fdlib_version>:
2007015c:	00000001                                ....

20070160 <_impure_ptr>:
20070160:	20070168 00000000                       h.. ....

20070168 <impure_data>:
20070168:	00000000 20070454 200704bc 20070524     ....T.. ... $.. 
	...
20070210:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070220:	0005deec 0000000b 00000000 00000000     ................
	...

20070590 <__atexit_recursive_mutex>:
20070590:	20070fcc                                ... 

20070594 <__global_locale>:
20070594:	00000043 00000000 00000000 00000000     C...............
	...
200705b4:	00000043 00000000 00000000 00000000     C...............
	...
200705d4:	00000043 00000000 00000000 00000000     C...............
	...
200705f4:	00000043 00000000 00000000 00000000     C...............
	...
20070614:	00000043 00000000 00000000 00000000     C...............
	...
20070634:	00000043 00000000 00000000 00000000     C...............
	...
20070654:	00000043 00000000 00000000 00000000     C...............
	...
20070674:	00084fe9 00084849 00000000 000856e4     .O..IH.......V..
20070684:	000856e0 00085694 00085694 00085694     .V...V...V...V..
20070694:	00085694 00085694 00085694 00085694     .V...V...V...V..
200706a4:	00085694 00085694 ffffffff ffffffff     .V...V..........
200706b4:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706dc:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20070700 <__malloc_av_>:
	...
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 
20070998:	20070990 20070990 20070998 20070998     ... ... ... ... 
200709a8:	200709a0 200709a0 200709a8 200709a8     ... ... ... ... 
200709b8:	200709b0 200709b0 200709b8 200709b8     ... ... ... ... 
200709c8:	200709c0 200709c0 200709c8 200709c8     ... ... ... ... 
200709d8:	200709d0 200709d0 200709d8 200709d8     ... ... ... ... 
200709e8:	200709e0 200709e0 200709e8 200709e8     ... ... ... ... 
200709f8:	200709f0 200709f0 200709f8 200709f8     ... ... ... ... 
20070a08:	20070a00 20070a00 20070a08 20070a08     ... ... ... ... 
20070a18:	20070a10 20070a10 20070a18 20070a18     ... ... ... ... 
20070a28:	20070a20 20070a20 20070a28 20070a28      ..  .. (.. (.. 
20070a38:	20070a30 20070a30 20070a38 20070a38     0.. 0.. 8.. 8.. 
20070a48:	20070a40 20070a40 20070a48 20070a48     @.. @.. H.. H.. 
20070a58:	20070a50 20070a50 20070a58 20070a58     P.. P.. X.. X.. 
20070a68:	20070a60 20070a60 20070a68 20070a68     `.. `.. h.. h.. 
20070a78:	20070a70 20070a70 20070a78 20070a78     p.. p.. x.. x.. 
20070a88:	20070a80 20070a80 20070a88 20070a88     ... ... ... ... 
20070a98:	20070a90 20070a90 20070a98 20070a98     ... ... ... ... 
20070aa8:	20070aa0 20070aa0 20070aa8 20070aa8     ... ... ... ... 
20070ab8:	20070ab0 20070ab0 20070ab8 20070ab8     ... ... ... ... 
20070ac8:	20070ac0 20070ac0 20070ac8 20070ac8     ... ... ... ... 
20070ad8:	20070ad0 20070ad0 20070ad8 20070ad8     ... ... ... ... 
20070ae8:	20070ae0 20070ae0 20070ae8 20070ae8     ... ... ... ... 
20070af8:	20070af0 20070af0 20070af8 20070af8     ... ... ... ... 

20070b08 <__malloc_sbrk_base>:
20070b08:	ffffffff                                ....

20070b0c <__malloc_trim_threshold>:
20070b0c:	00020000                                ....
